name: CI

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  backend:
    name: Backend - Tests and Static Analysis
    runs-on: ubuntu-latest
    env:
      APP_ENV: testing
      CI: true
      COMPOSER_NO_INTERACTION: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, dom, fileinfo, pdo, sqlite, pdo_sqlite
          coverage: none

      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: ~/.composer/cache/files
          key: composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            composer-

      - name: Install Composer dependencies
        run: composer install --no-interaction --prefer-dist --no-progress

      - name: Prepare application environment
        run: |
          if [ -f .env.example ]; then cp .env.example .env; else printf "APP_ENV=testing\nAPP_DEBUG=false\nAPP_KEY=\nDB_CONNECTION=sqlite\nDB_DATABASE=${{ github.workspace }}/database/database.sqlite\n" > .env; fi
          php -r "file_exists('database/database.sqlite') || touch('database/database.sqlite');"
          php artisan key:generate --ansi
          # Use SQLite for CI to avoid external DB services
          sed -i "s/^DB_CONNECTION=.*/DB_CONNECTION=sqlite/" .env || true
          if grep -q '^DB_DATABASE=' .env; then sed -i "s|^DB_DATABASE=.*|DB_DATABASE=${{ github.workspace }}/database/database.sqlite|" .env; else echo "DB_DATABASE=${{ github.workspace }}/database/database.sqlite" >> .env; fi

      - name: Run database migrations
        run: php artisan migrate --graceful --no-interaction -v

      - name: Static analysis (Larastan)
        run: composer phpstan

      - name: Run test suite (Pest)
        run: composer test

      - name: Validate production caches
        run: |
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache

  frontend:
    name: Frontend - Production Build
    runs-on: ubuntu-latest
    env:
      CI: true
      NODE_ENV: production
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build

      - name: Upload built assets
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: |
            public/build
            dist
          if-no-files-found: ignore


