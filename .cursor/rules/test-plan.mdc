---
description:
globs:
alwaysApply: false
---
Jeste≈õ do≈õwiadczonym in≈ºynierem QA, kt√≥rego zadaniem jest stworzenie kompleksowego planu test√≥w dla projektu programistycznego. Przeanalizuj poni≈ºsze informacje o projekcie:

<kod_projektu>
================================================
FILE: README.md
================================================
# Menu Maker

An AI-powered web application that helps families effortlessly plan weekly meals, accurately scale recipe ingredients, and generate a single PDF containing both the meal plan and a consolidated shopping list.

![MIT License](https://img.shields.io/badge/license-MIT-blue.svg)
![Status](https://img.shields.io/badge/status-in%20development-yellow.svg)

## Table of Contents

1. [Project Description](#1-project-description)
2. [Tech Stack](#2-tech-stack)
3. [Getting Started Locally](#3-getting-started-locally)
4. [Available Scripts](#4-available-scripts)
5. [Project Scope](#5-project-scope)
6. [Project Status](#6-project-status)
7. [License](#7-license)

## 1. Project Description

Menu Maker automates family meal planning by letting users save their own recipes, store an ingredient dictionary, and instantly produce a seven-day meal plan (three meals per day). The system leverages artificial intelligence to scale ingredient quantities based on recipe calories, serving size, and each family member‚Äôs profile (age and gender). It outputs a single PDF that first lists the meal plan and then a consolidated, unit-converted shopping list.

## 2. Tech Stack

**Backend**

- PHP 8.2+
- Laravel 12.0+
- Inertia.js Laravel 2.0+
- MySQL
- Redis

**Frontend**

- Node.js 22
- Vue.js 3.4+
- Inertia.js Vue3 2.0+
- TailwindCSS 3.2.1+
- Shadcn-vue 2.2.0+

**Tooling & Testing**

- Vite 7
- Laravel Sail (Docker environment)
- Laravel Pint (code style)
- Larastan (static analysis)
- PHPUnit (test runner)

## 3. Getting Started Locally

### Prerequisites

- PHP 8.2+
- Composer
- Node.js 22 & npm
- Docker & Docker Compose (for Laravel Sail)

### Setup

```bash
# 1. Clone the repository
$ git clone <repository-url>
$ cd menu-maker

# 2. Install PHP dependencies
$ composer install

# 3. Install JavaScript dependencies
$ npm install

# 4. Configure environment
$ cp .env.example .env
$ php artisan key:generate

# 5. (Optional) start the Docker environment via Sail
$ ./vendor/bin/sail up -d

# 6. Run database migrations & seeders
$ php artisan migrate --seed

# 7. Start development servers
$ npm run dev           # Vite dev server with HMR
$ php artisan serve      # Or use Sail: ./vendor/bin/sail artisan serve
```

## 4. Available Scripts

### NPM

| Command         | Description                                |
| --------------- | ------------------------------------------ |
| `npm run dev`   | Start the Vite development server with HMR |
| `npm run build` | Compile and bundle assets for production   |

### Composer / Artisan

| Command                     | Description                                                          |
| --------------------------- | -------------------------------------------------------------------- |
| `composer dev`              | Convenience script: web server, queue listener, logs & Vite together |
| `composer test`             | Clear config cache and run the PHPUnit test suite                    |
| `composer pint`             | Fix code style issues using Laravel Pint                             |
| `composer pint-test`        | Check code style without fixing                                      |
| `composer phpstan`          | Run static analysis with Larastan                                    |
| `composer phpstan-baseline` | Generate baseline for static analysis                                |
| `composer phpstan-verbose`  | Static analysis with verbose output                                  |

## 5. Project Scope

### Included in MVP

- Email-based authentication (registration, login, password reset)
- Family profile management (name, birth date, gender)
- Recipe CRUD with mandatory fields (name, category, ingredients, instructions, calories, servings)
- Weekly meal plan generation (7 days √ó 3 meals) with no duplications and unlimited regenerations
- AI-driven scaling of ingredient quantities per family profile
- Consolidated shopping list with automatic unit conversion (>1000 g ‚Üí kg, >1000 ml ‚Üí l) and rounding to two decimals
- Single PDF export containing the meal plan followed by the shopping list

### Out of Scope for MVP

- Importing recipes from external URLs
- Multimedia support (images or videos)
- Sharing recipes with other users / social features
- Back-ups and advanced hosting infrastructure
- Editing generated meal plans or shopping lists

## 6. Project Status

üöß **MVP development in progress** ‚Äì see the [project board](https://github.com/<org-or-user>/<repo>/projects/1) for up-to-date milestones.

## 7. License

This project is licensed under the **MIT License**. See the [`LICENSE`](LICENSE) file for details.



================================================
FILE: artisan
================================================
#!/usr/bin/env php
<?php

use Illuminate\Foundation\Application;
use Symfony\Component\Console\Input\ArgvInput;

define('LARAVEL_START', microtime(true));

// Register the Composer autoloader...
require __DIR__.'/vendor/autoload.php';

// Bootstrap Laravel and handle the command...
/** @var Application $app */
$app = require_once __DIR__.'/bootstrap/app.php';

$status = $app->handleCommand(new ArgvInput);

exit($status);



================================================
FILE: components.json
================================================
{
  "$schema": "https://shadcn-vue.com/schema.json",
  "style": "new-york",
  "typescript": false,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "resources/css/app.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/Components",
    "composables": "@/Composables",
    "utils": "@/lib/utils",
    "ui": "@/Components/ui",
    "lib": "@/lib"
  },
  "iconLibrary": "lucide"
}



================================================
FILE: composer.json
================================================
{
    "$schema": "https://getcomposer.org/schema.json",
    "name": "laravel/laravel",
    "type": "project",
    "description": "The skeleton application for the Laravel framework.",
    "keywords": [
        "laravel",
        "framework"
    ],
    "license": "MIT",
    "require": {
        "php": "^8.2",
        "inertiajs/inertia-laravel": "^2.0",
        "laravel/framework": "^12.0",
        "laravel/sanctum": "^4.0",
        "laravel/tinker": "^2.10.1",
        "tightenco/ziggy": "^2.0"
    },
    "require-dev": {
        "fakerphp/faker": "^1.23",
        "larastan/larastan": "^3.6",
        "laravel/breeze": "^2.3",
        "laravel/pail": "^1.2.2",
        "laravel/pint": "^1.13",
        "laravel/sail": "^1.41",
        "mockery/mockery": "^1.6",
        "nunomaduro/collision": "^8.6",
        "phpunit/phpunit": "^11.5.3"
    },
    "autoload": {
        "psr-4": {
            "App\\": "app/",
            "Database\\Factories\\": "database/factories/",
            "Database\\Seeders\\": "database/seeders/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Tests\\": "tests/"
        }
    },
    "scripts": {
        "post-autoload-dump": [
            "Illuminate\\Foundation\\ComposerScripts::postAutoloadDump",
            "@php artisan package:discover --ansi"
        ],
        "post-update-cmd": [
            "@php artisan vendor:publish --tag=laravel-assets --ansi --force"
        ],
        "post-root-package-install": [
            "@php -r \"file_exists('.env') || copy('.env.example', '.env');\""
        ],
        "post-create-project-cmd": [
            "@php artisan key:generate --ansi",
            "@php -r \"file_exists('database/database.sqlite') || touch('database/database.sqlite');\"",
            "@php artisan migrate --graceful --ansi"
        ],
        "dev": [
            "Composer\\Config::disableProcessTimeout",
            "npx concurrently -c \"#93c5fd,#c4b5fd,#fb7185,#fdba74\" \"php artisan serve\" \"php artisan queue:listen --tries=1\" \"php artisan pail --timeout=0\" \"npm run dev\" --names=server,queue,logs,vite"
        ],
        "test": [
            "@php artisan config:clear --ansi",
            "@php artisan test"
        ],
        "pint": [
            "./vendor/bin/pint"
        ],
        "pint-test": [
            "./vendor/bin/pint --test"
        ],
        "phpstan": [
            "./vendor/bin/phpstan analyse"
        ],
        "phpstan-baseline": [
            "./vendor/bin/phpstan analyse --generate-baseline"
        ],
        "phpstan-verbose": [
            "./vendor/bin/phpstan analyse -v"
        ]
    },
    "extra": {
        "laravel": {
            "dont-discover": []
        }
    },
    "config": {
        "optimize-autoloader": true,
        "preferred-install": "dist",
        "sort-packages": true,
        "allow-plugins": {
            "pestphp/pest-plugin": true,
            "php-http/discovery": true
        }
    },
    "minimum-stability": "stable",
    "prefer-stable": true
}



================================================
FILE: docker-compose.yml
================================================
services:
    laravel.test:
        build:
            context: './docker/8.4'
            dockerfile: Dockerfile
            args:
                WWWGROUP: '${WWWGROUP}'
                NODE_VERSION: '22'
        image: 'sail-8.4/app'
        extra_hosts:
            - 'host.docker.internal:host-gateway'
        ports:
            - '${APP_PORT:-80}:80'
            - '${VITE_PORT:-5173}:${VITE_PORT:-5173}'
        environment:
            WWWUSER: '${WWWUSER}'
            LARAVEL_SAIL: 1
            XDEBUG_MODE: '${SAIL_XDEBUG_MODE:-off}'
            XDEBUG_CONFIG: '${SAIL_XDEBUG_CONFIG:-client_host=host.docker.internal}'
            IGNITION_LOCAL_SITES_PATH: '${PWD}'
        volumes:
            - '.:/var/www/html'
        networks:
            - sail
        depends_on:
            - mysql
            - redis
    mysql:
        image: 'mysql/mysql-server:8.0'
        ports:
            - '${FORWARD_DB_PORT:-3306}:3306'
        environment:
            MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}'
            MYSQL_ROOT_HOST: '%'
            MYSQL_DATABASE: '${DB_DATABASE}'
            MYSQL_USER: '${DB_USERNAME}'
            MYSQL_PASSWORD: '${DB_PASSWORD}'
            MYSQL_ALLOW_EMPTY_PASSWORD: 1
            MYSQL_EXTRA_OPTIONS: '${MYSQL_EXTRA_OPTIONS}'
        volumes:
            - 'sail-mysql:/var/lib/mysql'
            - './docker/mysql/create-testing-database.sh:/docker-entrypoint-initdb.d/10-create-testing-database.sh'
        networks:
            - sail
        healthcheck:
            test:
                - CMD
                - mysqladmin
                - ping
                - '-p${DB_PASSWORD}'
            retries: 3
            timeout: 5s
    redis:
        image: 'redis:alpine'
        ports:
            - '${FORWARD_REDIS_PORT:-6379}:6379'
        volumes:
            - 'sail-redis:/data'
        networks:
            - sail
        healthcheck:
            test:
                - CMD
                - redis-cli
                - ping
            retries: 3
            timeout: 5s
networks:
    sail:
        driver: bridge
volumes:
    sail-mysql:
        driver: local
    sail-redis:
        driver: local



================================================
FILE: jsconfig.json
================================================
{
    "compilerOptions": {
        "baseUrl": ".",
        "paths": {
            "@/*": [
                "resources/js/*"
            ],
            "@/components": [
                "resources/js/Components"
            ],
            "@/ui": [
                "resources/js/Components/ui"
            ],
            "@/lib/*": [
                "resources/js/lib/*"
            ],
            "ziggy-js": [
                "./vendor/tightenco/ziggy"
            ]
        }
    },
    "exclude": [
        "node_modules",
        "public"
    ]
}



================================================
FILE: package.json
================================================
{
    "$schema": "https://json.schemastore.org/package.json",
    "private": true,
    "type": "module",
    "scripts": {
        "build": "vite build && vite build --ssr",
        "dev": "vite"
    },
    "devDependencies": {
        "@inertiajs/vue3": "^2.0.0",
        "@tailwindcss/forms": "^0.5.3",
        "@tailwindcss/vite": "^4.0.0",
        "@vitejs/plugin-vue": "^6.0.1",
        "@vue/server-renderer": "^3.4.0",
        "autoprefixer": "^10.4.12",
        "axios": "^1.8.2",
        "concurrently": "^9.0.1",
        "laravel-vite-plugin": "^2.0.0",
        "postcss": "^8.4.31",
        "tailwindcss": "^3.2.1",
        "vite": "^7.0.4",
        "vue": "^3.4.0"
    },
    "dependencies": {
        "@vueuse/core": "^13.6.0",
        "class-variance-authority": "^0.7.1",
        "clsx": "^2.1.1",
        "lucide-vue-next": "^0.534.0",
        "reka-ui": "^2.4.1",
        "shadcn-vue": "^2.2.0",
        "tailwind-merge": "^3.3.1",
        "tailwindcss-animate": "^1.0.7",
        "vue-sonner": "^2.0.2"
    }
}



================================================
FILE: phpstan-baseline.neon
================================================
parameters:
	ignoreErrors:
		-
			message: '#^Parameter \#1 \$user of class Illuminate\\Auth\\Events\\Verified constructor expects Illuminate\\Contracts\\Auth\\MustVerifyEmail, App\\Models\\User\|null given\.$#'
			identifier: argument.type
			count: 1
			path: app/Http/Controllers/Auth/VerifyEmailController.php



================================================
FILE: phpstan.neon
================================================
includes:
    - vendor/larastan/larastan/extension.neon
    - phpstan-baseline.neon

parameters:

    paths:
        - app/

    # Level of rule strictness (0-9, 9 being the strictest)
    level: 5

    excludePaths:
        - ./*/*/FileToBeExcluded.php

    checkOctaneCompatibility: true
    checkModelProperties: true




================================================
FILE: phpunit.xml
================================================
<?xml version="1.0" encoding="UTF-8"?>
<phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="vendor/phpunit/phpunit/phpunit.xsd"
         bootstrap="vendor/autoload.php"
         colors="true"
>
    <testsuites>
        <testsuite name="Unit">
            <directory>tests/Unit</directory>
        </testsuite>
        <testsuite name="Feature">
            <directory>tests/Feature</directory>
        </testsuite>
    </testsuites>
    <source>
        <include>
            <directory>app</directory>
        </include>
    </source>
    <php>
        <env name="APP_ENV" value="testing"/>
        <env name="APP_MAINTENANCE_DRIVER" value="file"/>
        <env name="BCRYPT_ROUNDS" value="4"/>
        <env name="CACHE_STORE" value="array"/>
        <env name="DB_DATABASE" value="testing"/>
        <env name="MAIL_MAILER" value="array"/>
        <env name="QUEUE_CONNECTION" value="sync"/>
        <env name="SESSION_DRIVER" value="array"/>
        <env name="PULSE_ENABLED" value="false"/>
        <env name="TELESCOPE_ENABLED" value="false"/>
        <env name="NIGHTWATCH_ENABLED" value="false"/>
    </php>
</phpunit>



================================================
FILE: pint.json
================================================
{
    "preset": "laravel",
    "rules": {
        "no_unused_imports": true,
        "not_operator_with_successor_space": true,
        "trailing_comma_in_multiline": true,
        "phpdoc_scalar": true,
        "unary_operator_spaces": true,
        "binary_operator_spaces": {
            "default": "single_space"
        },
        "blank_line_before_statement": {
            "statements": [
                "return"
            ]
        },
        "method_chaining_indentation": true,
        "multiline_whitespace_before_semicolons": {
            "strategy": "no_multi_line"
        },
        "single_trait_insert_per_statement": true
    }
}



================================================
FILE: postcss.config.js
================================================
export default {
    plugins: {
        tailwindcss: {},
        autoprefixer: {},
    },
};



================================================
FILE: tailwind.config.js
================================================
import defaultTheme from 'tailwindcss/defaultTheme';
import forms from '@tailwindcss/forms';

/** @type {import('tailwindcss').Config} */
export default {
    content: [
        './vendor/laravel/framework/src/Illuminate/Pagination/resources/views/*.blade.php',
        './storage/framework/views/*.php',
        './resources/views/**/*.blade.php',
        './resources/js/**/*.vue',
    ],
    darkMode: ['class'],
    theme: {
    	container: {
    		center: true,
    		padding: '2rem',
    		screens: {
    			'2xl': '1400px'
    		}
    	},
    	extend: {
    		fontFamily: {
    			sans: [
    				'Figtree',
                    ...defaultTheme.fontFamily.sans
                ]
    		},
    		colors: {
    			border: 'hsl(var(--border))',
    			input: 'hsl(var(--input))',
    			ring: 'hsl(var(--ring))',
    			background: 'hsl(var(--background))',
    			foreground: 'hsl(var(--foreground))',
    			primary: {
    				DEFAULT: 'hsl(var(--primary))',
    				foreground: 'hsl(var(--primary-foreground))'
    			},
    			secondary: {
    				DEFAULT: 'hsl(var(--secondary))',
    				foreground: 'hsl(var(--secondary-foreground))'
    			},
    			destructive: {
    				DEFAULT: 'hsl(var(--destructive))',
    				foreground: 'hsl(var(--destructive-foreground))'
    			},
    			muted: {
    				DEFAULT: 'hsl(var(--muted))',
    				foreground: 'hsl(var(--muted-foreground))'
    			},
    			accent: {
    				DEFAULT: 'hsl(var(--accent))',
    				foreground: 'hsl(var(--accent-foreground))'
    			},
    			popover: {
    				DEFAULT: 'hsl(var(--popover))',
    				foreground: 'hsl(var(--popover-foreground))'
    			},
    			card: {
    				DEFAULT: 'hsl(var(--card))',
    				foreground: 'hsl(var(--card-foreground))'
    			},
    			chart: {
    				'1': 'hsl(var(--chart-1))',
    				'2': 'hsl(var(--chart-2))',
    				'3': 'hsl(var(--chart-3))',
    				'4': 'hsl(var(--chart-4))',
    				'5': 'hsl(var(--chart-5))'
    			}
    		},
    		borderRadius: {
    			lg: 'var(--radius)',
    			md: 'calc(var(--radius) - 2px)',
    			sm: 'calc(var(--radius) - 4px)'
    		},
    		keyframes: {
    			'accordion-down': {
    				from: {
    					height: '0'
    				},
    				to: {
    					height: 'var(--radix-accordion-content-height)'
    				}
    			},
    			'accordion-up': {
    				from: {
    					height: 'var(--radix-accordion-content-height)'
    				},
    				to: {
    					height: '0'
    				}
    			}
    		},
    		animation: {
    			'accordion-down': 'accordion-down 0.2s ease-out',
    			'accordion-up': 'accordion-up 0.2s ease-out'
    		}
    	}
    },

    plugins: [forms, require("tailwindcss-animate")],
};



================================================
FILE: vite.config.js
================================================
import { defineConfig } from 'vite';
import laravel from 'laravel-vite-plugin';
import vue from '@vitejs/plugin-vue';
import path from 'path';

export default defineConfig({
    plugins: [
        laravel({
            input: 'resources/js/app.js',
            ssr: 'resources/js/ssr.js',
            refresh: true,
        }),
        vue({
            template: {
                transformAssetUrls: {
                    base: null,
                    includeAbsolute: false,
                },
            },
        }),
    ],
    resolve: {
        alias: {
            '@': path.resolve(__dirname, 'resources/js'),
            '@/components': path.resolve(__dirname, 'resources/js/Components'),
            '@/ui': path.resolve(__dirname, 'resources/js/Components/ui'),
            '@/lib': path.resolve(__dirname, 'resources/js/lib'),
        },
    },
});



================================================
FILE: .editorconfig
================================================
root = true

[*]
charset = utf-8
end_of_line = lf
indent_size = 4
indent_style = space
insert_final_newline = true
trim_trailing_whitespace = true

[*.md]
trim_trailing_whitespace = false

[*.{yml,yaml}]
indent_size = 2

[docker-compose.yml]
indent_size = 4



================================================
FILE: .env.example
================================================
APP_NAME=Laravel
APP_ENV=local
APP_KEY=
APP_DEBUG=true
APP_URL=http://localhost

APP_LOCALE=en
APP_FALLBACK_LOCALE=en
APP_FAKER_LOCALE=en_US

APP_MAINTENANCE_DRIVER=file
# APP_MAINTENANCE_STORE=database

PHP_CLI_SERVER_WORKERS=4

BCRYPT_ROUNDS=12

LOG_CHANNEL=stack
LOG_STACK=single
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=debug

DB_CONNECTION=sqlite
# DB_HOST=127.0.0.1
# DB_PORT=3306
# DB_DATABASE=laravel
# DB_USERNAME=root
# DB_PASSWORD=

SESSION_DRIVER=database
SESSION_LIFETIME=120
SESSION_ENCRYPT=false
SESSION_PATH=/
SESSION_DOMAIN=null

BROADCAST_CONNECTION=log
FILESYSTEM_DISK=local
QUEUE_CONNECTION=database

CACHE_STORE=database
# CACHE_PREFIX=

MEMCACHED_HOST=127.0.0.1

REDIS_CLIENT=phpredis
REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER=log
MAIL_SCHEME=null
MAIL_HOST=127.0.0.1
MAIL_PORT=2525
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_FROM_ADDRESS="hello@example.com"
MAIL_FROM_NAME="${APP_NAME}"

AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=
AWS_USE_PATH_STYLE_ENDPOINT=false

VITE_APP_NAME="${APP_NAME}"



================================================
FILE: app/Http/Controllers/Controller.php
================================================
<?php

declare(strict_types=1);

namespace App\Http\Controllers;

use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
use Illuminate\Foundation\Validation\ValidatesRequests;
use Illuminate\Routing\Controller as BaseController;

abstract class Controller extends BaseController
{
    use AuthorizesRequests;
    use ValidatesRequests;
}



================================================
FILE: app/Http/Controllers/FamilyMemberController.php
================================================
<?php

declare(strict_types=1);

namespace App\Http\Controllers;

use App\Http\Requests\FamilyMemberRequest;
use App\Models\FamilyMember;
use Illuminate\Http\RedirectResponse;
use Illuminate\Support\Facades\Auth;
use Inertia\Inertia;
use Inertia\Response;

class FamilyMemberController extends Controller
{
    public function __construct()
    {
        $this->authorizeResource(FamilyMember::class, 'family_member');
    }

    /**
     * Display a listing of the resource.
     */
    public function index(): Response
    {
        $familyMembers = FamilyMember::where('user_id', Auth::id())
            ->orderBy('first_name')
            ->paginate(15);

        return Inertia::render('FamilyMembers/Index', [
            'familyMembers' => $familyMembers,
        ]);
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create(): Response
    {
        return Inertia::render('FamilyMembers/Create', [
            'genders' => ['male', 'female'],
        ]);
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(FamilyMemberRequest $request): RedirectResponse
    {
        $validated = $request->validated();
        $validated['user_id'] = Auth::id();

        FamilyMember::create($validated);

        return redirect()->route('family-members.index')
            ->with('success', 'Family member created successfully.');
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(FamilyMember $familyMember): Response
    {
        return Inertia::render('FamilyMembers/Edit', [
            'familyMember' => $familyMember,
            'genders' => ['male', 'female'],
        ]);
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(FamilyMemberRequest $request, FamilyMember $familyMember): RedirectResponse
    {
        $familyMember->update($request->validated());

        return redirect()->route('family-members.index')
            ->with('success', 'Family member updated successfully.');
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(FamilyMember $familyMember): RedirectResponse
    {
        $familyMember->delete();

        return redirect()->route('family-members.index')
            ->with('success', 'Family member deleted successfully.');
    }
}



================================================
FILE: app/Http/Controllers/MealPlanController.php
================================================
<?php

declare(strict_types=1);

namespace App\Http\Controllers;

use App\Http\Requests\GenerateMealPlanRequest;
use App\Http\Requests\RegenerateMealPlanRequest;
use App\Http\Resources\MealPlanCollection;
use App\Http\Resources\MealPlanResource;
use App\Jobs\GenerateMealPlanJob;
use App\Models\MealPlan;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Http\Response;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;
use Inertia\Inertia;
use Inertia\Response as InertiaResponse;

class MealPlanController extends Controller
{
    public function __construct()
    {
        $this->authorizeResource(MealPlan::class, 'meal_plan');
    }

    /**
     * Display a listing of meal plans with filtering and pagination.
     */
    public function index(Request $request): InertiaResponse|JsonResponse
    {
        $query = MealPlan::ownedBy(Auth::user())
            ->withCount(['meals', 'logs']);

        // Apply status filter
        if ($request->filled('filter.status')) {
            $query->where('status', $request->input('filter.status'));
        }

        // Apply sorting
        $sortField = $request->get('sort', 'created_at');
        $sortDirection = $request->get('direction', 'desc');

        $allowedSortFields = ['start_date', 'end_date', 'status', 'created_at'];
        if (in_array($sortField, $allowedSortFields)) {
            $query->orderBy($sortField, $sortDirection === 'asc' ? 'asc' : 'desc');
        }

        // Pagination
        $perPage = min(max((int) $request->get('perPage', 15), 5), 100);
        $mealPlans = $query->paginate($perPage);

        $data = new MealPlanCollection($mealPlans);

        if ($request->expectsJson()) {
            return response()->json($data);
        }

        return Inertia::render('MealPlans/Index', [
            'mealPlans' => $data,
            'filters' => $request->only(['filter.status', 'sort', 'direction', 'perPage']),
            'statuses' => [
                ['value' => 'pending', 'label' => 'Pending'],
                ['value' => 'processing', 'label' => 'Processing'],
                ['value' => 'done', 'label' => 'Done'],
                ['value' => 'error', 'label' => 'Error'],
            ],
        ]);
    }

    /**
     * Display the specified meal plan.
     */
    public function show(MealPlan $mealPlan): InertiaResponse|JsonResponse
    {
        $mealPlan->load([
            'meals.recipe.recipeIngredients.ingredient',
            'meals.recipe.recipeIngredients.unit',
            'logs' => function ($query) {
                $query->orderBy('created_at', 'desc');
            },
        ]);

        $data = new MealPlanResource($mealPlan);

        if (request()->expectsJson()) {
            return response()->json(['data' => $data]);
        }

        return Inertia::render('MealPlans/Show', [
            'mealPlan' => $data,
        ]);
    }

    /**
     * Generate a new meal plan.
     */
    public function store(GenerateMealPlanRequest $request): JsonResponse
    {
        $validated = $request->validated();

        // Calculate end_date (start_date + 6 days for 7-day plan)
        $startDate = \Carbon\Carbon::parse($validated['start_date']);
        $endDate = $startDate->copy()->addDays(6);

        // Create meal plan with pending status
        $mealPlan = MealPlan::create([
            'user_id' => $validated['user_id'],
            'start_date' => $startDate,
            'end_date' => $endDate,
            'status' => 'pending',
        ]);

        // Dispatch generation job
        GenerateMealPlanJob::dispatch($mealPlan, false); // regenerate = false

        $data = new MealPlanResource($mealPlan);

        return response()->json([
            'message' => 'Meal plan generation started.',
            'data' => $data,
        ], 201);
    }

    /**
     * Regenerate an existing meal plan.
     */
    public function update(RegenerateMealPlanRequest $request, MealPlan $mealPlan): JsonResponse
    {
        // Guard: Check if already processing (should be caught by policy/validation but double-check)
        if ($mealPlan->status === 'processing') {
            return response()->json([
                'message' => 'Cannot regenerate meal plan while it is being processed.',
                'error' => 'meal_plan_processing',
            ], 409);
        }

        // Reset status and clear generation metadata
        $mealPlan->update([
            'status' => 'pending',
            'generation_meta' => null,
        ]);

        // Dispatch regeneration job
        GenerateMealPlanJob::dispatch($mealPlan, true); // regenerate = true

        $data = new MealPlanResource($mealPlan->fresh());

        return response()->json([
            'message' => 'Meal plan regeneration started.',
            'data' => $data,
        ], 202);
    }

    /**
     * Download the PDF file for the specified meal plan.
     */
    public function downloadPdf(MealPlan $mealPlan): Response
    {
        // Check if meal plan is in done status
        if ($mealPlan->status !== 'done') {
            abort(404, 'PDF is not available for this meal plan.');
        }

        // Check if PDF file exists
        if (! $mealPlan->pdf_path || ! Storage::exists($mealPlan->pdf_path)) {
            abort(404, 'PDF file not found.');
        }

        // Get the file content
        $fileContent = Storage::get($mealPlan->pdf_path);
        $fileName = sprintf(
            'meal-plan-%s-%s.pdf',
            $mealPlan->start_date,
            $mealPlan->end_date
        );

        return response($fileContent)
            ->header('Content-Type', 'application/pdf')
            ->header('Content-Disposition', 'attachment; filename="'.$fileName.'"');
    }

    /**
     * Remove the specified meal plan from storage.
     */
    public function destroy(MealPlan $mealPlan): Response
    {
        // Delete PDF file if exists
        if ($mealPlan->pdf_path && Storage::exists($mealPlan->pdf_path)) {
            Storage::delete($mealPlan->pdf_path);
        }

        // Delete meal plan (cascade delete handles meals & logs via DB constraints)
        $mealPlan->delete();

        return response()->noContent();
    }
}



================================================
FILE: app/Http/Controllers/ProfileController.php
================================================
<?php

namespace App\Http\Controllers;

use App\Http\Requests\ProfileUpdateRequest;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Redirect;
use Inertia\Inertia;
use Inertia\Response;

class ProfileController extends Controller
{
    /**
     * Display the user's profile form.
     */
    public function edit(Request $request): Response
    {
        return Inertia::render('Profile/Edit', [
            'mustVerifyEmail' => $request->user() instanceof MustVerifyEmail,
            'status' => session('status'),
        ]);
    }

    /**
     * Update the user's profile information.
     */
    public function update(ProfileUpdateRequest $request): RedirectResponse
    {
        $request->user()->fill($request->validated());

        if ($request->user()->isDirty('email')) {
            $request->user()->email_verified_at = null;
        }

        $request->user()->save();

        return Redirect::route('profile.edit');
    }

    /**
     * Delete the user's account.
     */
    public function destroy(Request $request): RedirectResponse
    {
        $request->validate([
            'password' => ['required', 'current_password'],
        ]);

        $user = $request->user();

        Auth::logout();

        $user->delete();

        $request->session()->invalidate();
        $request->session()->regenerateToken();

        return Redirect::to('/');
    }
}



================================================
FILE: app/Http/Controllers/RecipeController.php
================================================
<?php

declare(strict_types=1);

namespace App\Http\Controllers;

use App\Http\Requests\StoreRecipeRequest;
use App\Http\Requests\UpdateRecipeRequest;
use App\Http\Resources\RecipeResource;
use App\Models\Ingredient;
use App\Models\Recipe;
use App\Models\Unit;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Inertia\Inertia;
use Inertia\Response;

class RecipeController extends Controller
{
    public function __construct()
    {
        $this->authorizeResource(Recipe::class, 'recipe');
    }

    /**
     * Display a listing of the resource with filtering and search.
     */
    public function index(Request $request): Response
    {
        $query = Recipe::forUser(Auth::id());

        // Apply search filter
        if ($request->filled('search')) {
            $query->search($request->search);
        }

        // Apply category filter
        if ($request->filled('category')) {
            $query->byCategory($request->category);
        }

        // Apply sorting
        $sortField = $request->get('sort', 'created_at');
        $sortDirection = $request->get('direction', 'desc');
        $query->orderByField($sortField, $sortDirection === 'asc' ? 'asc' : 'desc');

        $recipes = $query->paginate($request->get('per_page', 15));

        return Inertia::render('Recipes/Index', [
            'recipes' => RecipeResource::collection($recipes),
            'filters' => $request->only(['search', 'category', 'sort', 'direction']),
            'categories' => [
                ['value' => 'breakfast', 'label' => 'Breakfast'],
                ['value' => 'supper', 'label' => 'Supper'],
                ['value' => 'dinner', 'label' => 'Dinner'],
            ],
        ]);
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create(): Response
    {
        return Inertia::render('Recipes/Form', [
            'recipe' => null,
            'categories' => [
                ['value' => 'breakfast', 'label' => 'Breakfast'],
                ['value' => 'supper', 'label' => 'Super'],
                ['value' => 'dinner', 'label' => 'Dinner'],
            ],
            'ingredients' => Ingredient::orderBy('name')->get(['id', 'name']),
            'units' => Unit::orderBy('code')->get(['id', 'code']),
        ]);
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(StoreRecipeRequest $request): RedirectResponse
    {
        $recipe = DB::transaction(function () use ($request) {
            $validatedData = $request->validated();

            // Remove ingredients from recipe data
            $ingredients = $validatedData['ingredients'] ?? [];
            unset($validatedData['ingredients']);

            // Create recipe
            $recipe = Recipe::create([
                ...$validatedData,
                'user_id' => Auth::id(),
            ]);

            // Sync ingredients if provided
            if (! empty($ingredients)) {
                $this->syncRecipeIngredients($recipe, $ingredients);
            }

            return $recipe;
        });

        return redirect()->route('recipes.index')
            ->with('success', 'Recipe created successfully.');
    }

    /**
     * Display the specified resource.
     */
    public function show(Request $request, Recipe $recipe): Response
    {
        $recipe->load(['recipeIngredients.ingredient', 'recipeIngredients.unit']);

        return Inertia::render('Recipes/Show', [
            'recipe' => new RecipeResource($recipe),
            'canEdit' => $request->user()->can('update', $recipe),
        ]);
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(Recipe $recipe): Response
    {
        $recipe->load(['recipeIngredients.ingredient', 'recipeIngredients.unit']);

        return Inertia::render('Recipes/Form', [
            'recipe' => new RecipeResource($recipe),
            'categories' => [
                ['value' => 'breakfast', 'label' => 'Breakfast'],
                ['value' => 'supper', 'label' => 'Supper'],
                ['value' => 'dinner', 'label' => 'Dinner'],
            ],
            'ingredients' => Ingredient::orderBy('name')->get(['id', 'name']),
            'units' => Unit::orderBy('code')->get(['id', 'code']),
        ]);
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(UpdateRecipeRequest $request, Recipe $recipe): RedirectResponse
    {
        DB::transaction(function () use ($request, $recipe) {
            $validatedData = $request->validated();

            // Remove ingredients from recipe data
            $ingredients = $validatedData['ingredients'] ?? null;
            unset($validatedData['ingredients']);

            // Update recipe
            $recipe->update($validatedData);

            // Sync ingredients if provided
            if (isset($ingredients)) {
                $this->syncRecipeIngredients($recipe, $ingredients);
            }
        });

        return redirect()->route('recipes.show', $recipe)
            ->with('success', 'Recipe updated successfully.');
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(Recipe $recipe): RedirectResponse
    {
        $recipe->delete();

        return redirect()->route('recipes.index')
            ->with('success', 'Recipe deleted successfully.');
    }

    /**
     * Sync recipe ingredients with the provided data.
     */
    private function syncRecipeIngredients(Recipe $recipe, array $ingredients): void
    {
        $pivotData = collect($ingredients)->mapWithKeys(function ($ingredient) {
            return [$ingredient['ingredient_id'] => [
                'quantity' => $ingredient['quantity'],
                'unit_id' => $ingredient['unit_id'],
            ]];
        });

        $recipe->ingredients()->sync($pivotData);
    }
}



================================================
FILE: app/Http/Controllers/Auth/AuthenticatedSessionController.php
================================================
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Http\Requests\Auth\LoginRequest;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Route;
use Inertia\Inertia;
use Inertia\Response;

class AuthenticatedSessionController extends Controller
{
    /**
     * Display the login view.
     */
    public function create(): Response
    {
        return Inertia::render('Auth/Login', [
            'canResetPassword' => Route::has('password.request'),
            'status' => session('status'),
        ]);
    }

    /**
     * Handle an incoming authentication request.
     */
    public function store(LoginRequest $request): RedirectResponse
    {
        $request->authenticate();

        $request->session()->regenerate();

        return redirect()->intended(route('dashboard', absolute: false));
    }

    /**
     * Destroy an authenticated session.
     */
    public function destroy(Request $request): RedirectResponse
    {
        Auth::guard('web')->logout();

        $request->session()->invalidate();

        $request->session()->regenerateToken();

        return redirect('/');
    }
}



================================================
FILE: app/Http/Controllers/Auth/ConfirmablePasswordController.php
================================================
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Validation\ValidationException;
use Inertia\Inertia;
use Inertia\Response;

class ConfirmablePasswordController extends Controller
{
    /**
     * Show the confirm password view.
     */
    public function show(): Response
    {
        return Inertia::render('Auth/ConfirmPassword');
    }

    /**
     * Confirm the user's password.
     */
    public function store(Request $request): RedirectResponse
    {
        if (! Auth::guard('web')->validate([
            'email' => $request->user()->email,
            'password' => $request->password,
        ])) {
            throw ValidationException::withMessages([
                'password' => __('auth.password'),
            ]);
        }

        $request->session()->put('auth.password_confirmed_at', time());

        return redirect()->intended(route('dashboard', absolute: false));
    }
}



================================================
FILE: app/Http/Controllers/Auth/EmailVerificationNotificationController.php
================================================
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;

class EmailVerificationNotificationController extends Controller
{
    /**
     * Send a new email verification notification.
     */
    public function store(Request $request): RedirectResponse
    {
        if ($request->user()->hasVerifiedEmail()) {
            return redirect()->intended(route('dashboard', absolute: false));
        }

        $request->user()->sendEmailVerificationNotification();

        return back()->with('status', 'verification-link-sent');
    }
}



================================================
FILE: app/Http/Controllers/Auth/EmailVerificationPromptController.php
================================================
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Inertia\Inertia;
use Inertia\Response;

class EmailVerificationPromptController extends Controller
{
    /**
     * Display the email verification prompt.
     */
    public function __invoke(Request $request): RedirectResponse|Response
    {
        return $request->user()->hasVerifiedEmail()
                    ? redirect()->intended(route('dashboard', absolute: false))
                    : Inertia::render('Auth/VerifyEmail', ['status' => session('status')]);
    }
}



================================================
FILE: app/Http/Controllers/Auth/NewPasswordController.php
================================================
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Auth\Events\PasswordReset;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Password;
use Illuminate\Support\Str;
use Illuminate\Validation\Rules;
use Illuminate\Validation\ValidationException;
use Inertia\Inertia;
use Inertia\Response;

class NewPasswordController extends Controller
{
    /**
     * Display the password reset view.
     */
    public function create(Request $request): Response
    {
        return Inertia::render('Auth/ResetPassword', [
            'email' => $request->email,
            'token' => $request->route('token'),
        ]);
    }

    /**
     * Handle an incoming new password request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'token' => 'required',
            'email' => 'required|email',
            'password' => ['required', 'confirmed', Rules\Password::defaults()],
        ]);

        // Here we will attempt to reset the user's password. If it is successful we
        // will update the password on an actual user model and persist it to the
        // database. Otherwise we will parse the error and return the response.
        $status = Password::reset(
            $request->only('email', 'password', 'password_confirmation', 'token'),
            function ($user) use ($request) {
                $user->forceFill([
                    'password' => Hash::make($request->password),
                    'remember_token' => Str::random(60),
                ])->save();

                event(new PasswordReset($user));
            }
        );

        // If the password was successfully reset, we will redirect the user back to
        // the application's home authenticated view. If there is an error we can
        // redirect them back to where they came from with their error message.
        if ($status == Password::PASSWORD_RESET) {
            return redirect()->route('login')->with('status', __($status));
        }

        throw ValidationException::withMessages([
            'email' => [trans($status)],
        ]);
    }
}



================================================
FILE: app/Http/Controllers/Auth/PasswordController.php
================================================
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rules\Password;

class PasswordController extends Controller
{
    /**
     * Update the user's password.
     */
    public function update(Request $request): RedirectResponse
    {
        $validated = $request->validate([
            'current_password' => ['required', 'current_password'],
            'password' => ['required', Password::defaults(), 'confirmed'],
        ]);

        $request->user()->update([
            'password' => Hash::make($validated['password']),
        ]);

        return back();
    }
}



================================================
FILE: app/Http/Controllers/Auth/PasswordResetLinkController.php
================================================
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Password;
use Illuminate\Validation\ValidationException;
use Inertia\Inertia;
use Inertia\Response;

class PasswordResetLinkController extends Controller
{
    /**
     * Display the password reset link request view.
     */
    public function create(): Response
    {
        return Inertia::render('Auth/ForgotPassword', [
            'status' => session('status'),
        ]);
    }

    /**
     * Handle an incoming password reset link request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'email' => 'required|email',
        ]);

        // We will send the password reset link to this user. Once we have attempted
        // to send the link, we will examine the response then see the message we
        // need to show to the user. Finally, we'll send out a proper response.
        $status = Password::sendResetLink(
            $request->only('email')
        );

        if ($status == Password::RESET_LINK_SENT) {
            return back()->with('status', __($status));
        }

        throw ValidationException::withMessages([
            'email' => [trans($status)],
        ]);
    }
}



================================================
FILE: app/Http/Controllers/Auth/RegisteredUserController.php
================================================
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Models\User;
use Illuminate\Auth\Events\Registered;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rules;
use Inertia\Inertia;
use Inertia\Response;

class RegisteredUserController extends Controller
{
    /**
     * Display the registration view.
     */
    public function create(): Response
    {
        return Inertia::render('Auth/Register');
    }

    /**
     * Handle an incoming registration request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'name' => 'required|string|max:255',
            'email' => 'required|string|lowercase|email|max:255|unique:'.User::class,
            'password' => ['required', 'confirmed', Rules\Password::defaults()],
        ]);

        $user = User::create([
            'name' => $request->name,
            'email' => $request->email,
            'password' => Hash::make($request->password),
        ]);

        event(new Registered($user));

        Auth::login($user);

        return redirect(route('dashboard', absolute: false));
    }
}



================================================
FILE: app/Http/Controllers/Auth/VerifyEmailController.php
================================================
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Auth\Events\Verified;
use Illuminate\Foundation\Auth\EmailVerificationRequest;
use Illuminate\Http\RedirectResponse;

class VerifyEmailController extends Controller
{
    /**
     * Mark the authenticated user's email address as verified.
     */
    public function __invoke(EmailVerificationRequest $request): RedirectResponse
    {
        if ($request->user()->hasVerifiedEmail()) {
            return redirect()->intended(route('dashboard', absolute: false).'?verified=1');
        }

        if ($request->user()->markEmailAsVerified()) {
            event(new Verified($request->user()));
        }

        return redirect()->intended(route('dashboard', absolute: false).'?verified=1');
    }
}



================================================
FILE: app/Http/Middleware/HandleInertiaRequests.php
================================================
<?php

namespace App\Http\Middleware;

use Illuminate\Http\Request;
use Inertia\Middleware;
use Tighten\Ziggy\Ziggy;

class HandleInertiaRequests extends Middleware
{
    /**
     * The root template that is loaded on the first page visit.
     *
     * @var string
     */
    protected $rootView = 'app';

    /**
     * Determine the current asset version.
     */
    public function version(Request $request): ?string
    {
        return parent::version($request);
    }

    /**
     * Define the props that are shared by default.
     *
     * @return array<string, mixed>
     */
    public function share(Request $request): array
    {
        return [
            ...parent::share($request),
            'auth' => [
                'user' => $request->user(),
            ],
            'ziggy' => fn () => [
                ...(new Ziggy)->toArray(),
                'location' => $request->url(),
            ],
        ];
    }
}



================================================
FILE: app/Http/Requests/FamilyMemberRequest.php
================================================
<?php

declare(strict_types=1);

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;

class FamilyMemberRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'first_name' => ['required', 'string', 'max:255'],
            'birth_date' => ['required', 'date', 'before:today'],
            'gender' => ['required', 'in:male,female'],
        ];
    }

    /**
     * Get custom messages for validation errors.
     *
     * @return array<string, string>
     */
    public function messages(): array
    {
        return [
            'first_name.required' => 'The first name field is required.',
            'first_name.max' => 'The first name may not be greater than 255 characters.',
            'birth_date.required' => 'The birth date field is required.',
            'birth_date.date' => 'The birth date must be a valid date.',
            'birth_date.before' => 'The birth date must be before today.',
            'gender.required' => 'The gender field is required.',
            'gender.in' => 'The selected gender is invalid.',
        ];
    }
}



================================================
FILE: app/Http/Requests/GenerateMealPlanRequest.php
================================================
<?php

declare(strict_types=1);

namespace App\Http\Requests;

use App\Models\MealPlan;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Support\Facades\Gate;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Validation\ValidationException;

class GenerateMealPlanRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return Gate::allows('create', MealPlan::class);
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'start_date' => ['required', 'date', 'after_or_equal:today'],
            'regenerate' => ['boolean'],
        ];
    }

    /**
     * Prepare the data for validation.
     */
    protected function prepareForValidation(): void
    {
        $this->merge([
            'regenerate' => $this->boolean('regenerate', false),
        ]);
    }

    /**
     * Configure the validator instance.
     */
    public function withValidator($validator): void
    {
        $validator->after(function ($validator) {
            // Check rate limit - 5 requests per hour per user
            $key = 'generate-meal-plan:'.$this->user()->id;

            if (RateLimiter::tooManyAttempts($key, 5)) {
                $seconds = RateLimiter::availableIn($key);
                throw ValidationException::withMessages([
                    'rate_limit' => "Too many meal plan generation attempts. Try again in {$seconds} seconds.",
                ]);
            }

            // Check for unique start_date constraint
            $existingPlan = MealPlan::where('user_id', $this->user()->id)
                ->where('start_date', $this->input('start_date'))
                ->exists();

            if ($existingPlan) {
                $validator->errors()->add('start_date', 'You already have a meal plan for this start date.');
            }
        });
    }

    /**
     * Handle a passed validation attempt.
     */
    protected function passedValidation(): void
    {
        // Hit the rate limiter
        $key = 'generate-meal-plan:'.$this->user()->id;
        RateLimiter::hit($key, 3600); // 1 hour
    }

    /**
     * Get validated data with user ID injected.
     *
     * @return array<string, mixed>
     */
    public function validated($key = null, $default = null): array
    {
        $validated = parent::validated($key, $default);
        $validated['user_id'] = $this->user()->id;

        return $validated;
    }
}



================================================
FILE: app/Http/Requests/ProfileUpdateRequest.php
================================================
<?php

namespace App\Http\Requests;

use App\Models\User;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class ProfileUpdateRequest extends FormRequest
{
    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'name' => ['required', 'string', 'max:255'],
            'email' => [
                'required',
                'string',
                'lowercase',
                'email',
                'max:255',
                Rule::unique(User::class)->ignore($this->user()->id),
            ],
        ];
    }
}



================================================
FILE: app/Http/Requests/RegenerateMealPlanRequest.php
================================================
<?php

declare(strict_types=1);

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Support\Facades\Gate;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Validation\ValidationException;

class RegenerateMealPlanRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        $mealPlan = $this->route('meal_plan');

        return Gate::allows('update', $mealPlan);
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'regenerate' => ['required', 'accepted'],
            'force' => ['boolean', 'nullable'],
        ];
    }

    /**
     * Prepare the data for validation.
     */
    protected function prepareForValidation(): void
    {
        $this->merge([
            'force' => $this->boolean('force', false),
        ]);
    }

    /**
     * Configure the validator instance.
     */
    public function withValidator($validator): void
    {
        $validator->after(function ($validator) {
            $mealPlan = $this->route('meal_plan');

            // Check if meal plan is currently processing
            if ($mealPlan->status === 'processing') {
                $validator->errors()->add('status', 'Cannot regenerate meal plan while it is being processed.');

                return;
            }

            // Only allow regeneration if status is 'done' or 'error'
            if (! in_array($mealPlan->status, ['done', 'error'])) {
                $validator->errors()->add('status', 'Can only regenerate completed or failed meal plans.');

                return;
            }

            // Check rate limit unless force flag is set
            if (! $this->input('force')) {
                $key = 'regenerate-meal-plan:'.$this->user()->id;

                if (RateLimiter::tooManyAttempts($key, 5)) {
                    $seconds = RateLimiter::availableIn($key);
                    throw ValidationException::withMessages([
                        'rate_limit' => "Too many regeneration attempts. Try again in {$seconds} seconds or use force flag.",
                    ]);
                }
            }
        });
    }

    /**
     * Handle a passed validation attempt.
     */
    protected function passedValidation(): void
    {
        // Hit the rate limiter unless force flag is set
        if (! $this->input('force')) {
            $key = 'regenerate-meal-plan:'.$this->user()->id;
            RateLimiter::hit($key, 3600); // 1 hour
        }
    }

    /**
     * Get validated data with user ID injected.
     *
     * @return array<string, mixed>
     */
    public function validated($key = null, $default = null): array
    {
        $validated = parent::validated($key, $default);
        $validated['user_id'] = $this->user()->id;

        return $validated;
    }
}



================================================
FILE: app/Http/Requests/StoreRecipeRequest.php
================================================
<?php

declare(strict_types=1);

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;

class StoreRecipeRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true; // Authorization handled in controller via policy
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'name' => 'required|string|max:255',
            'category' => 'required|in:breakfast,supper,dinner',
            'instructions' => 'required|string',
            'calories' => 'required|numeric|min:0',
            'servings' => 'required|integer|min:1',
            'ingredients' => 'sometimes|array',
            'ingredients.*.ingredient_id' => 'required|exists:ingredients,id',
            'ingredients.*.quantity' => 'required|numeric|min:0.01',
            'ingredients.*.unit_id' => 'required|exists:units,id',
        ];
    }

    /**
     * Get custom validation messages.
     *
     * @return array<string, string>
     */
    public function messages(): array
    {
        return [
            'name.required' => 'Recipe name is required.',
            'name.max' => 'Recipe name cannot exceed 255 characters.',
            'category.required' => 'Recipe category is required.',
            'category.in' => 'Recipe category must be breakfast, supper, or dinner.',
            'instructions.required' => 'Recipe instructions are required.',
            'calories.required' => 'Calories field is required.',
            'calories.numeric' => 'Calories must be a number.',
            'calories.min' => 'Calories cannot be negative.',
            'servings.required' => 'Servings field is required.',
            'servings.integer' => 'Servings must be a whole number.',
            'servings.min' => 'Servings must be at least 1.',
            'ingredients.array' => 'Ingredients must be an array.',
            'ingredients.*.ingredient_id.required' => 'Each ingredient must have an ingredient ID.',
            'ingredients.*.ingredient_id.exists' => 'The selected ingredient does not exist.',
            'ingredients.*.quantity.required' => 'Each ingredient must have a quantity.',
            'ingredients.*.quantity.numeric' => 'Ingredient quantity must be a number.',
            'ingredients.*.quantity.min' => 'Ingredient quantity must be at least 0.01.',
            'ingredients.*.unit_id.required' => 'Each ingredient must have a unit.',
            'ingredients.*.unit_id.exists' => 'The selected unit does not exist.',
        ];
    }

    /**
     * Prepare the data for validation.
     */
    protected function prepareForValidation(): void
    {
        // Ensure ingredients array doesn't contain duplicates
        if ($this->has('ingredients') && is_array($this->ingredients)) {
            $uniqueIngredients = collect($this->ingredients)
                ->unique('ingredient_id')
                ->values()
                ->all();

            $this->merge(['ingredients' => $uniqueIngredients]);
        }
    }

    /**
     * Configure the validator instance.
     */
    public function withValidator($validator): void
    {
        $validator->after(function ($validator) {
            // Check for duplicate ingredients
            if ($this->has('ingredients') && is_array($this->ingredients)) {
                $ingredientIds = collect($this->ingredients)->pluck('ingredient_id');
                $duplicates = $ingredientIds->duplicates();

                if ($duplicates->isNotEmpty()) {
                    $validator->errors()->add('ingredients', 'Duplicate ingredients are not allowed.');
                }
            }
        });
    }
}



================================================
FILE: app/Http/Requests/UpdateRecipeRequest.php
================================================
<?php

declare(strict_types=1);

namespace App\Http\Requests;

use Illuminate\Foundation\Http\FormRequest;

class UpdateRecipeRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true; // Authorization handled in controller via policy
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        // Same rules as StoreRecipeRequest but all fields optional for PATCH
        return [
            'name' => 'sometimes|required|string|max:255',
            'category' => 'sometimes|required|in:breakfast,supper,dinner',
            'instructions' => 'sometimes|required|string',
            'calories' => 'sometimes|required|numeric|min:0',
            'servings' => 'sometimes|required|integer|min:1',
            'ingredients' => 'sometimes|array',
            'ingredients.*.ingredient_id' => 'required|exists:ingredients,id',
            'ingredients.*.quantity' => 'required|numeric|min:0.01',
            'ingredients.*.unit_id' => 'required|exists:units,id',
        ];
    }

    /**
     * Get custom validation messages.
     *
     * @return array<string, string>
     */
    public function messages(): array
    {
        return [
            'name.required' => 'Recipe name is required.',
            'name.max' => 'Recipe name cannot exceed 255 characters.',
            'category.required' => 'Recipe category is required.',
            'category.in' => 'Recipe category must be breakfast, supper, or dinner.',
            'instructions.required' => 'Recipe instructions are required.',
            'calories.required' => 'Calories field is required.',
            'calories.numeric' => 'Calories must be a number.',
            'calories.min' => 'Calories cannot be negative.',
            'servings.required' => 'Servings field is required.',
            'servings.integer' => 'Servings must be a whole number.',
            'servings.min' => 'Servings must be at least 1.',
            'ingredients.array' => 'Ingredients must be an array.',
            'ingredients.*.ingredient_id.required' => 'Each ingredient must have an ingredient ID.',
            'ingredients.*.ingredient_id.exists' => 'The selected ingredient does not exist.',
            'ingredients.*.quantity.required' => 'Each ingredient must have a quantity.',
            'ingredients.*.quantity.numeric' => 'Ingredient quantity must be a number.',
            'ingredients.*.quantity.min' => 'Ingredient quantity must be at least 0.01.',
            'ingredients.*.unit_id.required' => 'Each ingredient must have a unit.',
            'ingredients.*.unit_id.exists' => 'The selected unit does not exist.',
        ];
    }

    /**
     * Prepare the data for validation.
     */
    protected function prepareForValidation(): void
    {
        // Ensure ingredients array doesn't contain duplicates
        if ($this->has('ingredients') && is_array($this->ingredients)) {
            $uniqueIngredients = collect($this->ingredients)
                ->unique('ingredient_id')
                ->values()
                ->all();

            $this->merge(['ingredients' => $uniqueIngredients]);
        }
    }

    /**
     * Configure the validator instance.
     */
    public function withValidator($validator): void
    {
        $validator->after(function ($validator) {
            // Check for duplicate ingredients
            if ($this->has('ingredients') && is_array($this->ingredients)) {
                $ingredientIds = collect($this->ingredients)->pluck('ingredient_id');
                $duplicates = $ingredientIds->duplicates();

                if ($duplicates->isNotEmpty()) {
                    $validator->errors()->add('ingredients', 'Duplicate ingredients are not allowed.');
                }
            }
        });
    }
}



================================================
FILE: app/Http/Requests/Auth/LoginRequest.php
================================================
<?php

namespace App\Http\Requests\Auth;

use Illuminate\Auth\Events\Lockout;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\Str;
use Illuminate\Validation\ValidationException;

class LoginRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\ValidationRule|array<mixed>|string>
     */
    public function rules(): array
    {
        return [
            'email' => ['required', 'string', 'email'],
            'password' => ['required', 'string'],
        ];
    }

    /**
     * Attempt to authenticate the request's credentials.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function authenticate(): void
    {
        $this->ensureIsNotRateLimited();

        if (! Auth::attempt($this->only('email', 'password'), $this->boolean('remember'))) {
            RateLimiter::hit($this->throttleKey());

            throw ValidationException::withMessages([
                'email' => trans('auth.failed'),
            ]);
        }

        RateLimiter::clear($this->throttleKey());
    }

    /**
     * Ensure the login request is not rate limited.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function ensureIsNotRateLimited(): void
    {
        if (! RateLimiter::tooManyAttempts($this->throttleKey(), 5)) {
            return;
        }

        event(new Lockout($this));

        $seconds = RateLimiter::availableIn($this->throttleKey());

        throw ValidationException::withMessages([
            'email' => trans('auth.throttle', [
                'seconds' => $seconds,
                'minutes' => ceil($seconds / 60),
            ]),
        ]);
    }

    /**
     * Get the rate limiting throttle key for the request.
     */
    public function throttleKey(): string
    {
        return Str::transliterate(Str::lower($this->string('email')).'|'.$this->ip());
    }
}



================================================
FILE: app/Http/Resources/MealPlanCollection.php
================================================
<?php

declare(strict_types=1);

namespace App\Http\Resources;

use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\ResourceCollection;

class MealPlanCollection extends ResourceCollection
{
    /**
     * The resource that this resource collects.
     *
     * @var string
     */
    public $collects = MealPlanResource::class;

    /**
     * Transform the resource collection into an array.
     *
     * @return array<string, mixed>
     */
    public function toArray(Request $request): array
    {
        return [
            'data' => $this->collection->map(function ($mealPlan) {
                return [
                    'id' => $mealPlan->id,
                    'start_date' => $mealPlan->start_date->format('Y-m-d'),
                    'end_date' => $mealPlan->end_date->format('Y-m-d'),
                    'status' => $mealPlan->status,
                    'created_at' => $mealPlan->created_at,
                    'updated_at' => $mealPlan->updated_at,

                    // Counts for performance
                    'meals_count' => $mealPlan->meals_count ?? 0,
                    'logs_count' => $mealPlan->logs_count ?? 0,

                    // Links
                    'links' => [
                        'self' => route('meal-plans.show', $mealPlan->id),
                    ],
                ];
            }),

            'meta' => [
                'current_page' => $this->currentPage(),
                'last_page' => $this->lastPage(),
                'per_page' => $this->perPage(),
                'total' => $this->total(),
                'from' => $this->firstItem(),
                'to' => $this->lastItem(),
            ],

            'links' => [
                'first' => $this->url(1),
                'last' => $this->url($this->lastPage()),
                'prev' => $this->previousPageUrl(),
                'next' => $this->nextPageUrl(),
            ],
        ];
    }
}



================================================
FILE: app/Http/Resources/MealPlanResource.php
================================================
<?php

declare(strict_types=1);

namespace App\Http\Resources;

use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\JsonResource;

class MealPlanResource extends JsonResource
{
    /**
     * Transform the resource into an array.
     *
     * @return array<string, mixed>
     */
    public function toArray(Request $request): array
    {
        return [
            'id' => $this->id,
            'user_id' => $this->user_id,
            'start_date' => $this->start_date->format('Y-m-d'),
            'end_date' => $this->end_date->format('Y-m-d'),
            'status' => $this->status,
            'generation_meta' => $this->generation_meta,
            'pdf_path' => $this->pdf_path,
            'pdf_size' => $this->pdf_size,
            'created_at' => $this->created_at,
            'updated_at' => $this->updated_at,

            // Relationships
            'meals' => $this->whenLoaded('meals', function () {
                return $this->meals->sortBy('meal_date')->map(function ($meal) {
                    return [
                        'id' => $meal->id,
                        'meal_date' => $meal->meal_date->format('Y-m-d'),
                        'meal_category' => $meal->meal_category,
                        'recipe' => $this->when($meal->relationLoaded('recipe'), function () use ($meal) {
                            return [
                                'id' => $meal->recipe->id,
                                'name' => $meal->recipe->name,
                                'category' => $meal->recipe->category,
                                'calories' => $meal->recipe->calories,
                                'servings' => $meal->recipe->servings,
                                'ingredients' => $this->when($meal->recipe->relationLoaded('recipeIngredients'), function () use ($meal) {
                                    return $meal->recipe->recipeIngredients->map(function ($recipeIngredient) {
                                        return [
                                            'id' => $recipeIngredient->ingredient->id ?? null,
                                            'name' => $recipeIngredient->ingredient->name ?? 'Unknown ingredient',
                                            'quantity' => $recipeIngredient->quantity ?? 0,
                                            'unit' => [
                                                'id' => $recipeIngredient->unit->id ?? null,
                                                'code' => $recipeIngredient->unit->code ?? 'pcs',
                                            ],
                                        ];
                                    });
                                }, []),
                            ];
                        }),
                    ];
                });
            }, []),

            'logs' => $this->whenLoaded('logs', function () {
                return $this->logs->sortByDesc('created_at')->map(function ($log) {
                    return [
                        'id' => $log->id,
                        'started_at' => $log->started_at,
                        'finished_at' => $log->finished_at,
                        'status' => $log->status,
                        'created_at' => $log->created_at,
                    ];
                });
            }, []),

            // Helper attributes
            'meals_count' => $this->whenCounted('meals'),
            'logs_count' => $this->whenCounted('logs'),

            // Links
            'links' => [
                'self' => route('meal-plans.show', $this->id),
            ],
        ];
    }
}



================================================
FILE: app/Http/Resources/RecipeIngredientResource.php
================================================
<?php

declare(strict_types=1);

namespace App\Http\Resources;

use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\JsonResource;

class RecipeIngredientResource extends JsonResource
{
    /**
     * Transform the resource into an array.
     *
     * @return array<string, mixed>
     */
    public function toArray(Request $request): array
    {
        return [
            'ingredient_id' => $this->ingredient_id,
            'ingredient_name' => $this->ingredient->name,
            'quantity' => $this->quantity,
            'unit_id' => $this->unit_id,
            'unit_code' => $this->unit->code,
        ];
    }
}



================================================
FILE: app/Http/Resources/RecipeResource.php
================================================
<?php

declare(strict_types=1);

namespace App\Http\Resources;

use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\JsonResource;

class RecipeResource extends JsonResource
{
    /**
     * Transform the resource into an array.
     *
     * @return array<string, mixed>
     */
    public function toArray(Request $request): array
    {
        return [
            'id' => $this->id,
            'name' => $this->name,
            'category' => $this->category,
            'instructions' => $this->instructions,
            'calories' => $this->calories,
            'servings' => $this->servings,
            'created_at' => $this->created_at,
            'updated_at' => $this->updated_at,
            'ingredients' => $this->whenLoaded('recipeIngredients', function () {
                return $this->recipeIngredients->map(function ($recipeIngredient) {
                    return [
                        'id' => $recipeIngredient->ingredient->id ?? null,
                        'name' => $recipeIngredient->ingredient->name ?? 'Unknown ingredient',
                        'quantity' => $recipeIngredient->quantity ?? 0,
                        'unit' => [
                            'id' => $recipeIngredient->unit->id ?? null,
                            'code' => $recipeIngredient->unit->code ?? 'pcs',
                        ],
                    ];
                });
            }, []),
        ];
    }
}



================================================
FILE: app/Jobs/GenerateMealPlanJob.php
================================================
<?php

declare(strict_types=1);

namespace App\Jobs;

use App\Models\LogsMealPlan;
use App\Models\MealPlan;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;
use Illuminate\Support\Facades\Log;

class GenerateMealPlanJob implements ShouldQueue
{
    use Dispatchable;
    use InteractsWithQueue;
    use Queueable;
    use SerializesModels;

    /**
     * Create a new job instance.
     */
    public function __construct(
        public MealPlan $mealPlan,
        public bool $regenerate = false
    ) {
        //
    }

    /**
     * Execute the job.
     */
    public function handle(): void
    {
        $log = $this->createLog();

        try {
            // Update status to processing
            $this->mealPlan->update(['status' => 'processing']);

            // TODO: Implement actual meal plan generation logic
            // This is a placeholder implementation that should be replaced with:
            // - MealPlanGeneratorService implementation
            // - Recipe selection logic
            // - Meal creation
            // - PDF generation

            Log::info('Meal plan generation started', [
                'meal_plan_id' => $this->mealPlan->id,
                'regenerate' => $this->regenerate,
            ]);

            // Simulate processing time (remove in production)
            sleep(2);

            // For now, just update status to done
            $this->mealPlan->update([
                'status' => 'done',
                'generation_meta' => [
                    'generated_at' => now(),
                    'regenerate' => $this->regenerate,
                    'version' => 'placeholder',
                ],
            ]);

            $this->finishLog($log, 'done');

            Log::info('Meal plan generation completed', [
                'meal_plan_id' => $this->mealPlan->id,
            ]);
        } catch (\Exception $e) {
            // Update status to error
            $this->mealPlan->update([
                'status' => 'error',
                'generation_meta' => [
                    'error_at' => now(),
                    'error_message' => $e->getMessage(),
                    'regenerate' => $this->regenerate,
                ],
            ]);

            $this->finishLog($log, 'error');

            Log::error('Meal plan generation failed', [
                'meal_plan_id' => $this->mealPlan->id,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
            ]);

            // Re-throw to mark job as failed
            throw $e;
        }
    }

    /**
     * Create a log entry for this generation attempt.
     */
    private function createLog(): LogsMealPlan
    {
        return LogsMealPlan::create([
            'meal_plan_id' => $this->mealPlan->id,
            'started_at' => now(),
            'status' => 'processing',
        ]);
    }

    /**
     * Finish the log entry.
     */
    private function finishLog(LogsMealPlan $log, string $status): void
    {
        $log->update([
            'finished_at' => now(),
            'status' => $status,
        ]);
    }

    /**
     * Handle a job failure.
     */
    public function failed(\Throwable $exception): void
    {
        Log::error('GenerateMealPlanJob failed permanently', [
            'meal_plan_id' => $this->mealPlan->id,
            'exception' => $exception->getMessage(),
        ]);

        // Update meal plan status to error if not already done
        if ($this->mealPlan->fresh()->status === 'processing') {
            $this->mealPlan->update([
                'status' => 'error',
                'generation_meta' => [
                    'failed_at' => now(),
                    'error_message' => $exception->getMessage(),
                ],
            ]);
        }
    }
}



================================================
FILE: app/Models/FamilyMember.php
================================================
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class FamilyMember extends Model
{
    use HasFactory;

    protected $fillable = [
        'user_id',
        'first_name',
        'birth_date',
        'gender',
    ];

    protected $casts = [
        'birth_date' => 'date',
    ];

    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }
}



================================================
FILE: app/Models/Ingredient.php
================================================
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasMany;

class Ingredient extends Model
{
    protected $fillable = [
        'name',
    ];

    public function recipes(): BelongsToMany
    {
        return $this->belongsToMany(Recipe::class, 'recipe_ingredients')
            ->using(RecipeIngredient::class)
            ->withPivot(['quantity', 'unit_id'])
            ->withTimestamps();
    }

    public function recipeIngredients(): HasMany
    {
        return $this->hasMany(RecipeIngredient::class);
    }
}



================================================
FILE: app/Models/LogsMealPlan.php
================================================
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class LogsMealPlan extends Model
{
    protected $table = 'logs_meal_plan';

    public $timestamps = false;

    protected $fillable = [
        'meal_plan_id',
        'started_at',
        'finished_at',
        'status',
    ];

    protected $casts = [
        'started_at' => 'datetime',
        'finished_at' => 'datetime',
        'created_at' => 'timestamp',
    ];

    public function mealPlan(): BelongsTo
    {
        return $this->belongsTo(MealPlan::class);
    }
}



================================================
FILE: app/Models/Meal.php
================================================
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class Meal extends Model
{
    protected $fillable = [
        'meal_plan_id',
        'recipe_id',
        'meal_date',
        'meal_category',
    ];

    protected $casts = [
        'meal_date' => 'date',
    ];

    public function mealPlan(): BelongsTo
    {
        return $this->belongsTo(MealPlan::class);
    }

    public function recipe(): BelongsTo
    {
        return $this->belongsTo(Recipe::class);
    }
}



================================================
FILE: app/Models/MealPlan.php
================================================
<?php

declare(strict_types=1);

namespace App\Models;

use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;

class MealPlan extends Model
{
    use HasFactory;

    protected $fillable = [
        'user_id',
        'start_date',
        'end_date',
        'status',
        'generation_meta',
        'pdf_path',
        'pdf_size',
    ];

    protected $casts = [
        'start_date' => 'date',
        'end_date' => 'date',
        'generation_meta' => 'array',
        'pdf_size' => 'integer',
    ];

    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    public function meals(): HasMany
    {
        return $this->hasMany(Meal::class);
    }

    public function logs(): HasMany
    {
        return $this->hasMany(LogsMealPlan::class);
    }

    /**
     * Scope query to only include meal plans owned by the given user.
     */
    public function scopeOwnedBy(Builder $query, User $user): Builder
    {
        return $query->where('user_id', $user->id);
    }
}



================================================
FILE: app/Models/Recipe.php
================================================
<?php

declare(strict_types=1);

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\SoftDeletes;

class Recipe extends Model
{
    use HasFactory;
    use SoftDeletes;

    protected $fillable = [
        'user_id',
        'name',
        'category',
        'instructions',
        'calories',
        'servings',
    ];

    protected $casts = [
        'calories' => 'decimal:2',
        'servings' => 'integer',
    ];

    /**
     * Default relationships to eager load.
     *
     * @var array<int, string>
     */
    protected $with = [];

    /**
     * Scope for filtering by user.
     */
    public function scopeForUser($query, int $userId)
    {
        return $query->where('user_id', $userId);
    }

    /**
     * Scope for filtering by category.
     */
    public function scopeByCategory($query, string $category)
    {
        return $query->where('category', $category);
    }

    /**
     * Scope for searching by name and instructions.
     */
    public function scopeSearch($query, string $search)
    {
        return $query->where(function ($q) use ($search) {
            $q->where('name', 'like', "%{$search}%")
                ->orWhere('instructions', 'like', "%{$search}%");
        });
    }

    /**
     * Scope for ordering by common fields.
     */
    public function scopeOrderByField($query, string $field, string $direction = 'desc')
    {
        $allowedFields = ['name', 'created_at', 'calories', 'category'];

        if (in_array($field, $allowedFields)) {
            return $query->orderBy($field, $direction);
        }

        return $query->orderBy('created_at', 'desc');
    }

    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    public function ingredients(): BelongsToMany
    {
        return $this->belongsToMany(Ingredient::class, 'recipe_ingredients')
            ->using(RecipeIngredient::class)
            ->withPivot(['quantity', 'unit_id'])
            ->withTimestamps();
    }

    public function recipeIngredients(): HasMany
    {
        return $this->hasMany(RecipeIngredient::class);
    }

    public function meals(): HasMany
    {
        return $this->hasMany(Meal::class);
    }
}



================================================
FILE: app/Models/RecipeIngredient.php
================================================
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\Pivot;

class RecipeIngredient extends Pivot
{
    protected $table = 'recipe_ingredients';

    protected $fillable = [
        'recipe_id',
        'ingredient_id',
        'quantity',
        'unit_id',
    ];

    protected $casts = [
        'quantity' => 'decimal:2',
    ];

    public function recipe(): BelongsTo
    {
        return $this->belongsTo(Recipe::class);
    }

    public function ingredient(): BelongsTo
    {
        return $this->belongsTo(Ingredient::class);
    }

    public function unit(): BelongsTo
    {
        return $this->belongsTo(Unit::class);
    }
}



================================================
FILE: app/Models/Unit.php
================================================
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\HasMany;

class Unit extends Model
{
    protected $fillable = [
        'code',
        'conversion_factor_to_base',
    ];

    protected $casts = [
        'conversion_factor_to_base' => 'decimal:4',
    ];

    public function recipeIngredients(): HasMany
    {
        return $this->hasMany(RecipeIngredient::class);
    }
}



================================================
FILE: app/Models/User.php
================================================
<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;

class User extends Authenticatable
{
    /** @use HasFactory<\Database\Factories\UserFactory> */
    use HasFactory;

    use Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var list<string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var list<string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
        ];
    }

    public function familyMembers(): HasMany
    {
        return $this->hasMany(FamilyMember::class);
    }

    public function recipes(): HasMany
    {
        return $this->hasMany(Recipe::class);
    }

    public function mealPlans(): HasMany
    {
        return $this->hasMany(MealPlan::class);
    }
}



================================================
FILE: app/Policies/FamilyMemberPolicy.php
================================================
<?php

declare(strict_types=1);

namespace App\Policies;

use App\Models\FamilyMember;
use App\Models\User;

class FamilyMemberPolicy
{
    /**
     * Determine whether the user can view any models.
     * Users can only view their own family members.
     */
    public function viewAny(User $user): bool
    {
        return true; // Filtering by user_id is handled in the controller
    }

    /**
     * Determine whether the user can view the model.
     */
    public function view(User $user, FamilyMember $familyMember): bool
    {
        return $user->id === $familyMember->user_id;
    }

    /**
     * Determine whether the user can create models.
     * Any authenticated user can create family members.
     */
    public function create(User $user): bool
    {
        return true;
    }

    /**
     * Determine whether the user can update the model.
     * Users can only update their own family members.
     */
    public function update(User $user, FamilyMember $familyMember): bool
    {
        return $user->id === $familyMember->user_id;
    }

    /**
     * Determine whether the user can delete the model.
     * Users can only delete their own family members.
     */
    public function delete(User $user, FamilyMember $familyMember): bool
    {
        return $user->id === $familyMember->user_id;
    }
}



================================================
FILE: app/Policies/MealPlanPolicy.php
================================================
<?php

declare(strict_types=1);

namespace App\Policies;

use App\Models\MealPlan;
use App\Models\User;

class MealPlanPolicy
{
    /**
     * Determine whether the user can view any meal plans.
     */
    public function viewAny(User $user): bool
    {
        return true; // User can view their own meal plans
    }

    /**
     * Determine whether the user can view the meal plan.
     */
    public function view(User $user, MealPlan $mealPlan): bool
    {
        return $user->id === $mealPlan->user_id;
    }

    /**
     * Determine whether the user can create meal plans.
     */
    public function create(User $user): bool
    {
        return true; // Any authenticated user can create meal plans
    }

    /**
     * Determine whether the user can update the meal plan.
     */
    public function update(User $user, MealPlan $mealPlan): bool
    {
        // User must own the meal plan (status check happens in controller/request)
        return $user->id === $mealPlan->user_id;
    }

    /**
     * Determine whether the user can delete the meal plan.
     */
    public function delete(User $user, MealPlan $mealPlan): bool
    {
        // User must own the meal plan and it cannot be currently processing
        return $user->id === $mealPlan->user_id && $mealPlan->status !== 'processing';
    }

    /**
     * Determine whether the user can restore the meal plan.
     */
    public function restore(User $user, MealPlan $mealPlan): bool
    {
        return $user->id === $mealPlan->user_id;
    }

    /**
     * Determine whether the user can permanently delete the meal plan.
     */
    public function forceDelete(User $user, MealPlan $mealPlan): bool
    {
        return $user->id === $mealPlan->user_id && $mealPlan->status !== 'processing';
    }
}



================================================
FILE: app/Policies/RecipePolicy.php
================================================
<?php

declare(strict_types=1);

namespace App\Policies;

use App\Models\Recipe;
use App\Models\User;

class RecipePolicy
{
    /**
     * Determine whether the user can view any models.
     */
    public function viewAny(User $user): bool
    {
        return true; // User can view their own recipes
    }

    /**
     * Determine whether the user can view the model.
     */
    public function view(User $user, Recipe $recipe): bool
    {
        return $user->id === $recipe->user_id;
    }

    /**
     * Determine whether the user can create models.
     */
    public function create(User $user): bool
    {
        return true; // Any authenticated user can create recipes
    }

    /**
     * Determine whether the user can update the model.
     */
    public function update(User $user, Recipe $recipe): bool
    {
        return $user->id === $recipe->user_id;
    }

    /**
     * Determine whether the user can delete the model.
     */
    public function delete(User $user, Recipe $recipe): bool
    {
        return $user->id === $recipe->user_id;
    }

    /**
     * Determine whether the user can restore the model.
     */
    public function restore(User $user, Recipe $recipe): bool
    {
        return $user->id === $recipe->user_id;
    }

    /**
     * Determine whether the user can permanently delete the model.
     */
    public function forceDelete(User $user, Recipe $recipe): bool
    {
        return $user->id === $recipe->user_id;
    }
}



================================================
FILE: app/Providers/AppServiceProvider.php
================================================
<?php

namespace App\Providers;

use Illuminate\Support\Facades\Vite;
use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        //
    }

    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        Vite::prefetch(concurrency: 3);
    }
}



================================================
FILE: bootstrap/app.php
================================================
<?php

use Illuminate\Foundation\Application;
use Illuminate\Foundation\Configuration\Exceptions;
use Illuminate\Foundation\Configuration\Middleware;

return Application::configure(basePath: dirname(__DIR__))
    ->withRouting(
        web: __DIR__.'/../routes/web.php',
        commands: __DIR__.'/../routes/console.php',
        health: '/up',
    )
    ->withMiddleware(function (Middleware $middleware): void {
        $middleware->web(append: [
            \App\Http\Middleware\HandleInertiaRequests::class,
            \Illuminate\Http\Middleware\AddLinkHeadersForPreloadedAssets::class,
        ]);

        //
    })
    ->withExceptions(function (Exceptions $exceptions): void {
        //
    })->create();



================================================
FILE: bootstrap/providers.php
================================================
<?php

return [
    App\Providers\AppServiceProvider::class,
];



================================================
FILE: config/app.php
================================================
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Application Name
    |--------------------------------------------------------------------------
    |
    | This value is the name of your application, which will be used when the
    | framework needs to place the application's name in a notification or
    | other UI elements where an application name needs to be displayed.
    |
    */

    'name' => env('APP_NAME', 'Laravel'),

    /*
    |--------------------------------------------------------------------------
    | Application Environment
    |--------------------------------------------------------------------------
    |
    | This value determines the "environment" your application is currently
    | running in. This may determine how you prefer to configure various
    | services the application utilizes. Set this in your ".env" file.
    |
    */

    'env' => env('APP_ENV', 'production'),

    /*
    |--------------------------------------------------------------------------
    | Application Debug Mode
    |--------------------------------------------------------------------------
    |
    | When your application is in debug mode, detailed error messages with
    | stack traces will be shown on every error that occurs within your
    | application. If disabled, a simple generic error page is shown.
    |
    */

    'debug' => (bool) env('APP_DEBUG', false),

    /*
    |--------------------------------------------------------------------------
    | Application URL
    |--------------------------------------------------------------------------
    |
    | This URL is used by the console to properly generate URLs when using
    | the Artisan command line tool. You should set this to the root of
    | the application so that it's available within Artisan commands.
    |
    */

    'url' => env('APP_URL', 'http://localhost'),

    /*
    |--------------------------------------------------------------------------
    | Application Timezone
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default timezone for your application, which
    | will be used by the PHP date and date-time functions. The timezone
    | is set to "UTC" by default as it is suitable for most use cases.
    |
    */

    'timezone' => 'UTC',

    /*
    |--------------------------------------------------------------------------
    | Application Locale Configuration
    |--------------------------------------------------------------------------
    |
    | The application locale determines the default locale that will be used
    | by Laravel's translation / localization methods. This option can be
    | set to any locale for which you plan to have translation strings.
    |
    */

    'locale' => env('APP_LOCALE', 'en'),

    'fallback_locale' => env('APP_FALLBACK_LOCALE', 'en'),

    'faker_locale' => env('APP_FAKER_LOCALE', 'en_US'),

    /*
    |--------------------------------------------------------------------------
    | Encryption Key
    |--------------------------------------------------------------------------
    |
    | This key is utilized by Laravel's encryption services and should be set
    | to a random, 32 character string to ensure that all encrypted values
    | are secure. You should do this prior to deploying the application.
    |
    */

    'cipher' => 'AES-256-CBC',

    'key' => env('APP_KEY'),

    'previous_keys' => [
        ...array_filter(
            explode(',', (string) env('APP_PREVIOUS_KEYS', ''))
        ),
    ],

    /*
    |--------------------------------------------------------------------------
    | Maintenance Mode Driver
    |--------------------------------------------------------------------------
    |
    | These configuration options determine the driver used to determine and
    | manage Laravel's "maintenance mode" status. The "cache" driver will
    | allow maintenance mode to be controlled across multiple machines.
    |
    | Supported drivers: "file", "cache"
    |
    */

    'maintenance' => [
        'driver' => env('APP_MAINTENANCE_DRIVER', 'file'),
        'store' => env('APP_MAINTENANCE_STORE', 'database'),
    ],

];



================================================
FILE: config/auth.php
================================================
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Authentication Defaults
    |--------------------------------------------------------------------------
    |
    | This option defines the default authentication "guard" and password
    | reset "broker" for your application. You may change these values
    | as required, but they're a perfect start for most applications.
    |
    */

    'defaults' => [
        'guard' => env('AUTH_GUARD', 'web'),
        'passwords' => env('AUTH_PASSWORD_BROKER', 'users'),
    ],

    /*
    |--------------------------------------------------------------------------
    | Authentication Guards
    |--------------------------------------------------------------------------
    |
    | Next, you may define every authentication guard for your application.
    | Of course, a great default configuration has been defined for you
    | which utilizes session storage plus the Eloquent user provider.
    |
    | All authentication guards have a user provider, which defines how the
    | users are actually retrieved out of your database or other storage
    | system used by the application. Typically, Eloquent is utilized.
    |
    | Supported: "session"
    |
    */

    'guards' => [
        'web' => [
            'driver' => 'session',
            'provider' => 'users',
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | User Providers
    |--------------------------------------------------------------------------
    |
    | All authentication guards have a user provider, which defines how the
    | users are actually retrieved out of your database or other storage
    | system used by the application. Typically, Eloquent is utilized.
    |
    | If you have multiple user tables or models you may configure multiple
    | providers to represent the model / table. These providers may then
    | be assigned to any extra authentication guards you have defined.
    |
    | Supported: "database", "eloquent"
    |
    */

    'providers' => [
        'users' => [
            'driver' => 'eloquent',
            'model' => env('AUTH_MODEL', App\Models\User::class),
        ],

        // 'users' => [
        //     'driver' => 'database',
        //     'table' => 'users',
        // ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Resetting Passwords
    |--------------------------------------------------------------------------
    |
    | These configuration options specify the behavior of Laravel's password
    | reset functionality, including the table utilized for token storage
    | and the user provider that is invoked to actually retrieve users.
    |
    | The expiry time is the number of minutes that each reset token will be
    | considered valid. This security feature keeps tokens short-lived so
    | they have less time to be guessed. You may change this as needed.
    |
    | The throttle setting is the number of seconds a user must wait before
    | generating more password reset tokens. This prevents the user from
    | quickly generating a very large amount of password reset tokens.
    |
    */

    'passwords' => [
        'users' => [
            'provider' => 'users',
            'table' => env('AUTH_PASSWORD_RESET_TOKEN_TABLE', 'password_reset_tokens'),
            'expire' => 60,
            'throttle' => 60,
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Password Confirmation Timeout
    |--------------------------------------------------------------------------
    |
    | Here you may define the number of seconds before a password confirmation
    | window expires and users are asked to re-enter their password via the
    | confirmation screen. By default, the timeout lasts for three hours.
    |
    */

    'password_timeout' => env('AUTH_PASSWORD_TIMEOUT', 10800),

];



================================================
FILE: config/cache.php
================================================
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Cache Store
    |--------------------------------------------------------------------------
    |
    | This option controls the default cache store that will be used by the
    | framework. This connection is utilized if another isn't explicitly
    | specified when running a cache operation inside the application.
    |
    */

    'default' => env('CACHE_STORE', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Cache Stores
    |--------------------------------------------------------------------------
    |
    | Here you may define all of the cache "stores" for your application as
    | well as their drivers. You may even define multiple stores for the
    | same cache driver to group types of items stored in your caches.
    |
    | Supported drivers: "array", "database", "file", "memcached",
    |                    "redis", "dynamodb", "octane", "null"
    |
    */

    'stores' => [

        'array' => [
            'driver' => 'array',
            'serialize' => false,
        ],

        'database' => [
            'driver' => 'database',
            'connection' => env('DB_CACHE_CONNECTION'),
            'table' => env('DB_CACHE_TABLE', 'cache'),
            'lock_connection' => env('DB_CACHE_LOCK_CONNECTION'),
            'lock_table' => env('DB_CACHE_LOCK_TABLE'),
        ],

        'file' => [
            'driver' => 'file',
            'path' => storage_path('framework/cache/data'),
            'lock_path' => storage_path('framework/cache/data'),
        ],

        'memcached' => [
            'driver' => 'memcached',
            'persistent_id' => env('MEMCACHED_PERSISTENT_ID'),
            'sasl' => [
                env('MEMCACHED_USERNAME'),
                env('MEMCACHED_PASSWORD'),
            ],
            'options' => [
                // Memcached::OPT_CONNECT_TIMEOUT => 2000,
            ],
            'servers' => [
                [
                    'host' => env('MEMCACHED_HOST', '127.0.0.1'),
                    'port' => env('MEMCACHED_PORT', 11211),
                    'weight' => 100,
                ],
            ],
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => env('REDIS_CACHE_CONNECTION', 'cache'),
            'lock_connection' => env('REDIS_CACHE_LOCK_CONNECTION', 'default'),
        ],

        'dynamodb' => [
            'driver' => 'dynamodb',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'table' => env('DYNAMODB_CACHE_TABLE', 'cache'),
            'endpoint' => env('DYNAMODB_ENDPOINT'),
        ],

        'octane' => [
            'driver' => 'octane',
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Cache Key Prefix
    |--------------------------------------------------------------------------
    |
    | When utilizing the APC, database, memcached, Redis, and DynamoDB cache
    | stores, there might be other applications using the same cache. For
    | that reason, you may prefix every cache key to avoid collisions.
    |
    */

    'prefix' => env('CACHE_PREFIX', Str::slug((string) env('APP_NAME', 'laravel')).'-cache-'),

];



================================================
FILE: config/database.php
================================================
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Database Connection Name
    |--------------------------------------------------------------------------
    |
    | Here you may specify which of the database connections below you wish
    | to use as your default connection for database operations. This is
    | the connection which will be utilized unless another connection
    | is explicitly specified when you execute a query / statement.
    |
    */

    'default' => env('DB_CONNECTION', 'sqlite'),

    /*
    |--------------------------------------------------------------------------
    | Database Connections
    |--------------------------------------------------------------------------
    |
    | Below are all of the database connections defined for your application.
    | An example configuration is provided for each database system which
    | is supported by Laravel. You're free to add / remove connections.
    |
    */

    'connections' => [

        'sqlite' => [
            'driver' => 'sqlite',
            'url' => env('DB_URL'),
            'database' => env('DB_DATABASE', database_path('database.sqlite')),
            'prefix' => '',
            'foreign_key_constraints' => env('DB_FOREIGN_KEYS', true),
            'busy_timeout' => null,
            'journal_mode' => null,
            'synchronous' => null,
        ],

        'mysql' => [
            'driver' => 'mysql',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => env('DB_CHARSET', 'utf8mb4'),
            'collation' => env('DB_COLLATION', 'utf8mb4_unicode_ci'),
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'mariadb' => [
            'driver' => 'mariadb',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => env('DB_CHARSET', 'utf8mb4'),
            'collation' => env('DB_COLLATION', 'utf8mb4_unicode_ci'),
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'pgsql' => [
            'driver' => 'pgsql',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '5432'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => env('DB_CHARSET', 'utf8'),
            'prefix' => '',
            'prefix_indexes' => true,
            'search_path' => 'public',
            'sslmode' => 'prefer',
        ],

        'sqlsrv' => [
            'driver' => 'sqlsrv',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', 'localhost'),
            'port' => env('DB_PORT', '1433'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => env('DB_CHARSET', 'utf8'),
            'prefix' => '',
            'prefix_indexes' => true,
            // 'encrypt' => env('DB_ENCRYPT', 'yes'),
            // 'trust_server_certificate' => env('DB_TRUST_SERVER_CERTIFICATE', 'false'),
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Migration Repository Table
    |--------------------------------------------------------------------------
    |
    | This table keeps track of all the migrations that have already run for
    | your application. Using this information, we can determine which of
    | the migrations on disk haven't actually been run on the database.
    |
    */

    'migrations' => [
        'table' => 'migrations',
        'update_date_on_publish' => true,
    ],

    /*
    |--------------------------------------------------------------------------
    | Redis Databases
    |--------------------------------------------------------------------------
    |
    | Redis is an open source, fast, and advanced key-value store that also
    | provides a richer body of commands than a typical key-value system
    | such as Memcached. You may define your connection settings here.
    |
    */

    'redis' => [

        'client' => env('REDIS_CLIENT', 'phpredis'),

        'options' => [
            'cluster' => env('REDIS_CLUSTER', 'redis'),
            'prefix' => env('REDIS_PREFIX', Str::slug((string) env('APP_NAME', 'laravel')).'-database-'),
            'persistent' => env('REDIS_PERSISTENT', false),
        ],

        'default' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_DB', '0'),
        ],

        'cache' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_CACHE_DB', '1'),
        ],

    ],

];



================================================
FILE: config/filesystems.php
================================================
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Filesystem Disk
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default filesystem disk that should be used
    | by the framework. The "local" disk, as well as a variety of cloud
    | based disks are available to your application for file storage.
    |
    */

    'default' => env('FILESYSTEM_DISK', 'local'),

    /*
    |--------------------------------------------------------------------------
    | Filesystem Disks
    |--------------------------------------------------------------------------
    |
    | Below you may configure as many filesystem disks as necessary, and you
    | may even configure multiple disks for the same driver. Examples for
    | most supported storage drivers are configured here for reference.
    |
    | Supported drivers: "local", "ftp", "sftp", "s3"
    |
    */

    'disks' => [

        'local' => [
            'driver' => 'local',
            'root' => storage_path('app/private'),
            'serve' => true,
            'throw' => false,
            'report' => false,
        ],

        'public' => [
            'driver' => 'local',
            'root' => storage_path('app/public'),
            'url' => env('APP_URL').'/storage',
            'visibility' => 'public',
            'throw' => false,
            'report' => false,
        ],

        's3' => [
            'driver' => 's3',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION'),
            'bucket' => env('AWS_BUCKET'),
            'url' => env('AWS_URL'),
            'endpoint' => env('AWS_ENDPOINT'),
            'use_path_style_endpoint' => env('AWS_USE_PATH_STYLE_ENDPOINT', false),
            'throw' => false,
            'report' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Symbolic Links
    |--------------------------------------------------------------------------
    |
    | Here you may configure the symbolic links that will be created when the
    | `storage:link` Artisan command is executed. The array keys should be
    | the locations of the links and the values should be their targets.
    |
    */

    'links' => [
        public_path('storage') => storage_path('app/public'),
    ],

];



================================================
FILE: config/logging.php
================================================
<?php

use Monolog\Handler\NullHandler;
use Monolog\Handler\StreamHandler;
use Monolog\Handler\SyslogUdpHandler;
use Monolog\Processor\PsrLogMessageProcessor;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Log Channel
    |--------------------------------------------------------------------------
    |
    | This option defines the default log channel that is utilized to write
    | messages to your logs. The value provided here should match one of
    | the channels present in the list of "channels" configured below.
    |
    */

    'default' => env('LOG_CHANNEL', 'stack'),

    /*
    |--------------------------------------------------------------------------
    | Deprecations Log Channel
    |--------------------------------------------------------------------------
    |
    | This option controls the log channel that should be used to log warnings
    | regarding deprecated PHP and library features. This allows you to get
    | your application ready for upcoming major versions of dependencies.
    |
    */

    'deprecations' => [
        'channel' => env('LOG_DEPRECATIONS_CHANNEL', 'null'),
        'trace' => env('LOG_DEPRECATIONS_TRACE', false),
    ],

    /*
    |--------------------------------------------------------------------------
    | Log Channels
    |--------------------------------------------------------------------------
    |
    | Here you may configure the log channels for your application. Laravel
    | utilizes the Monolog PHP logging library, which includes a variety
    | of powerful log handlers and formatters that you're free to use.
    |
    | Available drivers: "single", "daily", "slack", "syslog",
    |                    "errorlog", "monolog", "custom", "stack"
    |
    */

    'channels' => [

        'stack' => [
            'driver' => 'stack',
            'channels' => explode(',', (string) env('LOG_STACK', 'single')),
            'ignore_exceptions' => false,
        ],

        'single' => [
            'driver' => 'single',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'replace_placeholders' => true,
        ],

        'daily' => [
            'driver' => 'daily',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'days' => env('LOG_DAILY_DAYS', 14),
            'replace_placeholders' => true,
        ],

        'slack' => [
            'driver' => 'slack',
            'url' => env('LOG_SLACK_WEBHOOK_URL'),
            'username' => env('LOG_SLACK_USERNAME', 'Laravel Log'),
            'emoji' => env('LOG_SLACK_EMOJI', ':boom:'),
            'level' => env('LOG_LEVEL', 'critical'),
            'replace_placeholders' => true,
        ],

        'papertrail' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => env('LOG_PAPERTRAIL_HANDLER', SyslogUdpHandler::class),
            'handler_with' => [
                'host' => env('PAPERTRAIL_URL'),
                'port' => env('PAPERTRAIL_PORT'),
                'connectionString' => 'tls://'.env('PAPERTRAIL_URL').':'.env('PAPERTRAIL_PORT'),
            ],
            'processors' => [PsrLogMessageProcessor::class],
        ],

        'stderr' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => StreamHandler::class,
            'handler_with' => [
                'stream' => 'php://stderr',
            ],
            'formatter' => env('LOG_STDERR_FORMATTER'),
            'processors' => [PsrLogMessageProcessor::class],
        ],

        'syslog' => [
            'driver' => 'syslog',
            'level' => env('LOG_LEVEL', 'debug'),
            'facility' => env('LOG_SYSLOG_FACILITY', LOG_USER),
            'replace_placeholders' => true,
        ],

        'errorlog' => [
            'driver' => 'errorlog',
            'level' => env('LOG_LEVEL', 'debug'),
            'replace_placeholders' => true,
        ],

        'null' => [
            'driver' => 'monolog',
            'handler' => NullHandler::class,
        ],

        'emergency' => [
            'path' => storage_path('logs/laravel.log'),
        ],

    ],

];



================================================
FILE: config/mail.php
================================================
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Mailer
    |--------------------------------------------------------------------------
    |
    | This option controls the default mailer that is used to send all email
    | messages unless another mailer is explicitly specified when sending
    | the message. All additional mailers can be configured within the
    | "mailers" array. Examples of each type of mailer are provided.
    |
    */

    'default' => env('MAIL_MAILER', 'log'),

    /*
    |--------------------------------------------------------------------------
    | Mailer Configurations
    |--------------------------------------------------------------------------
    |
    | Here you may configure all of the mailers used by your application plus
    | their respective settings. Several examples have been configured for
    | you and you are free to add your own as your application requires.
    |
    | Laravel supports a variety of mail "transport" drivers that can be used
    | when delivering an email. You may specify which one you're using for
    | your mailers below. You may also add additional mailers if needed.
    |
    | Supported: "smtp", "sendmail", "mailgun", "ses", "ses-v2",
    |            "postmark", "resend", "log", "array",
    |            "failover", "roundrobin"
    |
    */

    'mailers' => [

        'smtp' => [
            'transport' => 'smtp',
            'scheme' => env('MAIL_SCHEME'),
            'url' => env('MAIL_URL'),
            'host' => env('MAIL_HOST', '127.0.0.1'),
            'port' => env('MAIL_PORT', 2525),
            'username' => env('MAIL_USERNAME'),
            'password' => env('MAIL_PASSWORD'),
            'timeout' => null,
            'local_domain' => env('MAIL_EHLO_DOMAIN', parse_url((string) env('APP_URL', 'http://localhost'), PHP_URL_HOST)),
        ],

        'ses' => [
            'transport' => 'ses',
        ],

        'postmark' => [
            'transport' => 'postmark',
            // 'message_stream_id' => env('POSTMARK_MESSAGE_STREAM_ID'),
            // 'client' => [
            //     'timeout' => 5,
            // ],
        ],

        'resend' => [
            'transport' => 'resend',
        ],

        'sendmail' => [
            'transport' => 'sendmail',
            'path' => env('MAIL_SENDMAIL_PATH', '/usr/sbin/sendmail -bs -i'),
        ],

        'log' => [
            'transport' => 'log',
            'channel' => env('MAIL_LOG_CHANNEL'),
        ],

        'array' => [
            'transport' => 'array',
        ],

        'failover' => [
            'transport' => 'failover',
            'mailers' => [
                'smtp',
                'log',
            ],
            'retry_after' => 60,
        ],

        'roundrobin' => [
            'transport' => 'roundrobin',
            'mailers' => [
                'ses',
                'postmark',
            ],
            'retry_after' => 60,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Global "From" Address
    |--------------------------------------------------------------------------
    |
    | You may wish for all emails sent by your application to be sent from
    | the same address. Here you may specify a name and address that is
    | used globally for all emails that are sent by your application.
    |
    */

    'from' => [
        'address' => env('MAIL_FROM_ADDRESS', 'hello@example.com'),
        'name' => env('MAIL_FROM_NAME', 'Example'),
    ],

];



================================================
FILE: config/queue.php
================================================
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Queue Connection Name
    |--------------------------------------------------------------------------
    |
    | Laravel's queue supports a variety of backends via a single, unified
    | API, giving you convenient access to each backend using identical
    | syntax for each. The default queue connection is defined below.
    |
    */

    'default' => env('QUEUE_CONNECTION', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Queue Connections
    |--------------------------------------------------------------------------
    |
    | Here you may configure the connection options for every queue backend
    | used by your application. An example configuration is provided for
    | each backend supported by Laravel. You're also free to add more.
    |
    | Drivers: "sync", "database", "beanstalkd", "sqs", "redis", "null"
    |
    */

    'connections' => [

        'sync' => [
            'driver' => 'sync',
        ],

        'database' => [
            'driver' => 'database',
            'connection' => env('DB_QUEUE_CONNECTION'),
            'table' => env('DB_QUEUE_TABLE', 'jobs'),
            'queue' => env('DB_QUEUE', 'default'),
            'retry_after' => (int) env('DB_QUEUE_RETRY_AFTER', 90),
            'after_commit' => false,
        ],

        'beanstalkd' => [
            'driver' => 'beanstalkd',
            'host' => env('BEANSTALKD_QUEUE_HOST', 'localhost'),
            'queue' => env('BEANSTALKD_QUEUE', 'default'),
            'retry_after' => (int) env('BEANSTALKD_QUEUE_RETRY_AFTER', 90),
            'block_for' => 0,
            'after_commit' => false,
        ],

        'sqs' => [
            'driver' => 'sqs',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'prefix' => env('SQS_PREFIX', 'https://sqs.us-east-1.amazonaws.com/your-account-id'),
            'queue' => env('SQS_QUEUE', 'default'),
            'suffix' => env('SQS_SUFFIX'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'after_commit' => false,
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => env('REDIS_QUEUE_CONNECTION', 'default'),
            'queue' => env('REDIS_QUEUE', 'default'),
            'retry_after' => (int) env('REDIS_QUEUE_RETRY_AFTER', 90),
            'block_for' => null,
            'after_commit' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Job Batching
    |--------------------------------------------------------------------------
    |
    | The following options configure the database and table that store job
    | batching information. These options can be updated to any database
    | connection and table which has been defined by your application.
    |
    */

    'batching' => [
        'database' => env('DB_CONNECTION', 'sqlite'),
        'table' => 'job_batches',
    ],

    /*
    |--------------------------------------------------------------------------
    | Failed Queue Jobs
    |--------------------------------------------------------------------------
    |
    | These options configure the behavior of failed queue job logging so you
    | can control how and where failed jobs are stored. Laravel ships with
    | support for storing failed jobs in a simple file or in a database.
    |
    | Supported drivers: "database-uuids", "dynamodb", "file", "null"
    |
    */

    'failed' => [
        'driver' => env('QUEUE_FAILED_DRIVER', 'database-uuids'),
        'database' => env('DB_CONNECTION', 'sqlite'),
        'table' => 'failed_jobs',
    ],

];



================================================
FILE: config/services.php
================================================
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Third Party Services
    |--------------------------------------------------------------------------
    |
    | This file is for storing the credentials for third party services such
    | as Mailgun, Postmark, AWS and more. This file provides the de facto
    | location for this type of information, allowing packages to have
    | a conventional file to locate the various service credentials.
    |
    */

    'postmark' => [
        'token' => env('POSTMARK_TOKEN'),
    ],

    'resend' => [
        'key' => env('RESEND_KEY'),
    ],

    'ses' => [
        'key' => env('AWS_ACCESS_KEY_ID'),
        'secret' => env('AWS_SECRET_ACCESS_KEY'),
        'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
    ],

    'slack' => [
        'notifications' => [
            'bot_user_oauth_token' => env('SLACK_BOT_USER_OAUTH_TOKEN'),
            'channel' => env('SLACK_BOT_USER_DEFAULT_CHANNEL'),
        ],
    ],

];



================================================
FILE: config/session.php
================================================
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Session Driver
    |--------------------------------------------------------------------------
    |
    | This option determines the default session driver that is utilized for
    | incoming requests. Laravel supports a variety of storage options to
    | persist session data. Database storage is a great default choice.
    |
    | Supported: "file", "cookie", "database", "memcached",
    |            "redis", "dynamodb", "array"
    |
    */

    'driver' => env('SESSION_DRIVER', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Session Lifetime
    |--------------------------------------------------------------------------
    |
    | Here you may specify the number of minutes that you wish the session
    | to be allowed to remain idle before it expires. If you want them
    | to expire immediately when the browser is closed then you may
    | indicate that via the expire_on_close configuration option.
    |
    */

    'lifetime' => (int) env('SESSION_LIFETIME', 120),

    'expire_on_close' => env('SESSION_EXPIRE_ON_CLOSE', false),

    /*
    |--------------------------------------------------------------------------
    | Session Encryption
    |--------------------------------------------------------------------------
    |
    | This option allows you to easily specify that all of your session data
    | should be encrypted before it's stored. All encryption is performed
    | automatically by Laravel and you may use the session like normal.
    |
    */

    'encrypt' => env('SESSION_ENCRYPT', false),

    /*
    |--------------------------------------------------------------------------
    | Session File Location
    |--------------------------------------------------------------------------
    |
    | When utilizing the "file" session driver, the session files are placed
    | on disk. The default storage location is defined here; however, you
    | are free to provide another location where they should be stored.
    |
    */

    'files' => storage_path('framework/sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Connection
    |--------------------------------------------------------------------------
    |
    | When using the "database" or "redis" session drivers, you may specify a
    | connection that should be used to manage these sessions. This should
    | correspond to a connection in your database configuration options.
    |
    */

    'connection' => env('SESSION_CONNECTION'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Table
    |--------------------------------------------------------------------------
    |
    | When using the "database" session driver, you may specify the table to
    | be used to store sessions. Of course, a sensible default is defined
    | for you; however, you're welcome to change this to another table.
    |
    */

    'table' => env('SESSION_TABLE', 'sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Cache Store
    |--------------------------------------------------------------------------
    |
    | When using one of the framework's cache driven session backends, you may
    | define the cache store which should be used to store the session data
    | between requests. This must match one of your defined cache stores.
    |
    | Affects: "dynamodb", "memcached", "redis"
    |
    */

    'store' => env('SESSION_STORE'),

    /*
    |--------------------------------------------------------------------------
    | Session Sweeping Lottery
    |--------------------------------------------------------------------------
    |
    | Some session drivers must manually sweep their storage location to get
    | rid of old sessions from storage. Here are the chances that it will
    | happen on a given request. By default, the odds are 2 out of 100.
    |
    */

    'lottery' => [2, 100],

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Name
    |--------------------------------------------------------------------------
    |
    | Here you may change the name of the session cookie that is created by
    | the framework. Typically, you should not need to change this value
    | since doing so does not grant a meaningful security improvement.
    |
    */

    'cookie' => env(
        'SESSION_COOKIE',
        Str::snake((string) env('APP_NAME', 'laravel')).'_session'
    ),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Path
    |--------------------------------------------------------------------------
    |
    | The session cookie path determines the path for which the cookie will
    | be regarded as available. Typically, this will be the root path of
    | your application, but you're free to change this when necessary.
    |
    */

    'path' => env('SESSION_PATH', '/'),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Domain
    |--------------------------------------------------------------------------
    |
    | This value determines the domain and subdomains the session cookie is
    | available to. By default, the cookie will be available to the root
    | domain and all subdomains. Typically, this shouldn't be changed.
    |
    */

    'domain' => env('SESSION_DOMAIN'),

    /*
    |--------------------------------------------------------------------------
    | HTTPS Only Cookies
    |--------------------------------------------------------------------------
    |
    | By setting this option to true, session cookies will only be sent back
    | to the server if the browser has a HTTPS connection. This will keep
    | the cookie from being sent to you when it can't be done securely.
    |
    */

    'secure' => env('SESSION_SECURE_COOKIE'),

    /*
    |--------------------------------------------------------------------------
    | HTTP Access Only
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will prevent JavaScript from accessing the
    | value of the cookie and the cookie will only be accessible through
    | the HTTP protocol. It's unlikely you should disable this option.
    |
    */

    'http_only' => env('SESSION_HTTP_ONLY', true),

    /*
    |--------------------------------------------------------------------------
    | Same-Site Cookies
    |--------------------------------------------------------------------------
    |
    | This option determines how your cookies behave when cross-site requests
    | take place, and can be used to mitigate CSRF attacks. By default, we
    | will set this value to "lax" to permit secure cross-site requests.
    |
    | See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#samesitesamesite-value
    |
    | Supported: "lax", "strict", "none", null
    |
    */

    'same_site' => env('SESSION_SAME_SITE', 'lax'),

    /*
    |--------------------------------------------------------------------------
    | Partitioned Cookies
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will tie the cookie to the top-level site for
    | a cross-site context. Partitioned cookies are accepted by the browser
    | when flagged "secure" and the Same-Site attribute is set to "none".
    |
    */

    'partitioned' => env('SESSION_PARTITIONED_COOKIE', false),

];



================================================
FILE: database/factories/FamilyMemberFactory.php
================================================
<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\FamilyMember>
 */
class FamilyMemberFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'user_id' => \App\Models\User::factory(),
            'first_name' => $this->faker->firstName(),
            'birth_date' => $this->faker->dateTimeBetween('-80 years', '-1 year')->format('Y-m-d'),
            'gender' => $this->faker->randomElement(['male', 'female']),
        ];
    }
}



================================================
FILE: database/factories/MealPlanFactory.php
================================================
<?php

declare(strict_types=1);

namespace Database\Factories;

use App\Models\User;
use Illuminate\Database\Eloquent\Factories\Factory;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\MealPlan>
 */
class MealPlanFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        static $dateCounter = 0;
        $startDate = now()->addDays($dateCounter++)->startOfDay();
        $endDate = $startDate->copy()->addDays(6);

        return [
            'user_id' => User::factory(),
            'start_date' => $startDate,
            'end_date' => $endDate,
            'status' => $this->faker->randomElement(['pending', 'processing', 'done', 'error']),
            'generation_meta' => null,
            'pdf_path' => null,
            'pdf_size' => null,
        ];
    }

    /**
     * Create a pending meal plan.
     */
    public function pending(): static
    {
        return $this->state(fn (array $attributes) => [
            'status' => 'pending',
            'generation_meta' => null,
        ]);
    }

    /**
     * Create a processing meal plan.
     */
    public function processing(): static
    {
        return $this->state(fn (array $attributes) => [
            'status' => 'processing',
            'generation_meta' => [
                'started_at' => now(),
                'progress' => $this->faker->numberBetween(10, 90),
            ],
        ]);
    }

    /**
     * Create a completed meal plan.
     */
    public function done(): static
    {
        return $this->state(fn (array $attributes) => [
            'status' => 'done',
            'generation_meta' => [
                'generated_at' => $this->faker->dateTimeBetween('-1 week', 'now'),
                'total_recipes' => 21, // 3 meals x 7 days
                'total_calories' => $this->faker->numberBetween(10000, 15000),
            ],
            'pdf_path' => 'meal-plans/'.$this->faker->uuid().'.pdf',
            'pdf_size' => $this->faker->numberBetween(500000, 2000000), // 500KB - 2MB
        ]);
    }

    /**
     * Create a failed meal plan.
     */
    public function error(): static
    {
        return $this->state(fn (array $attributes) => [
            'status' => 'error',
            'generation_meta' => [
                'failed_at' => $this->faker->dateTimeBetween('-1 week', 'now'),
                'error_message' => $this->faker->randomElement([
                    'Insufficient recipes available',
                    'PDF generation failed',
                    'Network timeout',
                    'Database connection lost',
                ]),
            ],
        ]);
    }

    /**
     * Create a meal plan starting today.
     */
    public function startingToday(): static
    {
        $startDate = now()->startOfDay();
        $endDate = $startDate->copy()->addDays(6);

        return $this->state(fn (array $attributes) => [
            'start_date' => $startDate,
            'end_date' => $endDate,
        ]);
    }

    /**
     * Create a meal plan starting next week.
     */
    public function startingNextWeek(): static
    {
        $startDate = now()->addWeek()->startOfWeek();
        $endDate = $startDate->copy()->addDays(6);

        return $this->state(fn (array $attributes) => [
            'start_date' => $startDate,
            'end_date' => $endDate,
        ]);
    }

    /**
     * Create a meal plan with PDF.
     */
    public function withPdf(): static
    {
        return $this->state(fn (array $attributes) => [
            'pdf_path' => 'meal-plans/'.$this->faker->uuid().'.pdf',
            'pdf_size' => $this->faker->numberBetween(500000, 2000000),
        ]);
    }
}



================================================
FILE: database/factories/RecipeFactory.php
================================================
<?php

declare(strict_types=1);

namespace Database\Factories;

use App\Models\User;
use Illuminate\Database\Eloquent\Factories\Factory;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\Recipe>
 */
class RecipeFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        $categories = ['breakfast', 'supper', 'dinner'];

        return [
            'user_id' => User::factory(),
            'name' => $this->faker->words(3, true),
            'category' => $this->faker->randomElement($categories),
            'instructions' => $this->faker->paragraphs(3, true),
            'calories' => $this->faker->numberBetween(100, 800),
            'servings' => $this->faker->numberBetween(1, 8),
        ];
    }

    /**
     * Create a breakfast recipe.
     */
    public function breakfast(): static
    {
        return $this->state(fn (array $attributes) => [
            'category' => 'breakfast',
            'calories' => $this->faker->numberBetween(200, 500),
        ]);
    }

    /**
     * Create a supper recipe.
     */
    public function supper(): static
    {
        return $this->state(fn (array $attributes) => [
            'category' => 'supper',
            'calories' => $this->faker->numberBetween(300, 600),
        ]);
    }

    /**
     * Create a dinner recipe.
     */
    public function dinner(): static
    {
        return $this->state(fn (array $attributes) => [
            'category' => 'dinner',
            'calories' => $this->faker->numberBetween(400, 800),
        ]);
    }

    /**
     * Create a low-calorie recipe.
     */
    public function lowCalorie(): static
    {
        return $this->state(fn (array $attributes) => [
            'calories' => $this->faker->numberBetween(100, 300),
        ]);
    }

    /**
     * Create a high-calorie recipe.
     */
    public function highCalorie(): static
    {
        return $this->state(fn (array $attributes) => [
            'calories' => $this->faker->numberBetween(600, 1000),
        ]);
    }
}



================================================
FILE: database/factories/UserFactory.php
================================================
<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\User>
 */
class UserFactory extends Factory
{
    /**
     * The current password being used by the factory.
     */
    protected static ?string $password;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'name' => fake()->name(),
            'email' => fake()->unique()->safeEmail(),
            'email_verified_at' => now(),
            'password' => static::$password ??= Hash::make('password'),
            'remember_token' => Str::random(10),
        ];
    }

    /**
     * Indicate that the model's email address should be unverified.
     */
    public function unverified(): static
    {
        return $this->state(fn (array $attributes) => [
            'email_verified_at' => null,
        ]);
    }
}



================================================
FILE: database/migrations/0001_01_01_000000_create_users_table.php
================================================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->rememberToken();
            $table->timestamps();
        });

        Schema::create('password_reset_tokens', function (Blueprint $table) {
            $table->string('email')->primary();
            $table->string('token');
            $table->timestamp('created_at')->nullable();
        });

        Schema::create('sessions', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->foreignId('user_id')->nullable()->index();
            $table->string('ip_address', 45)->nullable();
            $table->text('user_agent')->nullable();
            $table->longText('payload');
            $table->integer('last_activity')->index();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('users');
        Schema::dropIfExists('password_reset_tokens');
        Schema::dropIfExists('sessions');
    }
};



================================================
FILE: database/migrations/0001_01_01_000001_create_cache_table.php
================================================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('cache', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->mediumText('value');
            $table->integer('expiration');
        });

        Schema::create('cache_locks', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->string('owner');
            $table->integer('expiration');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('cache');
        Schema::dropIfExists('cache_locks');
    }
};



================================================
FILE: database/migrations/0001_01_01_000002_create_jobs_table.php
================================================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('jobs', function (Blueprint $table) {
            $table->id();
            $table->string('queue')->index();
            $table->longText('payload');
            $table->unsignedTinyInteger('attempts');
            $table->unsignedInteger('reserved_at')->nullable();
            $table->unsignedInteger('available_at');
            $table->unsignedInteger('created_at');
        });

        Schema::create('job_batches', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->string('name');
            $table->integer('total_jobs');
            $table->integer('pending_jobs');
            $table->integer('failed_jobs');
            $table->longText('failed_job_ids');
            $table->mediumText('options')->nullable();
            $table->integer('cancelled_at')->nullable();
            $table->integer('created_at');
            $table->integer('finished_at')->nullable();
        });

        Schema::create('failed_jobs', function (Blueprint $table) {
            $table->id();
            $table->string('uuid')->unique();
            $table->text('connection');
            $table->text('queue');
            $table->longText('payload');
            $table->longText('exception');
            $table->timestamp('failed_at')->useCurrent();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('jobs');
        Schema::dropIfExists('job_batches');
        Schema::dropIfExists('failed_jobs');
    }
};



================================================
FILE: database/migrations/2025_07_31_145624_create_units_table.php
================================================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('units', function (Blueprint $table) {
            $table->id();
            $table->string('code', 10)->unique();
            $table->decimal('conversion_factor_to_base', 10, 4);
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('units');
    }
};



================================================
FILE: database/migrations/2025_07_31_145625_create_ingredients_table.php
================================================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('ingredients', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->timestamps();

            // Indexes
            $table->index('name');
            $table->fullText('name');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('ingredients');
    }
};



================================================
FILE: database/migrations/2025_07_31_145634_create_family_members_table.php
================================================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('family_members', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->string('first_name');
            $table->date('birth_date');
            $table->enum('gender', ['male', 'female']);
            $table->timestamps();

            // Indexes
            $table->index('user_id');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('family_members');
    }
};



================================================
FILE: database/migrations/2025_07_31_145639_create_recipes_table.php
================================================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('recipes', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->string('name');
            $table->enum('category', ['breakfast', 'supper', 'dinner']);
            $table->text('instructions');
            $table->decimal('calories', 10, 2);
            $table->unsignedInteger('servings');
            $table->timestamps();

            // Indexes
            $table->index('name');
            $table->fullText('name');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('recipes');
    }
};



================================================
FILE: database/migrations/2025_07_31_145643_create_recipe_ingredients_table.php
================================================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('recipe_ingredients', function (Blueprint $table) {
            $table->id();
            $table->foreignId('recipe_id')->constrained()->onDelete('cascade');
            $table->foreignId('ingredient_id')->constrained()->onDelete('cascade');
            $table->decimal('quantity', 10, 2);
            $table->foreignId('unit_id')->constrained()->onDelete('cascade');
            $table->timestamps();

            // Unique constraint and indexes
            $table->unique(['recipe_id', 'ingredient_id']);
            $table->index('recipe_id');
            $table->index('ingredient_id');
            $table->index('unit_id');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('recipe_ingredients');
    }
};



================================================
FILE: database/migrations/2025_07_31_145657_create_meal_plans_table.php
================================================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('meal_plans', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained()->onDelete('cascade');
            $table->date('start_date');
            $table->date('end_date');
            $table->enum('status', ['pending', 'processing', 'done', 'error'])->default('pending');
            $table->json('generation_meta')->nullable();
            $table->string('pdf_path')->nullable();
            $table->unsignedBigInteger('pdf_size')->nullable();
            $table->timestamps();

            // Constraints and indexes
            $table->unique(['user_id', 'start_date']);
            $table->index('status');

            // Check constraint for end_date = start_date + 6 days (enforced in application logic)
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('meal_plans');
    }
};



================================================
FILE: database/migrations/2025_07_31_145701_create_meals_table.php
================================================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('meals', function (Blueprint $table) {
            $table->id();
            $table->foreignId('meal_plan_id')->constrained()->onDelete('cascade');
            $table->foreignId('recipe_id')->constrained()->onDelete('cascade');
            $table->date('meal_date');
            $table->enum('meal_category', ['breakfast', 'supper', 'dinner']);
            $table->timestamps();

            // Indexes
            $table->index(['meal_plan_id', 'meal_date', 'meal_category']);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('meals');
    }
};



================================================
FILE: database/migrations/2025_07_31_145709_create_logs_meal_plan_table.php
================================================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('logs_meal_plan', function (Blueprint $table) {
            $table->id();
            $table->foreignId('meal_plan_id')->constrained()->onDelete('cascade');
            $table->dateTime('started_at');
            $table->dateTime('finished_at')->nullable();
            $table->enum('status', ['pending', 'processing', 'done', 'error']);
            $table->timestamp('created_at')->useCurrent();

            // Indexes
            $table->index('meal_plan_id');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('logs_meal_plan');
    }
};



================================================
FILE: database/migrations/2025_07_31_185404_add_soft_deletes_to_recipes_table.php
================================================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('recipes', function (Blueprint $table) {
            $table->softDeletes();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('recipes', function (Blueprint $table) {
            $table->dropSoftDeletes();
        });
    }
};



================================================
FILE: database/seeders/DatabaseSeeder.php
================================================
<?php

namespace Database\Seeders;

use App\Models\User;
// use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;

class DatabaseSeeder extends Seeder
{
    /**
     * Seed the application's database.
     */
    public function run(): void
    {
        // User::factory(10)->create();

        User::factory()->create([
            'name' => 'Test User',
            'email' => 'test@example.com',
        ]);
    }
}



================================================
FILE: database/seeders/IngredientSeeder.php
================================================
<?php

namespace Database\Seeders;

use App\Models\Ingredient;
use App\Models\Unit;
use Illuminate\Database\Seeder;

class IngredientSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        // Create units first
        $units = [
            ['code' => 'g', 'conversion_factor_to_base' => 1.0000],
            ['code' => 'kg', 'conversion_factor_to_base' => 1000.0000],
            ['code' => 'ml', 'conversion_factor_to_base' => 1.0000],
            ['code' => 'l', 'conversion_factor_to_base' => 1000.0000],
            ['code' => 'szt', 'conversion_factor_to_base' => 1.0000],
            ['code' => 'tbsp', 'conversion_factor_to_base' => 15.0000],
            ['code' => 'tsp', 'conversion_factor_to_base' => 5.0000],
            ['code' => 'cup', 'conversion_factor_to_base' => 240.0000],
        ];

        foreach ($units as $unit) {
            Unit::firstOrCreate(['code' => $unit['code']], $unit);
        }

        // Create common ingredients
        $ingredients = [
            'Flour',
            'Sugar',
            'Salt',
            'Black Pepper',
            'Olive Oil',
            'Butter',
            'Eggs',
            'Milk',
            'Chicken Breast',
            'Beef',
            'Pork',
            'Salmon',
            'Tomatoes',
            'Onions',
            'Garlic',
            'Potatoes',
            'Carrots',
            'Broccoli',
            'Bell Peppers',
            'Spinach',
            'Rice',
            'Pasta',
            'Bread',
            'Cheese',
            'Yogurt',
            'Lemon',
            'Lime',
            'Basil',
            'Oregano',
            'Thyme',
            'Paprika',
            'Cumin',
            'Ginger',
            'Honey',
            'Soy Sauce',
            'Vinegar',
            'Chicken Stock',
            'Vegetable Stock',
            'Coconut Milk',
            'Heavy Cream',
        ];

        foreach ($ingredients as $ingredient) {
            Ingredient::firstOrCreate(['name' => $ingredient]);
        }
    }
}



================================================
FILE: database/seeders/UnitSeeder.php
================================================
<?php

namespace Database\Seeders;

use App\Models\Unit;
use Illuminate\Database\Seeder;

class UnitSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $units = [
            ['code' => 'g', 'conversion_factor_to_base' => 1.0000],
            ['code' => 'kg', 'conversion_factor_to_base' => 1000.0000],
            ['code' => 'ml', 'conversion_factor_to_base' => 1.0000],
            ['code' => 'l', 'conversion_factor_to_base' => 1000.0000],
            ['code' => 'pcs', 'conversion_factor_to_base' => 1.0000],
            ['code' => 'tsp', 'conversion_factor_to_base' => 5.0000],
            ['code' => 'tbsp', 'conversion_factor_to_base' => 15.0000],
            ['code' => 'cup', 'conversion_factor_to_base' => 250.0000],
        ];

        foreach ($units as $unit) {
            Unit::firstOrCreate(
                ['code' => $unit['code']],
                $unit
            );
        }
    }
}



================================================
FILE: docker/8.0/Dockerfile
================================================
FROM ubuntu:24.04

LABEL maintainer="Taylor Otwell"

ARG WWWGROUP
ARG NODE_VERSION=22
ARG POSTGRES_VERSION=17

WORKDIR /var/www/html

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC
ENV SUPERVISOR_PHP_COMMAND="/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan serve --host=0.0.0.0 --port=80"
ENV SUPERVISOR_PHP_USER="sail"

RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

RUN echo "Acquire::http::Pipeline-Depth 0;" > /etc/apt/apt.conf.d/99custom && \
    echo "Acquire::http::No-Cache true;" >> /etc/apt/apt.conf.d/99custom && \
    echo "Acquire::BrokenProxy    true;" >> /etc/apt/apt.conf.d/99custom

RUN apt-get update && apt-get upgrade -y \
    && mkdir -p /etc/apt/keyrings \
    && apt-get install -y gnupg gosu curl ca-certificates zip unzip git supervisor sqlite3 libcap2-bin libpng-dev python3 dnsutils librsvg2-bin fswatch ffmpeg nano \
    && curl -sS 'https://keyserver.ubuntu.com/pks/lookup?op=get&search=0xb8dc7e53946656efbce4c1dd71daeaab4ad4cab6' | gpg --dearmor | tee /usr/share/keyrings/ppa_ondrej_php.gpg > /dev/null \
    && echo "deb [signed-by=/usr/share/keyrings/ppa_ondrej_php.gpg] https://ppa.launchpadcontent.net/ondrej/php/ubuntu noble main" > /etc/apt/sources.list.d/ppa_ondrej_php.list \
    && apt-get update \
    && apt-get install -y php8.0-cli php8.0-dev \
       php8.0-pgsql php8.0-sqlite3 php8.0-gd php8.0-imagick \
       php8.0-curl php8.0-memcached php8.0-mongodb \
       php8.0-imap php8.0-mysql php8.0-mbstring \
       php8.0-xml php8.0-zip php8.0-bcmath php8.0-soap \
       php8.0-intl php8.0-readline php8.0-pcov \
       php8.0-msgpack php8.0-igbinary php8.0-ldap \
       php8.0-redis php8.0-swoole php8.0-xdebug \
    && curl -sLS https://getcomposer.org/installer | php -- --install-dir=/usr/bin/ --filename=composer \
    && curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg \
    && echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_VERSION.x nodistro main" > /etc/apt/sources.list.d/nodesource.list \
    && apt-get update \
    && apt-get install -y nodejs \
    && npm install -g npm \
    && npm install -g bun \
    && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --dearmor | tee /usr/share/keyrings/yarnkey.gpg >/dev/null \
    && echo "deb [signed-by=/usr/share/keyrings/yarnkey.gpg] https://dl.yarnpkg.com/debian/ stable main" > /etc/apt/sources.list.d/yarn.list \
    && curl -sS https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | tee /usr/share/keyrings/pgdg.gpg >/dev/null \
    && echo "deb [signed-by=/usr/share/keyrings/pgdg.gpg] http://apt.postgresql.org/pub/repos/apt noble-pgdg main" > /etc/apt/sources.list.d/pgdg.list \
    && apt-get update \
    && apt-get install -y yarn \
    && apt-get install -y mysql-client \
    && apt-get install -y postgresql-client-$POSTGRES_VERSION \
    && apt-get -y autoremove \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN update-alternatives --set php /usr/bin/php8.0

RUN setcap "cap_net_bind_service=+ep" /usr/bin/php8.0

RUN userdel -r ubuntu
RUN groupadd --force -g $WWWGROUP sail
RUN useradd -ms /bin/bash --no-user-group -g $WWWGROUP -u 1337 sail

COPY start-container /usr/local/bin/start-container
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY php.ini /etc/php/8.0/cli/conf.d/99-sail.ini
RUN chmod +x /usr/local/bin/start-container

EXPOSE 80/tcp

ENTRYPOINT ["start-container"]



================================================
FILE: docker/8.0/php.ini
================================================
[PHP]
post_max_size = 100M
upload_max_filesize = 100M
variables_order = EGPCS
pcov.directory = .



================================================
FILE: docker/8.0/start-container
================================================
#!/usr/bin/env bash

if [ "$SUPERVISOR_PHP_USER" != "root" ] && [ "$SUPERVISOR_PHP_USER" != "sail" ]; then
    echo "You should set SUPERVISOR_PHP_USER to either 'sail' or 'root'."
    exit 1
fi

if [ ! -z "$WWWUSER" ]; then
    usermod -u $WWWUSER sail
fi

if [ ! -d /.composer ]; then
    mkdir /.composer
fi

chmod -R ugo+rw /.composer

if [ $# -gt 0 ]; then
    if [ "$SUPERVISOR_PHP_USER" = "root" ]; then
        exec "$@"
    else
        exec gosu $WWWUSER "$@"
    fi
else
    exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
fi



================================================
FILE: docker/8.0/supervisord.conf
================================================
[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid

[program:php]
command=%(ENV_SUPERVISOR_PHP_COMMAND)s
user=%(ENV_SUPERVISOR_PHP_USER)s
environment=LARAVEL_SAIL="1"
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0



================================================
FILE: docker/8.1/Dockerfile
================================================
FROM ubuntu:24.04

LABEL maintainer="Taylor Otwell"

ARG WWWGROUP
ARG NODE_VERSION=22
ARG POSTGRES_VERSION=17

WORKDIR /var/www/html

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC
ENV SUPERVISOR_PHP_COMMAND="/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan serve --host=0.0.0.0 --port=80"
ENV SUPERVISOR_PHP_USER="sail"

RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

RUN echo "Acquire::http::Pipeline-Depth 0;" > /etc/apt/apt.conf.d/99custom && \
    echo "Acquire::http::No-Cache true;" >> /etc/apt/apt.conf.d/99custom && \
    echo "Acquire::BrokenProxy    true;" >> /etc/apt/apt.conf.d/99custom

RUN apt-get update && apt-get upgrade -y \
    && mkdir -p /etc/apt/keyrings \
    && apt-get install -y gnupg gosu curl ca-certificates zip unzip git supervisor sqlite3 libcap2-bin libpng-dev python3 dnsutils librsvg2-bin fswatch ffmpeg nano \
    && curl -sS 'https://keyserver.ubuntu.com/pks/lookup?op=get&search=0xb8dc7e53946656efbce4c1dd71daeaab4ad4cab6' | gpg --dearmor | tee /usr/share/keyrings/ppa_ondrej_php.gpg > /dev/null \
    && echo "deb [signed-by=/usr/share/keyrings/ppa_ondrej_php.gpg] https://ppa.launchpadcontent.net/ondrej/php/ubuntu noble main" > /etc/apt/sources.list.d/ppa_ondrej_php.list \
    && apt-get update \
    && apt-get install -y php8.1-cli php8.1-dev \
       php8.1-pgsql php8.1-sqlite3 php8.1-gd php8.1-imagick \
       php8.1-curl php8.1-mongodb \
       php8.1-imap php8.1-mysql php8.1-mbstring \
       php8.1-xml php8.1-zip php8.1-bcmath php8.1-soap \
       php8.1-intl php8.1-readline \
       php8.1-ldap \
       php8.1-msgpack php8.1-igbinary php8.1-redis php8.1-swoole \
       php8.1-memcached php8.1-pcov php8.1-xdebug \
    && curl -sLS https://getcomposer.org/installer | php -- --install-dir=/usr/bin/ --filename=composer \
    && curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg \
    && echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_VERSION.x nodistro main" > /etc/apt/sources.list.d/nodesource.list \
    && apt-get update \
    && apt-get install -y nodejs \
    && npm install -g npm \
    && npm install -g bun \
    && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --dearmor | tee /usr/share/keyrings/yarn.gpg >/dev/null \
    && echo "deb [signed-by=/usr/share/keyrings/yarn.gpg] https://dl.yarnpkg.com/debian/ stable main" > /etc/apt/sources.list.d/yarn.list \
    && curl -sS https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | tee /usr/share/keyrings/pgdg.gpg >/dev/null \
    && echo "deb [signed-by=/usr/share/keyrings/pgdg.gpg] http://apt.postgresql.org/pub/repos/apt noble-pgdg main" > /etc/apt/sources.list.d/pgdg.list \
    && apt-get update \
    && apt-get install -y yarn \
    && apt-get install -y mysql-client \
    && apt-get install -y postgresql-client-$POSTGRES_VERSION \
    && apt-get -y autoremove \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN setcap "cap_net_bind_service=+ep" /usr/bin/php8.1

RUN userdel -r ubuntu
RUN groupadd --force -g $WWWGROUP sail
RUN useradd -ms /bin/bash --no-user-group -g $WWWGROUP -u 1337 sail

COPY start-container /usr/local/bin/start-container
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY php.ini /etc/php/8.1/cli/conf.d/99-sail.ini
RUN chmod +x /usr/local/bin/start-container

EXPOSE 80/tcp

ENTRYPOINT ["start-container"]



================================================
FILE: docker/8.1/php.ini
================================================
[PHP]
post_max_size = 100M
upload_max_filesize = 100M
variables_order = EGPCS
pcov.directory = .



================================================
FILE: docker/8.1/start-container
================================================
#!/usr/bin/env bash

if [ "$SUPERVISOR_PHP_USER" != "root" ] && [ "$SUPERVISOR_PHP_USER" != "sail" ]; then
    echo "You should set SUPERVISOR_PHP_USER to either 'sail' or 'root'."
    exit 1
fi

if [ ! -z "$WWWUSER" ]; then
    usermod -u $WWWUSER sail
fi

if [ ! -d /.composer ]; then
    mkdir /.composer
fi

chmod -R ugo+rw /.composer

if [ $# -gt 0 ]; then
    if [ "$SUPERVISOR_PHP_USER" = "root" ]; then
        exec "$@"
    else
        exec gosu $WWWUSER "$@"
    fi
else
    exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
fi



================================================
FILE: docker/8.1/supervisord.conf
================================================
[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid

[program:php]
command=%(ENV_SUPERVISOR_PHP_COMMAND)s
user=%(ENV_SUPERVISOR_PHP_USER)s
environment=LARAVEL_SAIL="1"
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0



================================================
FILE: docker/8.2/Dockerfile
================================================
FROM ubuntu:24.04

LABEL maintainer="Taylor Otwell"

ARG WWWGROUP
ARG NODE_VERSION=22
ARG POSTGRES_VERSION=17

WORKDIR /var/www/html

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC
ENV SUPERVISOR_PHP_COMMAND="/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan serve --host=0.0.0.0 --port=80"
ENV SUPERVISOR_PHP_USER="sail"

RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

RUN echo "Acquire::http::Pipeline-Depth 0;" > /etc/apt/apt.conf.d/99custom && \
    echo "Acquire::http::No-Cache true;" >> /etc/apt/apt.conf.d/99custom && \
    echo "Acquire::BrokenProxy    true;" >> /etc/apt/apt.conf.d/99custom

RUN apt-get update && apt-get upgrade -y \
    && mkdir -p /etc/apt/keyrings \
    && apt-get install -y gnupg gosu curl ca-certificates zip unzip git supervisor sqlite3 libcap2-bin libpng-dev python3 dnsutils librsvg2-bin fswatch ffmpeg nano  \
    && curl -sS 'https://keyserver.ubuntu.com/pks/lookup?op=get&search=0xb8dc7e53946656efbce4c1dd71daeaab4ad4cab6' | gpg --dearmor | tee /etc/apt/keyrings/ppa_ondrej_php.gpg > /dev/null \
    && echo "deb [signed-by=/etc/apt/keyrings/ppa_ondrej_php.gpg] https://ppa.launchpadcontent.net/ondrej/php/ubuntu noble main" > /etc/apt/sources.list.d/ppa_ondrej_php.list \
    && apt-get update \
    && apt-get install -y php8.2-cli php8.2-dev \
       php8.2-pgsql php8.2-sqlite3 php8.2-gd php8.2-imagick \
       php8.2-curl php8.2-mongodb \
       php8.2-imap php8.2-mysql php8.2-mbstring \
       php8.2-xml php8.2-zip php8.2-bcmath php8.2-soap \
       php8.2-intl php8.2-readline \
       php8.2-ldap \
       php8.2-msgpack php8.2-igbinary php8.2-redis php8.2-swoole \
       php8.2-memcached php8.2-pcov php8.2-xdebug \
    && curl -sLS https://getcomposer.org/installer | php -- --install-dir=/usr/bin/ --filename=composer \
    && curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg \
    && echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_VERSION.x nodistro main" > /etc/apt/sources.list.d/nodesource.list \
    && apt-get update \
    && apt-get install -y nodejs \
    && npm install -g npm \
    && npm install -g pnpm \
    && npm install -g bun \
    && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --dearmor | tee /etc/apt/keyrings/yarn.gpg >/dev/null \
    && echo "deb [signed-by=/etc/apt/keyrings/yarn.gpg] https://dl.yarnpkg.com/debian/ stable main" > /etc/apt/sources.list.d/yarn.list \
    && curl -sS https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | tee /etc/apt/keyrings/pgdg.gpg >/dev/null \
    && echo "deb [signed-by=/etc/apt/keyrings/pgdg.gpg] http://apt.postgresql.org/pub/repos/apt noble-pgdg main" > /etc/apt/sources.list.d/pgdg.list \
    && apt-get update \
    && apt-get install -y yarn \
    && apt-get install -y mysql-client \
    && apt-get install -y postgresql-client-$POSTGRES_VERSION \
    && apt-get -y autoremove \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN setcap "cap_net_bind_service=+ep" /usr/bin/php8.2

RUN userdel -r ubuntu
RUN groupadd --force -g $WWWGROUP sail
RUN useradd -ms /bin/bash --no-user-group -g $WWWGROUP -u 1337 sail

COPY start-container /usr/local/bin/start-container
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY php.ini /etc/php/8.2/cli/conf.d/99-sail.ini
RUN chmod +x /usr/local/bin/start-container

EXPOSE 80/tcp

ENTRYPOINT ["start-container"]



================================================
FILE: docker/8.2/php.ini
================================================
[PHP]
post_max_size = 100M
upload_max_filesize = 100M
variables_order = EGPCS
pcov.directory = .



================================================
FILE: docker/8.2/start-container
================================================
#!/usr/bin/env bash

if [ "$SUPERVISOR_PHP_USER" != "root" ] && [ "$SUPERVISOR_PHP_USER" != "sail" ]; then
    echo "You should set SUPERVISOR_PHP_USER to either 'sail' or 'root'."
    exit 1
fi

if [ ! -z "$WWWUSER" ]; then
    usermod -u $WWWUSER sail
fi

if [ ! -d /.composer ]; then
    mkdir /.composer
fi

chmod -R ugo+rw /.composer

if [ $# -gt 0 ]; then
    if [ "$SUPERVISOR_PHP_USER" = "root" ]; then
        exec "$@"
    else
        exec gosu $WWWUSER "$@"
    fi
else
    exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
fi



================================================
FILE: docker/8.2/supervisord.conf
================================================
[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid

[program:php]
command=%(ENV_SUPERVISOR_PHP_COMMAND)s
user=%(ENV_SUPERVISOR_PHP_USER)s
environment=LARAVEL_SAIL="1"
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0



================================================
FILE: docker/8.3/Dockerfile
================================================
FROM ubuntu:24.04

LABEL maintainer="Taylor Otwell"

ARG WWWGROUP
ARG NODE_VERSION=22
ARG MYSQL_CLIENT="mysql-client"
ARG POSTGRES_VERSION=17

WORKDIR /var/www/html

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC
ENV SUPERVISOR_PHP_COMMAND="/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan serve --host=0.0.0.0 --port=80"
ENV SUPERVISOR_PHP_USER="sail"

RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

RUN echo "Acquire::http::Pipeline-Depth 0;" > /etc/apt/apt.conf.d/99custom && \
    echo "Acquire::http::No-Cache true;" >> /etc/apt/apt.conf.d/99custom && \
    echo "Acquire::BrokenProxy    true;" >> /etc/apt/apt.conf.d/99custom

RUN apt-get update && apt-get upgrade -y \
    && mkdir -p /etc/apt/keyrings \
    && apt-get install -y gnupg gosu curl ca-certificates zip unzip git supervisor sqlite3 libcap2-bin libpng-dev python3 dnsutils librsvg2-bin fswatch ffmpeg nano  \
    && curl -sS 'https://keyserver.ubuntu.com/pks/lookup?op=get&search=0xb8dc7e53946656efbce4c1dd71daeaab4ad4cab6' | gpg --dearmor | tee /etc/apt/keyrings/ppa_ondrej_php.gpg > /dev/null \
    && echo "deb [signed-by=/etc/apt/keyrings/ppa_ondrej_php.gpg] https://ppa.launchpadcontent.net/ondrej/php/ubuntu noble main" > /etc/apt/sources.list.d/ppa_ondrej_php.list \
    && apt-get update \
    && apt-get install -y php8.3-cli php8.3-dev \
       php8.3-pgsql php8.3-sqlite3 php8.3-gd \
       php8.3-curl php8.3-mongodb \
       php8.3-imap php8.3-mysql php8.3-mbstring \
       php8.3-xml php8.3-zip php8.3-bcmath php8.3-soap \
       php8.3-intl php8.3-readline \
       php8.3-ldap \
       php8.3-msgpack php8.3-igbinary php8.3-redis \
       php8.3-memcached php8.3-pcov php8.3-imagick php8.3-xdebug php8.3-swoole \
    && curl -sLS https://getcomposer.org/installer | php -- --install-dir=/usr/bin/ --filename=composer \
    && curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg \
    && echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_VERSION.x nodistro main" > /etc/apt/sources.list.d/nodesource.list \
    && apt-get update \
    && apt-get install -y nodejs \
    && npm install -g npm \
    && npm install -g pnpm \
    && npm install -g bun \
    && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --dearmor | tee /etc/apt/keyrings/yarn.gpg >/dev/null \
    && echo "deb [signed-by=/etc/apt/keyrings/yarn.gpg] https://dl.yarnpkg.com/debian/ stable main" > /etc/apt/sources.list.d/yarn.list \
    && curl -sS https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | tee /etc/apt/keyrings/pgdg.gpg >/dev/null \
    && echo "deb [signed-by=/etc/apt/keyrings/pgdg.gpg] http://apt.postgresql.org/pub/repos/apt noble-pgdg main" > /etc/apt/sources.list.d/pgdg.list \
    && apt-get update \
    && apt-get install -y yarn \
    && apt-get install -y $MYSQL_CLIENT \
    && apt-get install -y postgresql-client-$POSTGRES_VERSION \
    && apt-get -y autoremove \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN setcap "cap_net_bind_service=+ep" /usr/bin/php8.3

RUN userdel -r ubuntu
RUN groupadd --force -g $WWWGROUP sail
RUN useradd -ms /bin/bash --no-user-group -g $WWWGROUP -u 1337 sail

COPY start-container /usr/local/bin/start-container
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY php.ini /etc/php/8.3/cli/conf.d/99-sail.ini
RUN chmod +x /usr/local/bin/start-container

EXPOSE 80/tcp

ENTRYPOINT ["start-container"]



================================================
FILE: docker/8.3/php.ini
================================================
[PHP]
post_max_size = 100M
upload_max_filesize = 100M
variables_order = EGPCS
pcov.directory = .



================================================
FILE: docker/8.3/start-container
================================================
#!/usr/bin/env bash

if [ "$SUPERVISOR_PHP_USER" != "root" ] && [ "$SUPERVISOR_PHP_USER" != "sail" ]; then
    echo "You should set SUPERVISOR_PHP_USER to either 'sail' or 'root'."
    exit 1
fi

if [ ! -z "$WWWUSER" ]; then
    usermod -u $WWWUSER sail
fi

if [ ! -d /.composer ]; then
    mkdir /.composer
fi

chmod -R ugo+rw /.composer

if [ $# -gt 0 ]; then
    if [ "$SUPERVISOR_PHP_USER" = "root" ]; then
        exec "$@"
    else
        exec gosu $WWWUSER "$@"
    fi
else
    exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
fi



================================================
FILE: docker/8.3/supervisord.conf
================================================
[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid

[program:php]
command=%(ENV_SUPERVISOR_PHP_COMMAND)s
user=%(ENV_SUPERVISOR_PHP_USER)s
environment=LARAVEL_SAIL="1"
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0



================================================
FILE: docker/8.4/Dockerfile
================================================
FROM ubuntu:24.04

LABEL maintainer="Taylor Otwell"

ARG WWWGROUP
ARG NODE_VERSION=22
ARG MYSQL_CLIENT="mysql-client"
ARG POSTGRES_VERSION=17

WORKDIR /var/www/html

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC
ENV SUPERVISOR_PHP_COMMAND="/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan serve --host=0.0.0.0 --port=80"
ENV SUPERVISOR_PHP_USER="sail"

RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

RUN echo "Acquire::http::Pipeline-Depth 0;" > /etc/apt/apt.conf.d/99custom && \
    echo "Acquire::http::No-Cache true;" >> /etc/apt/apt.conf.d/99custom && \
    echo "Acquire::BrokenProxy    true;" >> /etc/apt/apt.conf.d/99custom

RUN apt-get update && apt-get upgrade -y \
    && mkdir -p /etc/apt/keyrings \
    && apt-get install -y gnupg gosu curl ca-certificates zip unzip git supervisor sqlite3 libcap2-bin libpng-dev python3 dnsutils librsvg2-bin fswatch ffmpeg nano  \
    && curl -sS 'https://keyserver.ubuntu.com/pks/lookup?op=get&search=0xb8dc7e53946656efbce4c1dd71daeaab4ad4cab6' | gpg --dearmor | tee /etc/apt/keyrings/ppa_ondrej_php.gpg > /dev/null \
    && echo "deb [signed-by=/etc/apt/keyrings/ppa_ondrej_php.gpg] https://ppa.launchpadcontent.net/ondrej/php/ubuntu noble main" > /etc/apt/sources.list.d/ppa_ondrej_php.list \
    && apt-get update \
    && apt-get install -y php8.4-cli php8.4-dev \
       php8.4-pgsql php8.4-sqlite3 php8.4-gd \
       php8.4-curl php8.4-mongodb \
       php8.4-imap php8.4-mysql php8.4-mbstring \
       php8.4-xml php8.4-zip php8.4-bcmath php8.4-soap \
       php8.4-intl php8.4-readline \
       php8.4-ldap \
       php8.4-msgpack php8.4-igbinary php8.4-redis php8.4-swoole \
       php8.4-memcached php8.4-pcov php8.4-imagick php8.4-xdebug \
    && curl -sLS https://getcomposer.org/installer | php -- --install-dir=/usr/bin/ --filename=composer \
    && curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg \
    && echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_VERSION.x nodistro main" > /etc/apt/sources.list.d/nodesource.list \
    && apt-get update \
    && apt-get install -y nodejs \
    && npm install -g npm \
    && npm install -g pnpm \
    && npm install -g bun \
    && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --dearmor | tee /etc/apt/keyrings/yarn.gpg >/dev/null \
    && echo "deb [signed-by=/etc/apt/keyrings/yarn.gpg] https://dl.yarnpkg.com/debian/ stable main" > /etc/apt/sources.list.d/yarn.list \
    && curl -sS https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | tee /etc/apt/keyrings/pgdg.gpg >/dev/null \
    && echo "deb [signed-by=/etc/apt/keyrings/pgdg.gpg] http://apt.postgresql.org/pub/repos/apt noble-pgdg main" > /etc/apt/sources.list.d/pgdg.list \
    && apt-get update \
    && apt-get install -y yarn \
    && apt-get install -y $MYSQL_CLIENT \
    && apt-get install -y postgresql-client-$POSTGRES_VERSION \
    && apt-get -y autoremove \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN setcap "cap_net_bind_service=+ep" /usr/bin/php8.4

RUN userdel -r ubuntu
RUN groupadd --force -g $WWWGROUP sail
RUN useradd -ms /bin/bash --no-user-group -g $WWWGROUP -u 1337 sail

COPY start-container /usr/local/bin/start-container
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY php.ini /etc/php/8.4/cli/conf.d/99-sail.ini
RUN chmod +x /usr/local/bin/start-container

EXPOSE 80/tcp

ENTRYPOINT ["start-container"]



================================================
FILE: docker/8.4/php.ini
================================================
[PHP]
post_max_size = 100M
upload_max_filesize = 100M
variables_order = EGPCS
pcov.directory = .



================================================
FILE: docker/8.4/start-container
================================================
#!/usr/bin/env bash

if [ "$SUPERVISOR_PHP_USER" != "root" ] && [ "$SUPERVISOR_PHP_USER" != "sail" ]; then
    echo "You should set SUPERVISOR_PHP_USER to either 'sail' or 'root'."
    exit 1
fi

if [ ! -z "$WWWUSER" ]; then
    usermod -u $WWWUSER sail
fi

if [ ! -d /.composer ]; then
    mkdir /.composer
fi

chmod -R ugo+rw /.composer

if [ $# -gt 0 ]; then
    if [ "$SUPERVISOR_PHP_USER" = "root" ]; then
        exec "$@"
    else
        exec gosu $WWWUSER "$@"
    fi
else
    exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
fi



================================================
FILE: docker/8.4/supervisord.conf
================================================
[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid

[program:php]
command=%(ENV_SUPERVISOR_PHP_COMMAND)s
user=%(ENV_SUPERVISOR_PHP_USER)s
environment=LARAVEL_SAIL="1"
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0



================================================
FILE: docker/mariadb/create-testing-database.sh
================================================
#!/usr/bin/env bash

/usr/bin/mariadb --user=root --password="$MYSQL_ROOT_PASSWORD" <<-EOSQL
    CREATE DATABASE IF NOT EXISTS testing;
    GRANT ALL PRIVILEGES ON \`testing%\`.* TO '$MYSQL_USER'@'%';
EOSQL



================================================
FILE: docker/mysql/create-testing-database.sh
================================================
#!/usr/bin/env bash

mysql --user=root --password="$MYSQL_ROOT_PASSWORD" <<-EOSQL
    CREATE DATABASE IF NOT EXISTS testing;
    GRANT ALL PRIVILEGES ON \`testing%\`.* TO '$MYSQL_USER'@'%';
EOSQL



================================================
FILE: docker/pgsql/create-testing-database.sql
================================================
SELECT 'CREATE DATABASE testing'
WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'testing')\gexec



================================================
FILE: docs/api/recipes.md
================================================
# Recipe API Documentation

## Overview

The Recipe API provides full CRUD operations for managing user recipes in the Menu Maker application. All endpoints require authentication and follow RESTful conventions.

## Base URL
```
/recipes
```

## Authentication
All endpoints require authentication via Laravel Sanctum or session-based authentication.

## Endpoints

### 1. List Recipes
**GET** `/recipes`

Retrieve a paginated list of recipes belonging to the authenticated user.

#### Query Parameters
| Parameter   | Type    | Default      | Description                                              |
| ----------- | ------- | ------------ | -------------------------------------------------------- |
| `search`    | string  | -            | Search in recipe name and instructions                   |
| `category`  | string  | -            | Filter by category: `breakfast`, `supper`, `dinner`      |
| `sort`      | string  | `created_at` | Sort field: `name`, `created_at`, `calories`, `category` |
| `direction` | string  | `desc`       | Sort direction: `asc`, `desc`                            |
| `per_page`  | integer | 15           | Items per page (1-100)                                   |

#### Response
```json
{
  "recipes": {
    "data": [
      {
        "id": 1,
        "name": "Chocolate Pancakes",
        "category": "breakfast",
        "instructions": "Mix ingredients and cook on griddle...",
        "calories": 350,
        "servings": 2,
        "created_at": "2025-07-31T10:00:00Z",
        "updated_at": "2025-07-31T10:00:00Z",
        "ingredients": []
      }
    ],
    "links": {...},
    "meta": {...}
  },
  "filters": {
    "search": null,
    "category": null,
    "sort": "created_at",
    "direction": "desc"
  },
  "categories": [
    {"value": "breakfast", "label": "Breakfast"},
    {"value": "supper", "label": "Supper"},
    {"value": "dinner", "label": "Dinner"}
  ]
}
```

### 2. Get Recipe
**GET** `/recipes/{recipe}`

Retrieve a specific recipe with its ingredients.

#### Response
```json
{
  "recipe": {
    "id": 1,
    "name": "Chocolate Pancakes",
    "category": "breakfast",
    "instructions": "Mix ingredients and cook on griddle...",
    "calories": 350,
    "servings": 2,
    "created_at": "2025-07-31T10:00:00Z",
    "updated_at": "2025-07-31T10:00:00Z",
    "ingredients": [
      {
        "ingredient_id": 1,
        "ingredient_name": "Flour",
        "quantity": 200,
        "unit_id": 1,
        "unit_code": "g",
        "unit_name": "grams"
      }
    ]
  }
}
```

### 3. Create Recipe
**POST** `/recipes`

Create a new recipe.

#### Request Body
```json
{
  "name": "Chocolate Pancakes",
  "category": "breakfast",
  "instructions": "Mix ingredients and cook on griddle...",
  "calories": 350,
  "servings": 2,
  "ingredients": [
    {
      "ingredient_id": 1,
      "quantity": 200,
      "unit_id": 1
    }
  ]
}
```

#### Validation Rules
| Field                         | Rules                                |
| ----------------------------- | ------------------------------------ |
| `name`                        | required, string, max:255            |
| `category`                    | required, in:breakfast,supper,dinner |
| `instructions`                | required, string                     |
| `calories`                    | required, numeric, min:0             |
| `servings`                    | required, integer, min:1             |
| `ingredients`                 | sometimes, array                     |
| `ingredients.*.ingredient_id` | required, exists:ingredients,id      |
| `ingredients.*.quantity`      | required, numeric, min:0.01          |
| `ingredients.*.unit_id`       | required, exists:units,id            |

#### Response
**201 Created** - Redirects to recipes index with success message

### 4. Update Recipe
**PUT/PATCH** `/recipes/{recipe}`

Update an existing recipe. For PATCH requests, all fields are optional.

#### Request Body
Same structure as Create Recipe, but all fields optional for PATCH.

#### Response
**200 OK** - Redirects to recipe show page with success message

### 5. Delete Recipe
**DELETE** `/recipes/{recipe}`

Soft delete a recipe.

#### Response
**204 No Content** - Redirects to recipes index with success message

### 6. Create Form
**GET** `/recipes/create`

Display the recipe creation form.

#### Response
Inertia.js page with categories data.

### 7. Edit Form
**GET** `/recipes/{recipe}/edit`

Display the recipe edit form.

#### Response
Inertia.js page with recipe data and categories.

## Error Responses

### 401 Unauthorized
```json
{
  "message": "Unauthenticated."
}
```

### 403 Forbidden
```json
{
  "message": "This action is unauthorized."
}
```

### 404 Not Found
```json
{
  "message": "No query results for model [App\\Models\\Recipe] {id}"
}
```

### 422 Validation Error
```json
{
  "message": "The given data was invalid.",
  "errors": {
    "name": ["The name field is required."],
    "category": ["The selected category is invalid."]
  }
}
```

## Business Rules

1. **Ownership**: Users can only access their own recipes
2. **Categories**: Only three categories allowed: breakfast, supper, dinner
3. **Ingredients**: Optional, but if provided must reference existing ingredients and units
4. **Soft Deletes**: Deleted recipes are soft-deleted, not permanently removed
5. **Validation**: All numeric fields must be positive
6. **Duplicates**: Duplicate ingredients in the same recipe are automatically removed

## Rate Limiting

Standard Laravel rate limiting applies (60 requests per minute for authenticated users).

## Security

- All endpoints require authentication
- Authorization is enforced via RecipePolicy
- Mass assignment protection via fillable fields
- CSRF protection for state-changing operations
- XSS protection via proper escaping

## Performance Notes

- Queries are optimized with database indexes
- Pagination is used for list endpoints
- Eager loading is used for relationships when needed
- Query scopes provide reusable optimized filters



================================================
FILE: public/index.php
================================================
<?php

use Illuminate\Foundation\Application;
use Illuminate\Http\Request;

define('LARAVEL_START', microtime(true));

// Determine if the application is in maintenance mode...
if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) {
    require $maintenance;
}

// Register the Composer autoloader...
require __DIR__.'/../vendor/autoload.php';

// Bootstrap Laravel and handle the request...
/** @var Application $app */
$app = require_once __DIR__.'/../bootstrap/app.php';

$app->handleRequest(Request::capture());



================================================
FILE: public/robots.txt
================================================
User-agent: *
Disallow:



================================================
FILE: public/.htaccess
================================================
<IfModule mod_rewrite.c>
    <IfModule mod_negotiation.c>
        Options -MultiViews -Indexes
    </IfModule>

    RewriteEngine On

    # Handle Authorization Header
    RewriteCond %{HTTP:Authorization} .
    RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

    # Handle X-XSRF-Token Header
    RewriteCond %{HTTP:x-xsrf-token} .
    RewriteRule .* - [E=HTTP_X_XSRF_TOKEN:%{HTTP:X-XSRF-Token}]

    # Redirect Trailing Slashes If Not A Folder...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_URI} (.+)/$
    RewriteRule ^ %1 [L,R=301]

    # Send Requests To Front Controller...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule ^ index.php [L]
</IfModule>



================================================
FILE: resources/css/app.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
    :root {
        --background: 0 0% 100%;
        --foreground: 0 0% 3.9%;
        --card: 0 0% 100%;
        --card-foreground: 0 0% 3.9%;
        --popover: 0 0% 100%;
        --popover-foreground: 0 0% 3.9%;
        --primary: 0 0% 9%;
        --primary-foreground: 0 0% 98%;
        --secondary: 0 0% 96.1%;
        --secondary-foreground: 0 0% 9%;
        --muted: 0 0% 96.1%;
        --muted-foreground: 0 0% 45.1%;
        --accent: 0 0% 96.1%;
        --accent-foreground: 0 0% 9%;
        --destructive: 0 84.2% 60.2%;
        --destructive-foreground: 0 0% 98%;
        --border: 0 0% 89.8%;
        --input: 0 0% 89.8%;
        --ring: 0 0% 3.9%;
        --radius: 0.5rem;
        --chart-1: 12 76% 61%;
        --chart-2: 173 58% 39%;
        --chart-3: 197 37% 24%;
        --chart-4: 43 74% 66%;
        --chart-5: 27 87% 67%;
    }

    .dark {
        --background: 0 0% 3.9%;
        --foreground: 0 0% 98%;
        --card: 0 0% 3.9%;
        --card-foreground: 0 0% 98%;
        --popover: 0 0% 3.9%;
        --popover-foreground: 0 0% 98%;
        --primary: 0 0% 98%;
        --primary-foreground: 0 0% 9%;
        --secondary: 0 0% 14.9%;
        --secondary-foreground: 0 0% 98%;
        --muted: 0 0% 14.9%;
        --muted-foreground: 0 0% 63.9%;
        --accent: 0 0% 14.9%;
        --accent-foreground: 0 0% 98%;
        --destructive: 0 62.8% 30.6%;
        --destructive-foreground: 0 0% 98%;
        --border: 0 0% 14.9%;
        --input: 0 0% 14.9%;
        --ring: 0 0% 83.1%;
        --chart-1: 220 70% 50%;
        --chart-2: 160 60% 45%;
        --chart-3: 30 80% 55%;
        --chart-4: 280 65% 60%;
        --chart-5: 340 75% 55%;
    }
}

@layer base {
    * {
        @apply border-border;
    }

    body {
        @apply bg-background text-foreground;
    }
}



================================================
FILE: resources/js/app.js
================================================
import '../css/app.css';
import './bootstrap';

import { createInertiaApp } from '@inertiajs/vue3';
import { resolvePageComponent } from 'laravel-vite-plugin/inertia-helpers';
import { createApp, h } from 'vue';
import { ZiggyVue } from '../../vendor/tightenco/ziggy';

const appName = import.meta.env.VITE_APP_NAME || 'Laravel';

createInertiaApp({
    title: (title) => `${title} - ${appName}`,
    resolve: (name) =>
        resolvePageComponent(
            `./Pages/${name}.vue`,
            import.meta.glob('./Pages/**/*.vue'),
        ),
    setup({ el, App, props, plugin }) {
        return createApp({ render: () => h(App, props) })
            .use(plugin)
            .use(ZiggyVue)
            .mount(el);
    },
    progress: {
        color: '#4B5563',
    },
});



================================================
FILE: resources/js/bootstrap.js
================================================
import axios from 'axios';
window.axios = axios;

window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';



================================================
FILE: resources/js/ssr.js
================================================
import { createInertiaApp } from '@inertiajs/vue3';
import createServer from '@inertiajs/vue3/server';
import { renderToString } from '@vue/server-renderer';
import { resolvePageComponent } from 'laravel-vite-plugin/inertia-helpers';
import { createSSRApp, h } from 'vue';
import { ZiggyVue } from '../../vendor/tightenco/ziggy';

const appName = import.meta.env.VITE_APP_NAME || 'Laravel';

createServer((page) =>
    createInertiaApp({
        page,
        render: renderToString,
        title: (title) => `${title} - ${appName}`,
        resolve: (name) =>
            resolvePageComponent(
                `./Pages/${name}.vue`,
                import.meta.glob('./Pages/**/*.vue'),
            ),
        setup({ App, props, plugin }) {
            return createSSRApp({ render: () => h(App, props) })
                .use(plugin)
                .use(ZiggyVue, {
                    ...page.props.ziggy,
                    location: new URL(page.props.ziggy.location),
                });
        },
    }),
);



================================================
FILE: resources/js/Components/ApplicationLogo.vue
================================================
<template>
    <svg viewBox="0 0 316 316" xmlns="http://www.w3.org/2000/svg">
        <path
            d="M305.8 81.125C305.77 80.995 305.69 80.885 305.65 80.755C305.56 80.525 305.49 80.285 305.37 80.075C305.29 79.935 305.17 79.815 305.07 79.685C304.94 79.515 304.83 79.325 304.68 79.175C304.55 79.045 304.39 78.955 304.25 78.845C304.09 78.715 303.95 78.575 303.77 78.475L251.32 48.275C249.97 47.495 248.31 47.495 246.96 48.275L194.51 78.475C194.33 78.575 194.19 78.725 194.03 78.845C193.89 78.955 193.73 79.045 193.6 79.175C193.45 79.325 193.34 79.515 193.21 79.685C193.11 79.815 192.99 79.935 192.91 80.075C192.79 80.285 192.71 80.525 192.63 80.755C192.58 80.875 192.51 80.995 192.48 81.125C192.38 81.495 192.33 81.875 192.33 82.265V139.625L148.62 164.795V52.575C148.62 52.185 148.57 51.805 148.47 51.435C148.44 51.305 148.36 51.195 148.32 51.065C148.23 50.835 148.16 50.595 148.04 50.385C147.96 50.245 147.84 50.125 147.74 49.995C147.61 49.825 147.5 49.635 147.35 49.485C147.22 49.355 147.06 49.265 146.92 49.155C146.76 49.025 146.62 48.885 146.44 48.785L93.99 18.585C92.64 17.805 90.98 17.805 89.63 18.585L37.18 48.785C37 48.885 36.86 49.035 36.7 49.155C36.56 49.265 36.4 49.355 36.27 49.485C36.12 49.635 36.01 49.825 35.88 49.995C35.78 50.125 35.66 50.245 35.58 50.385C35.46 50.595 35.38 50.835 35.3 51.065C35.25 51.185 35.18 51.305 35.15 51.435C35.05 51.805 35 52.185 35 52.575V232.235C35 233.795 35.84 235.245 37.19 236.025L142.1 296.425C142.33 296.555 142.58 296.635 142.82 296.725C142.93 296.765 143.04 296.835 143.16 296.865C143.53 296.965 143.9 297.015 144.28 297.015C144.66 297.015 145.03 296.965 145.4 296.865C145.5 296.835 145.59 296.775 145.69 296.745C145.95 296.655 146.21 296.565 146.45 296.435L251.36 236.035C252.72 235.255 253.55 233.815 253.55 232.245V174.885L303.81 145.945C305.17 145.165 306 143.725 306 142.155V82.265C305.95 81.875 305.89 81.495 305.8 81.125ZM144.2 227.205L100.57 202.515L146.39 176.135L196.66 147.195L240.33 172.335L208.29 190.625L144.2 227.205ZM244.75 114.995V164.795L226.39 154.225L201.03 139.625V89.825L219.39 100.395L244.75 114.995ZM249.12 57.105L292.81 82.265L249.12 107.425L205.43 82.265L249.12 57.105ZM114.49 184.425L96.13 194.995V85.305L121.49 70.705L139.85 60.135V169.815L114.49 184.425ZM91.76 27.425L135.45 52.585L91.76 77.745L48.07 52.585L91.76 27.425ZM43.67 60.135L62.03 70.705L87.39 85.305V202.545V202.555V202.565C87.39 202.735 87.44 202.895 87.46 203.055C87.49 203.265 87.49 203.485 87.55 203.695V203.705C87.6 203.875 87.69 204.035 87.76 204.195C87.84 204.375 87.89 204.575 87.99 204.745C87.99 204.745 87.99 204.755 88 204.755C88.09 204.905 88.22 205.035 88.33 205.175C88.45 205.335 88.55 205.495 88.69 205.635L88.7 205.645C88.82 205.765 88.98 205.855 89.12 205.965C89.28 206.085 89.42 206.225 89.59 206.325C89.6 206.325 89.6 206.325 89.61 206.335C89.62 206.335 89.62 206.345 89.63 206.345L139.87 234.775V285.065L43.67 229.705V60.135ZM244.75 229.705L148.58 285.075V234.775L219.8 194.115L244.75 179.875V229.705ZM297.2 139.625L253.49 164.795V114.995L278.85 100.395L297.21 89.825V139.625H297.2Z"
        />
    </svg>
</template>



================================================
FILE: resources/js/Components/Checkbox.vue
================================================
<script setup>
import { computed } from 'vue';

const emit = defineEmits(['update:checked']);

const props = defineProps({
    checked: {
        type: [Array, Boolean],
        required: true,
    },
    value: {
        default: null,
    },
});

const proxyChecked = computed({
    get() {
        return props.checked;
    },

    set(val) {
        emit('update:checked', val);
    },
});
</script>

<template>
    <input
        type="checkbox"
        :value="value"
        v-model="proxyChecked"
        class="rounded border-gray-300 text-indigo-600 shadow-sm focus:ring-indigo-500 dark:border-gray-700 dark:bg-gray-900 dark:focus:ring-indigo-600 dark:focus:ring-offset-gray-800"
    />
</template>



================================================
FILE: resources/js/Components/DangerButton.vue
================================================
<template>
    <button
        class="inline-flex items-center rounded-md border border-transparent bg-red-600 px-4 py-2 text-xs font-semibold uppercase tracking-widest text-white transition duration-150 ease-in-out hover:bg-red-500 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 active:bg-red-700 dark:focus:ring-offset-gray-800"
    >
        <slot />
    </button>
</template>



================================================
FILE: resources/js/Components/Dropdown.vue
================================================
<script setup>
import { computed, onMounted, onUnmounted, ref } from 'vue';

const props = defineProps({
    align: {
        type: String,
        default: 'right',
    },
    width: {
        type: String,
        default: '48',
    },
    contentClasses: {
        type: String,
        default: 'py-1 bg-white dark:bg-gray-700',
    },
});

const closeOnEscape = (e) => {
    if (open.value && e.key === 'Escape') {
        open.value = false;
    }
};

onMounted(() => document.addEventListener('keydown', closeOnEscape));
onUnmounted(() => document.removeEventListener('keydown', closeOnEscape));

const widthClass = computed(() => {
    return {
        48: 'w-48',
    }[props.width.toString()];
});

const alignmentClasses = computed(() => {
    if (props.align === 'left') {
        return 'ltr:origin-top-left rtl:origin-top-right start-0';
    } else if (props.align === 'right') {
        return 'ltr:origin-top-right rtl:origin-top-left end-0';
    } else {
        return 'origin-top';
    }
});

const open = ref(false);
</script>

<template>
    <div class="relative">
        <div @click="open = !open">
            <slot name="trigger" />
        </div>

        <!-- Full Screen Dropdown Overlay -->
        <div
            v-show="open"
            class="fixed inset-0 z-40"
            @click="open = false"
        ></div>

        <Transition
            enter-active-class="transition ease-out duration-200"
            enter-from-class="opacity-0 scale-95"
            enter-to-class="opacity-100 scale-100"
            leave-active-class="transition ease-in duration-75"
            leave-from-class="opacity-100 scale-100"
            leave-to-class="opacity-0 scale-95"
        >
            <div
                v-show="open"
                class="absolute z-50 mt-2 rounded-md shadow-lg"
                :class="[widthClass, alignmentClasses]"
                style="display: none"
                @click="open = false"
            >
                <div
                    class="rounded-md ring-1 ring-black ring-opacity-5"
                    :class="contentClasses"
                >
                    <slot name="content" />
                </div>
            </div>
        </Transition>
    </div>
</template>



================================================
FILE: resources/js/Components/DropdownLink.vue
================================================
<script setup>
import { Link } from '@inertiajs/vue3';

defineProps({
    href: {
        type: String,
        required: true,
    },
});
</script>

<template>
    <Link
        :href="href"
        class="block w-full px-4 py-2 text-start text-sm leading-5 text-gray-700 transition duration-150 ease-in-out hover:bg-gray-100 focus:bg-gray-100 focus:outline-none dark:text-gray-300 dark:hover:bg-gray-800 dark:focus:bg-gray-800"
    >
        <slot />
    </Link>
</template>



================================================
FILE: resources/js/Components/InputError.vue
================================================
<script setup>
defineProps({
    message: {
        type: String,
    },
});
</script>

<template>
    <div v-show="message">
        <p class="text-sm text-red-600 dark:text-red-400">
            {{ message }}
        </p>
    </div>
</template>



================================================
FILE: resources/js/Components/InputLabel.vue
================================================
<script setup>
defineProps({
    value: {
        type: String,
    },
});
</script>

<template>
    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
        <span v-if="value">{{ value }}</span>
        <span v-else><slot /></span>
    </label>
</template>



================================================
FILE: resources/js/Components/Modal.vue
================================================
<script setup>
import { computed, onMounted, onUnmounted, ref, watch } from 'vue';

const props = defineProps({
    show: {
        type: Boolean,
        default: false,
    },
    maxWidth: {
        type: String,
        default: '2xl',
    },
    closeable: {
        type: Boolean,
        default: true,
    },
});

const emit = defineEmits(['close']);
const dialog = ref();
const showSlot = ref(props.show);

watch(
    () => props.show,
    () => {
        if (props.show) {
            document.body.style.overflow = 'hidden';
            showSlot.value = true;

            dialog.value?.showModal();
        } else {
            document.body.style.overflow = '';

            setTimeout(() => {
                dialog.value?.close();
                showSlot.value = false;
            }, 200);
        }
    },
);

const close = () => {
    if (props.closeable) {
        emit('close');
    }
};

const closeOnEscape = (e) => {
    if (e.key === 'Escape') {
        e.preventDefault();

        if (props.show) {
            close();
        }
    }
};

onMounted(() => document.addEventListener('keydown', closeOnEscape));

onUnmounted(() => {
    document.removeEventListener('keydown', closeOnEscape);

    document.body.style.overflow = '';
});

const maxWidthClass = computed(() => {
    return {
        sm: 'sm:max-w-sm',
        md: 'sm:max-w-md',
        lg: 'sm:max-w-lg',
        xl: 'sm:max-w-xl',
        '2xl': 'sm:max-w-2xl',
    }[props.maxWidth];
});
</script>

<template>
    <dialog
        class="z-50 m-0 min-h-full min-w-full overflow-y-auto bg-transparent backdrop:bg-transparent"
        ref="dialog"
    >
        <div
            class="fixed inset-0 z-50 overflow-y-auto px-4 py-6 sm:px-0"
            scroll-region
        >
            <Transition
                enter-active-class="ease-out duration-300"
                enter-from-class="opacity-0"
                enter-to-class="opacity-100"
                leave-active-class="ease-in duration-200"
                leave-from-class="opacity-100"
                leave-to-class="opacity-0"
            >
                <div
                    v-show="show"
                    class="fixed inset-0 transform transition-all"
                    @click="close"
                >
                    <div
                        class="absolute inset-0 bg-gray-500 opacity-75 dark:bg-gray-900"
                    />
                </div>
            </Transition>

            <Transition
                enter-active-class="ease-out duration-300"
                enter-from-class="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
                enter-to-class="opacity-100 translate-y-0 sm:scale-100"
                leave-active-class="ease-in duration-200"
                leave-from-class="opacity-100 translate-y-0 sm:scale-100"
                leave-to-class="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
            >
                <div
                    v-show="show"
                    class="mb-6 transform overflow-hidden rounded-lg bg-white shadow-xl transition-all sm:mx-auto sm:w-full dark:bg-gray-800"
                    :class="maxWidthClass"
                >
                    <slot v-if="showSlot" />
                </div>
            </Transition>
        </div>
    </dialog>
</template>



================================================
FILE: resources/js/Components/NavLink.vue
================================================
<script setup>
import { computed } from 'vue';
import { Link } from '@inertiajs/vue3';

const props = defineProps({
    href: {
        type: String,
        required: true,
    },
    active: {
        type: Boolean,
    },
});

const classes = computed(() =>
    props.active
        ? 'inline-flex items-center px-1 pt-1 border-b-2 border-indigo-400 dark:border-indigo-600 text-sm font-medium leading-5 text-gray-900 dark:text-gray-100 focus:outline-none focus:border-indigo-700 transition duration-150 ease-in-out'
        : 'inline-flex items-center px-1 pt-1 border-b-2 border-transparent text-sm font-medium leading-5 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:border-gray-300 dark:hover:border-gray-700 focus:outline-none focus:text-gray-700 dark:focus:text-gray-300 focus:border-gray-300 dark:focus:border-gray-700 transition duration-150 ease-in-out',
);
</script>

<template>
    <Link :href="href" :class="classes">
        <slot />
    </Link>
</template>



================================================
FILE: resources/js/Components/PrimaryButton.vue
================================================
<template>
    <button
        class="inline-flex items-center rounded-md border border-transparent bg-gray-800 px-4 py-2 text-xs font-semibold uppercase tracking-widest text-white transition duration-150 ease-in-out hover:bg-gray-700 focus:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 active:bg-gray-900 dark:bg-gray-200 dark:text-gray-800 dark:hover:bg-white dark:focus:bg-white dark:focus:ring-offset-gray-800 dark:active:bg-gray-300"
    >
        <slot />
    </button>
</template>



================================================
FILE: resources/js/Components/ResponsiveNavLink.vue
================================================
<script setup>
import { computed } from 'vue';
import { Link } from '@inertiajs/vue3';

const props = defineProps({
    href: {
        type: String,
        required: true,
    },
    active: {
        type: Boolean,
    },
});

const classes = computed(() =>
    props.active
        ? 'block w-full ps-3 pe-4 py-2 border-l-4 border-indigo-400 dark:border-indigo-600 text-start text-base font-medium text-indigo-700 dark:text-indigo-300 bg-indigo-50 dark:bg-indigo-900/50 focus:outline-none focus:text-indigo-800 dark:focus:text-indigo-200 focus:bg-indigo-100 dark:focus:bg-indigo-900 focus:border-indigo-700 dark:focus:border-indigo-300 transition duration-150 ease-in-out'
        : 'block w-full ps-3 pe-4 py-2 border-l-4 border-transparent text-start text-base font-medium text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-700 hover:border-gray-300 dark:hover:border-gray-600 focus:outline-none focus:text-gray-800 dark:focus:text-gray-200 focus:bg-gray-50 dark:focus:bg-gray-700 focus:border-gray-300 dark:focus:border-gray-600 transition duration-150 ease-in-out',
);
</script>

<template>
    <Link :href="href" :class="classes">
        <slot />
    </Link>
</template>



================================================
FILE: resources/js/Components/SecondaryButton.vue
================================================
<script setup>
defineProps({
    type: {
        type: String,
        default: 'button',
    },
});
</script>

<template>
    <button
        :type="type"
        class="inline-flex items-center rounded-md border border-gray-300 bg-white px-4 py-2 text-xs font-semibold uppercase tracking-widest text-gray-700 shadow-sm transition duration-150 ease-in-out hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-25 dark:border-gray-500 dark:bg-gray-800 dark:text-gray-300 dark:hover:bg-gray-700 dark:focus:ring-offset-gray-800"
    >
        <slot />
    </button>
</template>



================================================
FILE: resources/js/Components/Sidebar.vue
================================================
<script setup>
import { ref, computed } from 'vue'
import { Link } from '@inertiajs/vue3'
import { cn } from '@/lib/utils'
import {
  Home,
  ChefHat,
  Calendar,
  Users,
  Menu,
  X
} from 'lucide-vue-next'
import { Button } from '@/Components/ui/button'
import { Separator } from '@/Components/ui/separator'

const isCollapsed = ref(false)
const isMobileMenuOpen = ref(false)

const navigationItems = [
  {
    name: 'Dashboard',
    href: '/dashboard',
    routeName: 'dashboard',
    icon: Home,
    current: () => route().current('dashboard')
  },
  {
    name: 'Przepisy',
    href: '/recipes',
    routeName: 'recipes.index',
    icon: ChefHat,
    current: () => route().current('recipes.*')
  },
  {
    name: 'Jad≈Çospisy',
    href: '/meal-plans',
    routeName: 'meal-plans.index',
    icon: Calendar,
    current: () => route().current('meal-plans.*')
  },
  {
    name: 'Cz≈Çonkowie rodziny',
    href: '/family-members',
    routeName: 'family-members.index',
    icon: Users,
    current: () => route().current('family-members.*')
  }
]

const toggleCollapse = () => {
  isCollapsed.value = !isCollapsed.value
}

const toggleMobileMenu = () => {
  isMobileMenuOpen.value = !isMobileMenuOpen.value
}

const closeMobileMenu = () => {
  isMobileMenuOpen.value = false
}
</script>

<template>
  <!-- Mobile menu button -->
  <div class="fixed top-4 left-4 z-50 lg:hidden">
    <Button
      variant="outline"
      size="icon"
      @click="toggleMobileMenu"
      :aria-label="isMobileMenuOpen ? 'Zamknij menu' : 'Otw√≥rz menu'"
    >
      <Menu v-if="!isMobileMenuOpen" class="h-4 w-4" />
      <X v-else class="h-4 w-4" />
    </Button>
  </div>

  <!-- Mobile overlay -->
  <div
    v-if="isMobileMenuOpen"
    class="fixed inset-0 z-40 bg-black/50 lg:hidden"
    @click="closeMobileMenu"
  />

  <!-- Sidebar -->
  <aside
    :class="cn(
      'fixed left-0 top-0 z-40 h-screen bg-white shadow-lg transition-all duration-300 dark:bg-gray-900',
      {
        // Mobile
        'w-64 translate-x-0': isMobileMenuOpen,
        'w-64 -translate-x-full': !isMobileMenuOpen,
        // Desktop
        'lg:translate-x-0 lg:w-64': !isCollapsed,
        'lg:translate-x-0 lg:w-16': isCollapsed
      }
    )"
    role="navigation"
    aria-label="G≈Ç√≥wna nawigacja"
  >
    <div class="flex h-full flex-col">
      <!-- Logo section -->
      <div class="flex items-center justify-between p-4">
                <Link
          href="/dashboard"
          class="flex items-center space-x-2"
          @click="closeMobileMenu"
        >
          <ChefHat class="h-8 w-8 text-primary" />
          <span
            v-if="!isCollapsed || isMobileMenuOpen"
            class="text-xl font-bold text-gray-900 dark:text-white"
          >
            Menu Maker
          </span>
        </Link>

        <!-- Desktop collapse button -->
        <Button
          v-if="!isMobileMenuOpen"
          variant="ghost"
          size="icon"
          @click="toggleCollapse"
          class="hidden lg:flex"
          :aria-label="isCollapsed ? 'Rozwi≈Ñ sidebar' : 'Zwi≈Ñ sidebar'"
        >
          <Menu class="h-4 w-4" />
        </Button>
      </div>

      <Separator />

      <!-- Navigation items -->
      <nav class="flex-1 space-y-2 p-4">
        <Link
          v-for="item in navigationItems"
          :key="item.name"
          :href="item.href"
          @click="closeMobileMenu"
          :class="cn(
            'flex items-center rounded-lg px-3 py-2 text-sm font-medium transition-colors',
            'hover:bg-gray-100 hover:text-gray-900 dark:hover:bg-gray-800 dark:hover:text-white',
            'focus:bg-gray-100 focus:text-gray-900 focus:outline-none dark:focus:bg-gray-800 dark:focus:text-white',
            {
              'bg-gray-100 text-gray-900 dark:bg-gray-800 dark:text-white': item.current(),
              'text-gray-600 dark:text-gray-400': !item.current(),
              'justify-center': isCollapsed && !isMobileMenuOpen,
              'space-x-3': !isCollapsed || isMobileMenuOpen
            }
          )"
          :aria-current="item.current() ? 'page' : undefined"
        >
          <component :is="item.icon" class="h-5 w-5 flex-shrink-0" />
          <span
            v-if="!isCollapsed || isMobileMenuOpen"
            class="truncate"
          >
            {{ item.name }}
          </span>
        </Link>
      </nav>

      <Separator />

      <!-- Footer section -->
      <div class="p-4">
        <div
          v-if="!isCollapsed || isMobileMenuOpen"
          class="text-xs text-gray-500 dark:text-gray-400"
        >
          Menu Maker v1.0
        </div>
      </div>
    </div>
  </aside>

  <!-- Main content spacer -->
  <div
    :class="cn(
      'transition-all duration-300',
      {
        'lg:ml-64': !isCollapsed,
        'lg:ml-16': isCollapsed
      }
    )"
  >
    <slot />
  </div>
</template>



================================================
FILE: resources/js/Components/TextInput.vue
================================================
<script setup>
import { onMounted, ref } from 'vue';

const model = defineModel({
    type: String,
    required: true,
});

const input = ref(null);

onMounted(() => {
    if (input.value.hasAttribute('autofocus')) {
        input.value.focus();
    }
});

defineExpose({ focus: () => input.value.focus() });
</script>

<template>
    <input
        class="rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 dark:border-gray-700 dark:bg-gray-900 dark:text-gray-300 dark:focus:border-indigo-600 dark:focus:ring-indigo-600"
        v-model="model"
        ref="input"
    />
</template>



================================================
FILE: resources/js/Components/MealPlans/ActionDropdown.vue
================================================
<template>
  <DropdownMenu>
    <DropdownMenuTrigger as-child>
      <Button variant="ghost" size="sm" class="h-8 w-8 p-0">
        <MoreHorizontal class="h-4 w-4" />
        <span class="sr-only">Open menu</span>
      </Button>
    </DropdownMenuTrigger>
    <DropdownMenuContent align="end" class="w-56">
      <!-- View Details -->
      <DropdownMenuItem @click="handleViewDetails">
        <Eye class="mr-2 h-4 w-4" />
        View Details
      </DropdownMenuItem>

      <!-- Download PDF -->
      <DropdownMenuItem
        :disabled="!canDownloadPdf"
        @click="handleDownloadPdf"
      >
        <Download class="mr-2 h-4 w-4" />
        Download PDF
      </DropdownMenuItem>

      <DropdownMenuSeparator />

      <!-- Regenerate -->
      <DropdownMenuItem
        :disabled="!canRegenerate"
        @click="handleRegenerateClick"
      >
        <RefreshCw class="mr-2 h-4 w-4" />
        Regenerate
      </DropdownMenuItem>

      <!-- Delete -->
      <DropdownMenuItem
        :disabled="!canDelete"
        @click="handleDeleteClick"
        class="text-red-600 focus:text-red-600 focus:bg-red-50"
      >
        <Trash2 class="mr-2 h-4 w-4" />
        Delete
      </DropdownMenuItem>
    </DropdownMenuContent>
  </DropdownMenu>

  <!-- Confirm Dialogs -->
  <ConfirmDialog
    v-if="showRegenerateDialog"
    title="Regenerate Meal Plan"
    description="This will create a new meal plan with different recipes. The current meals will be replaced. Are you sure you want to continue?"
    confirm-text="Regenerate"
    @confirm="handleRegenerateConfirm"
    @cancel="showRegenerateDialog = false"
  />

  <ConfirmDialog
    v-if="showDeleteDialog"
    title="Delete Meal Plan"
    description="This action cannot be undone. This will permanently delete the meal plan and all associated data."
    confirm-text="Delete"
    variant="destructive"
    @confirm="handleDeleteConfirm"
    @cancel="showDeleteDialog = false"
  />
</template>

<script setup lang="ts">
import { ref, computed } from 'vue'
import { router } from '@inertiajs/vue3'
import {
  MoreHorizontal,
  Eye,
  Download,
  RefreshCw,
  Trash2
} from 'lucide-vue-next'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/Components/ui/dropdown-menu'
import { Button } from '@/Components/ui/button'
import { toast } from 'vue-sonner'
// Local type definition
interface MealPlanListItem {
  id: number
  start_date: string
  end_date: string
  status: string
  created_at: string
  updated_at: string
  meals_count: number
  logs_count: number
  links: {
    self: string
  }
}
import ConfirmDialog from '@/Components/MealPlans/ConfirmDialog.vue'

interface Props {
  item: MealPlanListItem
}

const props = defineProps<Props>()
// toast is imported directly from vue-sonner

// Dialog state
const showRegenerateDialog = ref(false)
const showDeleteDialog = ref(false)

// Action availability based on status
const canDownloadPdf = computed(() => props.item.status === 'done')
const canRegenerate = computed(() =>
  props.item.status === 'done' || props.item.status === 'error'
)
const canDelete = computed(() => props.item.status !== 'processing')

// Handle view details
const handleViewDetails = () => {
  router.visit(props.item.links.self)
}

// Handle PDF download
const handleDownloadPdf = () => {
  if (!canDownloadPdf.value) return

  const pdfUrl = route('meal-plans.pdf', { meal_plan: props.item.id })
  window.open(pdfUrl, '_blank')
}

// Handle regenerate confirmation dialog
const handleRegenerateClick = () => {
  if (!canRegenerate.value) return
  showRegenerateDialog.value = true
}

// Handle regenerate confirm
const handleRegenerateConfirm = async () => {
  showRegenerateDialog.value = false

  try {
    await router.put(
      route('meal-plans.update', { meal_plan: props.item.id }),
      { regenerate: true },
      {
        preserveScroll: true,
        onSuccess: () => {
          toast.success('Meal plan regeneration started successfully.')
        },
        onError: (errors) => {
          console.error('Regeneration failed:', errors)

          // Handle specific error cases
          if (errors.message) {
            toast.error(errors.message)
          } else {
            toast.error('Failed to regenerate meal plan. Please try again.')
          }
        }
      }
    )
  } catch (error) {
    console.error('Regeneration error:', error)
    toast.error('An unexpected error occurred. Please try again.')
  }
}

// Handle delete confirmation dialog
const handleDeleteClick = () => {
  if (!canDelete.value) return
  showDeleteDialog.value = true
}

// Handle delete confirm
const handleDeleteConfirm = async () => {
  showDeleteDialog.value = false

  try {
    await router.delete(
      route('meal-plans.destroy', { meal_plan: props.item.id }),
      {
        preserveScroll: true,
        onSuccess: () => {
          toast.success('Meal plan deleted successfully.')
        },
        onError: (errors) => {
          console.error('Delete failed:', errors)

          if (errors.message) {
            toast.error(errors.message)
          } else {
            toast.error('Failed to delete meal plan. Please try again.')
          }
        }
      }
    )
  } catch (error) {
    console.error('Delete error:', error)
    toast.error('An unexpected error occurred. Please try again.')
  }
}
</script>



================================================
FILE: resources/js/Components/MealPlans/ConfirmDialog.vue
================================================
<template>
  <Dialog :open="true" @update:open="handleClose">
    <DialogContent class="sm:max-w-md">
      <DialogHeader>
        <DialogTitle>{{ title }}</DialogTitle>
        <DialogDescription v-if="description">
          {{ description }}
        </DialogDescription>
      </DialogHeader>

      <DialogFooter class="flex flex-col-reverse sm:flex-row sm:justify-end gap-2">
        <Button variant="outline" @click="handleCancel">
          Cancel
        </Button>
        <Button
          :variant="variant"
          @click="handleConfirm"
          :class="variant === 'destructive' ? 'bg-red-600 hover:bg-red-700' : ''"
        >
          {{ confirmText }}
        </Button>
      </DialogFooter>
    </DialogContent>
  </Dialog>
</template>

<script setup lang="ts">
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/Components/ui/dialog'
import { Button } from '@/Components/ui/button'

interface Props {
  title: string
  description?: string
  confirmText?: string
  variant?: 'destructive' | 'default'
}

interface Emits {
  (e: 'confirm'): void
  (e: 'cancel'): void
}

const props = withDefaults(defineProps<Props>(), {
  confirmText: 'Confirm',
  variant: 'default'
})

const emit = defineEmits<Emits>()

// Handle confirm button click
const handleConfirm = () => {
  emit('confirm')
}

// Handle cancel button click or dialog close
const handleCancel = () => {
  emit('cancel')
}

// Handle dialog close (via overlay or escape)
const handleClose = (open: boolean) => {
  if (!open) {
    emit('cancel')
  }
}
</script>



================================================
FILE: resources/js/Components/MealPlans/FiltersBar.vue
================================================
<template>
  <div class="flex flex-col gap-4 sm:flex-row sm:items-center sm:justify-between p-4 bg-gray-50 rounded-lg border">
    <div class="flex flex-col gap-4 sm:flex-row sm:items-center">
      <!-- Status Filter -->
      <div class="flex items-center gap-2">
        <label for="status-filter" class="text-sm font-medium text-gray-700 whitespace-nowrap">
          Status:
        </label>
        <StatusFilter
          id="status-filter"
          :model-value="value.status || ''"
          :options="statuses"
          @update:model-value="handleStatusChange"
        />
      </div>

      <!-- Per Page Select -->
      <div class="flex items-center gap-2">
        <label for="per-page-select" class="text-sm font-medium text-gray-700 whitespace-nowrap">
          Per page:
        </label>
        <PerPageSelect
          id="per-page-select"
          :model-value="value.perPage || 15"
          @update:model-value="handlePerPageChange"
        />
      </div>
    </div>

    <!-- Results Counter -->
    <div class="text-sm text-gray-600">
      <span v-if="resultsCount > 0">
        Showing {{ resultsCount }} {{ resultsCount === 1 ? 'result' : 'results' }}
      </span>
      <span v-else>
        No results found
      </span>
    </div>
  </div>
</template>

<script setup lang="ts">
import { computed } from 'vue'
// Local type definitions
type MealPlanStatus = 'pending' | 'processing' | 'done' | 'error'

interface StatusOption {
  value: MealPlanStatus
  label: string
}

interface FiltersState {
  status?: MealPlanStatus | ''
  sort?: 'start_date' | 'end_date' | 'status' | 'created_at'
  direction?: 'asc' | 'desc'
  perPage?: number
}
import StatusFilter from '@/Components/MealPlans/StatusFilter.vue'
import PerPageSelect from '@/Components/MealPlans/PerPageSelect.vue'

interface Props {
  value: FiltersState
  statuses: StatusOption[]
  resultsCount?: number
}

interface Emits {
  (e: 'update:value', value: FiltersState): void
}

const props = withDefaults(defineProps<Props>(), {
  resultsCount: 0
})

const emit = defineEmits<Emits>()

// Handle status filter change
const handleStatusChange = (status: string) => {
  emit('update:value', {
    ...props.value,
    status: status || undefined
  })
}

// Handle per page change
const handlePerPageChange = (perPage: number) => {
  emit('update:value', {
    ...props.value,
    perPage
  })
}
</script>



================================================
FILE: resources/js/Components/MealPlans/MealPlanRow.vue
================================================
<template>
  <TableRow>
    <!-- Date Range -->
    <TableCell class="font-medium">
      <div class="text-sm font-medium text-gray-900 dark:text-gray-100">
        {{ formatDateRange(item.start_date, item.end_date) }}
      </div>
      <div class="text-sm text-gray-500 dark:text-gray-400">
        {{ formatDuration(item.start_date, item.end_date) }}
      </div>
    </TableCell>

    <!-- Status -->
    <TableCell>
      <StatusTag :value="item.status" />
    </TableCell>

    <!-- Meals Count -->
    <TableCell class="text-gray-600 dark:text-gray-300">
      <div class="flex items-center gap-2">
        <ChefHat class="h-4 w-4 text-gray-400 dark:text-gray-500" />
        <span class="text-sm">
          {{ item.meals_count }}
        </span>
      </div>
    </TableCell>

    <!-- Logs Count -->
    <TableCell class="text-gray-600 dark:text-gray-300">
      <div class="flex items-center gap-2">
        <FileText class="h-4 w-4 text-gray-400 dark:text-gray-500" />
        <span class="text-sm">
          {{ item.logs_count }}
        </span>
      </div>
    </TableCell>

    <!-- Created At -->
    <TableCell class="text-gray-600 dark:text-gray-300">
      <div class="text-sm">
        {{ formatDateTime(item.created_at) }}
      </div>
    </TableCell>

    <!-- Actions -->
    <TableCell class="text-right">
      <ActionDropdown :item="item" />
    </TableCell>
  </TableRow>
</template>

<script setup lang="ts">
import { ChefHat, FileText } from 'lucide-vue-next'
import { TableRow, TableCell } from '@/Components/ui/table'
import StatusTag from '@/Components/MealPlans/StatusTag.vue'
import ActionDropdown from '@/Components/MealPlans/ActionDropdown.vue'

// Local type definition
interface MealPlanListItem {
  id: number
  start_date: string
  end_date: string
  status: string
  created_at: string
  updated_at: string
  meals_count: number
  logs_count: number
  links: {
    self: string
  }
}

interface Props {
  item: MealPlanListItem
}

const props = defineProps<Props>()

// Format date range display
const formatDateRange = (startDate: string, endDate: string): string => {
  const start = new Date(startDate).toLocaleDateString('en-GB', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  })
  const end = new Date(endDate).toLocaleDateString('en-GB', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  })
  return `${start} - ${end}`
}

// Calculate and format duration
const formatDuration = (startDate: string, endDate: string): string => {
  const start = new Date(startDate)
  const end = new Date(endDate)
  const diffTime = Math.abs(end.getTime() - start.getTime())
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1 // +1 because it's inclusive
  return `${diffDays} ${diffDays === 1 ? 'day' : 'days'}`
}

// Format created date and time
const formatDateTime = (dateTime: string): string => {
  return new Date(dateTime).toLocaleDateString('en-GB', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  })
}
</script>



================================================
FILE: resources/js/Components/MealPlans/MealPlanTable.vue
================================================
<template>
  <div class="space-y-4">
    <!-- Table -->
    <div class="overflow-hidden rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900">
      <Table>
        <TableHeader>
          <TableRow class="bg-gray-50 dark:bg-gray-800">
            <TableHead class="w-[200px] font-semibold">
              <SortableHeader
                field="start_date"
                :current-sort="{ field: sort, direction }"
                @sort-change="handleSortChange"
              >
                Date Range
              </SortableHeader>
            </TableHead>
            <TableHead class="w-[120px] font-semibold">
              <SortableHeader
                field="status"
                :current-sort="{ field: sort, direction }"
                @sort-change="handleSortChange"
              >
                Status
              </SortableHeader>
            </TableHead>
            <TableHead class="w-[100px] font-semibold">Meals</TableHead>
            <TableHead class="w-[100px] font-semibold">Logs</TableHead>
            <TableHead class="w-[120px] font-semibold">
              <SortableHeader
                field="created_at"
                :current-sort="{ field: sort, direction }"
                @sort-change="handleSortChange"
              >
                Created
              </SortableHeader>
            </TableHead>
            <TableHead class="w-[120px] text-right font-semibold">Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          <MealPlanRow
            v-for="item in items"
            :key="item.id"
            :item="item"
          />
          <TableRow v-if="items.length === 0">
            <TableCell :colspan="6" class="text-center py-12 text-gray-500 dark:text-gray-400">
              <div class="flex flex-col items-center gap-2">
                <Calendar class="h-12 w-12 text-gray-300" />
                <p class="text-lg font-medium">No meal plans found</p>
                <p class="text-sm">Create your first meal plan to get started.</p>
              </div>
            </TableCell>
          </TableRow>
        </TableBody>
      </Table>
    </div>
  </div>
</template>

<script setup lang="ts">
import { Calendar } from 'lucide-vue-next'
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/Components/ui/table'
import SortableHeader from '@/Components/MealPlans/SortableHeader.vue'
import MealPlanRow from '@/Components/MealPlans/MealPlanRow.vue'

// Local type definitions
type SortDirection = 'asc' | 'desc'

interface MealPlanListItem {
  id: number
  start_date: string
  end_date: string
  status: string
  created_at: string
  updated_at: string
  meals_count: number
  logs_count: number
  links: {
    self: string
  }
}

interface Props {
  items: MealPlanListItem[]
  sort?: string
  direction?: SortDirection
}

interface Emits {
  (e: 'sort-change', value: { field: string, direction: SortDirection }): void
}

const props = defineProps<Props>()
const emit = defineEmits<Emits>()

// Handle sort change from table headers
const handleSortChange = ({ field, direction }: { field: string, direction: SortDirection }) => {
  // Validate sort field
  const allowedSortFields = ['start_date', 'end_date', 'status', 'created_at']

  if (allowedSortFields.includes(field)) {
    emit('sort-change', { field, direction })
  }
}
</script>



================================================
FILE: resources/js/Components/MealPlans/PerPageSelect.vue
================================================
<template>
  <Select :model-value="modelValue.toString()" @update:model-value="handleChange">
    <SelectTrigger class="w-20">
      <SelectValue />
    </SelectTrigger>
    <SelectContent>
      <SelectItem
        v-for="option in perPageOptions"
        :key="option"
        :value="option.toString()"
      >
        {{ option }}
      </SelectItem>
    </SelectContent>
  </Select>
</template>

<script setup lang="ts">
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/Components/ui/select'

interface Props {
  modelValue: number
}

interface Emits {
  (e: 'update:modelValue', value: number): void
}

const props = defineProps<Props>()
const emit = defineEmits<Emits>()

// Available per page options
const perPageOptions = [5, 10, 15, 25, 50, 100]

// Handle per page change with validation
const handleChange = (value: string) => {
  const numericValue = parseInt(value, 10)

  // Validate range
  if (perPageOptions.includes(numericValue)) {
    emit('update:modelValue', numericValue)
  }
}
</script>



================================================
FILE: resources/js/Components/MealPlans/ServerPagination.vue
================================================
<template>
  <div v-if="meta.last_page > 1" class="flex items-center justify-between px-4 py-3 bg-white border-t border-gray-200 sm:px-6">
    <!-- Mobile view -->
    <div class="flex justify-between flex-1 sm:hidden">
      <Button
        v-if="links.prev"
        variant="outline"
        size="sm"
        @click="navigateToPage(links.prev)"
      >
        Previous
      </Button>
      <div v-else></div>

      <div class="flex items-center text-sm text-gray-700">
        Page {{ meta.current_page }} of {{ meta.last_page }}
      </div>

      <Button
        v-if="links.next"
        variant="outline"
        size="sm"
        @click="navigateToPage(links.next)"
      >
        Next
      </Button>
      <div v-else></div>
    </div>

    <!-- Desktop view -->
    <div class="hidden sm:flex sm:flex-1 sm:items-center sm:justify-between">
      <!-- Results info -->
      <div>
        <p class="text-sm text-gray-700">
          Showing
          <span class="font-medium">{{ meta.from || 0 }}</span>
          to
          <span class="font-medium">{{ meta.to || 0 }}</span>
          of
          <span class="font-medium">{{ meta.total }}</span>
          results
        </p>
      </div>

      <!-- Pagination controls -->
      <div class="flex items-center gap-2">
        <!-- First page -->
        <Button
          v-if="links.first && meta.current_page > 2"
          variant="outline"
          size="sm"
          @click="navigateToPage(links.first)"
          class="px-2"
        >
          <ChevronsLeft class="h-4 w-4" />
          <span class="sr-only">First page</span>
        </Button>

        <!-- Previous page -->
        <Button
          v-if="links.prev"
          variant="outline"
          size="sm"
          @click="navigateToPage(links.prev)"
          class="px-2"
        >
          <ChevronLeft class="h-4 w-4" />
          <span class="sr-only">Previous page</span>
        </Button>

        <!-- Page numbers -->
        <div class="flex items-center gap-1">
          <Button
            v-for="page in visiblePages"
            :key="page"
            :variant="page === meta.current_page ? 'default' : 'outline'"
            size="sm"
            @click="navigateToPage(buildPageUrl(page))"
            class="px-3"
            :class="page === meta.current_page ? 'bg-primary text-primary-foreground' : ''"
          >
            {{ page }}
          </Button>
        </div>

        <!-- Next page -->
        <Button
          v-if="links.next"
          variant="outline"
          size="sm"
          @click="navigateToPage(links.next)"
          class="px-2"
        >
          <ChevronRight class="h-4 w-4" />
          <span class="sr-only">Next page</span>
        </Button>

        <!-- Last page -->
        <Button
          v-if="links.last && meta.current_page < meta.last_page - 1"
          variant="outline"
          size="sm"
          @click="navigateToPage(links.last)"
          class="px-2"
        >
          <ChevronsRight class="h-4 w-4" />
          <span class="sr-only">Last page</span>
        </Button>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { computed } from 'vue'
import { router } from '@inertiajs/vue3'
import {
  ChevronLeft,
  ChevronRight,
  ChevronsLeft,
  ChevronsRight
} from 'lucide-vue-next'
import { Button } from '@/Components/ui/button'
// Local type definitions
interface PaginationMeta {
  current_page: number
  last_page: number
  per_page: number
  total: number
  from: number | null
  to: number | null
}

interface PaginationLinks {
  first: string | null
  last: string | null
  prev: string | null
  next: string | null
}

interface Props {
  links: PaginationLinks
  meta: PaginationMeta
}

const props = defineProps<Props>()

// Calculate visible page numbers (show current page ¬± 2)
const visiblePages = computed(() => {
  const current = props.meta.current_page
  const last = props.meta.last_page
  const pages: number[] = []

  // Always show first page
  if (current > 3) {
    pages.push(1)
  }

  // Add ellipsis indicator if needed
  if (current > 4) {
    pages.push(-1) // -1 represents ellipsis
  }

  // Show pages around current page
  for (let i = Math.max(1, current - 2); i <= Math.min(last, current + 2); i++) {
    pages.push(i)
  }

  // Add ellipsis indicator if needed
  if (current < last - 3) {
    pages.push(-2) // -2 represents ellipsis
  }

  // Always show last page
  if (current < last - 2) {
    pages.push(last)
  }

  return pages
})

// Build URL for specific page
const buildPageUrl = (page: number): string => {
  const url = new URL(window.location.href)
  url.searchParams.set('page', page.toString())
  return url.toString()
}

// Navigate to specific page
const navigateToPage = (url: string | null) => {
  if (!url) return

  router.get(url, {}, {
    preserveScroll: true,
    replace: false
  })
}
</script>



================================================
FILE: resources/js/Components/MealPlans/SortableHeader.vue
================================================
<template>
  <button
    type="button"
    class="group inline-flex items-center justify-start w-full text-left font-semibold text-gray-900 dark:text-gray-100 hover:text-gray-600 dark:hover:text-gray-300 focus:outline-none focus:underline transition-colors"
    @click="handleSort"
  >
    <slot />
    <span class="ml-2 flex-none rounded text-gray-400 dark:text-gray-500">
      <ChevronUp
        v-if="currentSort.field === field && currentSort.direction === 'asc'"
        class="h-4 w-4 text-gray-900 dark:text-gray-100"
        aria-hidden="true"
      />
      <ChevronDown
        v-else-if="currentSort.field === field && currentSort.direction === 'desc'"
        class="h-4 w-4 text-gray-900 dark:text-gray-100"
        aria-hidden="true"
      />
      <ChevronsUpDown
        v-else
        class="h-4 w-4 group-hover:text-gray-500 dark:group-hover:text-gray-400"
        aria-hidden="true"
      />
    </span>
  </button>
</template>

<script setup lang="ts">
import { ChevronUp, ChevronDown, ChevronsUpDown } from 'lucide-vue-next'

// Local type definitions
type SortDirection = 'asc' | 'desc'

interface SortState {
  field: string
  direction: SortDirection
}

interface Props {
  field: string
  currentSort: SortState
}

interface Emits {
  (e: 'sort-change', value: { field: string, direction: SortDirection }): void
}

const props = defineProps<Props>()
const emit = defineEmits<Emits>()

// Handle sort click
const handleSort = () => {
  let newDirection: SortDirection = 'asc'

  if (props.currentSort.field === props.field) {
    // If already sorting by this field, toggle direction
    newDirection = props.currentSort.direction === 'asc' ? 'desc' : 'asc'
  }

  emit('sort-change', {
    field: props.field,
    direction: newDirection
  })
}
</script>



================================================
FILE: resources/js/Components/MealPlans/StatusFilter.vue
================================================
<template>
  <Select :model-value="modelValue || 'all'" @update:model-value="handleChange">
    <SelectTrigger class="w-40">
      <SelectValue placeholder="All statuses" />
    </SelectTrigger>
    <SelectContent>
      <SelectItem value="all">
        All statuses
      </SelectItem>
      <SelectItem
        v-for="option in options"
        :key="option.value"
        :value="option.value"
      >
        {{ option.label }}
      </SelectItem>
    </SelectContent>
  </Select>
</template>

<script setup lang="ts">
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/Components/ui/select'
// Local type definition
interface StatusOption {
  value: string
  label: string
}

interface Props {
  modelValue?: string
  options: StatusOption[]
}

interface Emits {
  (e: 'update:modelValue', value: string): void
}

const props = defineProps<Props>()
const emit = defineEmits<Emits>()

// Validate and emit status change
const handleChange = (value: string | undefined) => {
  // Convert "all" to empty string for backend
  const validValue = value === 'all' ? '' : (value || '')

  // Validate against allowed options or empty string
  if (validValue === '' || props.options.some(option => option.value === validValue)) {
    emit('update:modelValue', validValue)
  }
}
</script>



================================================
FILE: resources/js/Components/MealPlans/StatusTag.vue
================================================
<template>
  <Badge :variant="badgeVariant" :class="badgeClasses">
    {{ statusLabel }}
  </Badge>
</template>

<script setup lang="ts">
import { computed } from 'vue'
import { Badge } from '@/Components/ui/badge'
// Local type definition
type MealPlanStatus = 'pending' | 'processing' | 'done' | 'error'

interface Props {
  value: MealPlanStatus
}

const props = defineProps<Props>()

// Status label mapping
const statusLabels: Record<MealPlanStatus, string> = {
  pending: 'Pending',
  processing: 'Processing',
  done: 'Done',
  error: 'Error'
}

// Badge variant based on status
const badgeVariant = computed(() => {
  switch (props.value) {
    case 'pending':
      return 'secondary'
    case 'processing':
      return 'default'
    case 'done':
      return 'default'
    case 'error':
      return 'destructive'
    default:
      return 'secondary'
  }
})

// Additional classes for custom colors
const badgeClasses = computed(() => {
  switch (props.value) {
    case 'pending':
      return 'bg-gray-100 text-gray-800 hover:bg-gray-200'
    case 'processing':
      return 'bg-blue-100 text-blue-800 hover:bg-blue-200'
    case 'done':
      return 'bg-green-100 text-green-800 hover:bg-green-200'
    case 'error':
      return 'bg-red-100 text-red-800 hover:bg-red-200'
    default:
      return ''
  }
})

// Status label
const statusLabel = computed(() => {
  return statusLabels[props.value] || props.value
})
</script>



================================================
FILE: resources/js/Components/recipes/ActionBar.vue
================================================
<template>
  <div class="flex items-center gap-3">
    <Button
      v-if="canEdit"
      variant="default"
      @click="$emit('edit')"
      class="flex items-center gap-2"
    >
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
      </svg>
      Edit Recipe
    </Button>

    <Button
      v-if="canEdit"
      variant="destructive"
      @click="$emit('delete-request')"
      class="flex items-center gap-2"
    >
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
      </svg>
      Delete Recipe
    </Button>
  </div>
</template>

<script setup>
import { Button } from '@/Components/ui/button';

defineProps({
  canEdit: {
    type: Boolean,
    required: true,
  },
});

defineEmits(['edit', 'delete-request']);
</script>



================================================
FILE: resources/js/Components/recipes/CategoryBadge.vue
================================================
<template>
  <Badge :variant="getBadgeVariant(category)" :class="getBadgeClass(category)">
    {{ getCategoryLabel(category) }}
  </Badge>
</template>

<script setup>
import { Badge } from '@/Components/ui/badge';

defineProps({
  category: {
    type: String,
    default: 'breakfast',
  },
});

function getCategoryLabel(category) {
  const labels = {
    breakfast: 'Breakfast',
    supper: 'Supper',
    dinner: 'Dinner'
  };
  return labels[category];
}

function getBadgeVariant(category) {
  const variants = {
    breakfast: 'default',
    supper: 'secondary',
    dinner: 'outline'
  };
  return variants[category];
}

function getBadgeClass(category) {
  const classes = {
    breakfast: 'bg-yellow-100 text-yellow-800 border-yellow-200 hover:bg-yellow-200',
    supper: 'bg-blue-100 text-blue-800 border-blue-200 hover:bg-blue-200',
    dinner: 'bg-green-100 text-green-800 border-green-200 hover:bg-green-200'
  };
  return classes[category];
}
</script>



================================================
FILE: resources/js/Components/recipes/CategoryFilterDropdown.vue
================================================
<template>
  <Select
    :model-value="modelValue"
    @update:model-value="handleChange"
  >
    <SelectTrigger class="w-full" aria-label="Filter by category">
      <SelectValue placeholder="Select category" />
    </SelectTrigger>
    <SelectContent>
      <SelectItem
        v-for="option in options"
        :key="option.value || 'all'"
        :value="option.value || 'all'"
      >
        {{ option.label }}
      </SelectItem>
    </SelectContent>
  </Select>
</template>

<script setup>
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/Components/ui/select';

// Props
defineProps({
  modelValue: {
    type: String,
    default: ''
  },
  options: {
    type: Array,
    required: true,
    validator: (options) => {
      return options.every(option =>
        typeof option === 'object' &&
        'value' in option &&
        'label' in option
      );
    }
  }
});

// Emits
const emit = defineEmits(['update:modelValue']);

// Event handlers
const handleChange = (value) => {
  // Convert "all" back to actual null for "All Categories"
  const actualValue = value === 'all' ? null : value;
  emit('update:modelValue', actualValue);
};
</script>



================================================
FILE: resources/js/Components/recipes/ConfirmDeleteModal.vue
================================================
<template>
  <Teleport to="body">
    <div
      v-if="open"
      class="fixed inset-0 z-50 flex items-center justify-center"
      @click.self="handleCancel"
    >
      <!-- Backdrop -->
      <div class="fixed inset-0 bg-black bg-opacity-50 transition-opacity"></div>

      <!-- Modal -->
      <div class="relative bg-white rounded-lg shadow-xl max-w-md w-full mx-4 p-6">
        <div class="flex items-center justify-center w-12 h-12 mx-auto bg-red-100 rounded-full mb-4">
          <AlertTriangle class="w-6 h-6 text-red-600" />
        </div>

        <div class="text-center">
          <h3 class="text-lg font-medium text-gray-900 mb-2">
            Delete Recipe
          </h3>
          <p class="text-sm text-gray-500 mb-6">
            Are you sure you want to delete "{{ recipeName }}"? This action cannot be undone.
          </p>
        </div>

        <div class="flex gap-3 justify-end">
          <Button
            variant="outline"
            @click="handleCancel"
          >
            Cancel
          </Button>
          <Button
            variant="destructive"
            @click="handleConfirm"
          >
            <Trash2 class="w-4 h-4 mr-2" />
            Delete Recipe
          </Button>
        </div>
      </div>
    </div>
  </Teleport>
</template>

<script setup>
import { AlertTriangle, Trash2 } from 'lucide-vue-next';
import { Button } from '@/Components/ui/button';

// Props
defineProps({
  open: {
    type: Boolean,
    default: false
  },
  recipeName: {
    type: String,
    default: ''
  }
});

// Emits
const emit = defineEmits(['confirm', 'cancel']);

// Event handlers
const handleConfirm = () => {
  emit('confirm');
};

const handleCancel = () => {
  emit('cancel');
};
</script>



================================================
FILE: resources/js/Components/recipes/CreateRecipeButton.vue
================================================
<template>
  <Button
    variant="default"
    size="default"
    @click="handleCreateRecipe"
    class="w-full sm:w-auto"
  >
    <Plus class="h-4 w-4 mr-2" />
    Dodaj przepis
  </Button>
</template>

<script setup>
import { Plus } from 'lucide-vue-next';
import { Button } from '@/Components/ui/button';
import { router } from '@inertiajs/vue3';

// Handle create recipe navigation
const handleCreateRecipe = () => {
  router.visit(route('recipes.create'));
};
</script>



================================================
FILE: resources/js/Components/recipes/DeleteConfirmationDialog.vue
================================================
<template>
  <Dialog :open="open" @update:open="$emit('cancel')">
    <DialogContent class="sm:max-w-md">
      <DialogHeader>
        <DialogTitle class="flex items-center gap-2 text-red-600">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L4.082 16.5c-.77.833.192 2.5 1.732 2.5z" />
          </svg>
          Delete Recipe
        </DialogTitle>
        <DialogDescription class="text-gray-600">
          Are you sure you want to delete <strong>"{{ recipeName }}"</strong>?
          This action cannot be undone and will permanently remove the recipe and all its ingredients.
        </DialogDescription>
      </DialogHeader>

      <DialogFooter class="flex flex-col-reverse sm:flex-row gap-2">
        <Button
          variant="outline"
          @click="$emit('cancel')"
          :disabled="isLoading"
          class="w-full sm:w-auto"
        >
          Cancel
        </Button>
        <Button
          variant="destructive"
          @click="$emit('confirm')"
          :disabled="isLoading"
          class="w-full sm:w-auto flex items-center gap-2"
        >
          <svg
            v-if="isLoading"
            class="w-4 h-4 animate-spin"
            fill="none"
            viewBox="0 0 24 24"
          >
            <circle
              class="opacity-25"
              cx="12"
              cy="12"
              r="10"
              stroke="currentColor"
              stroke-width="4"
            />
            <path
              class="opacity-75"
              fill="currentColor"
              d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
            />
          </svg>
          <svg
            v-else
            class="w-4 h-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
          </svg>
          {{ isLoading ? 'Deleting...' : 'Delete Recipe' }}
        </Button>
      </DialogFooter>
    </DialogContent>
  </Dialog>
</template>

<script setup>
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/Components/ui/dialog';
import { Button } from '@/Components/ui/button';

defineProps({
  open: {
    type: Boolean,
    required: true,
  },
  recipeName: {
    type: String,
    required: true,
  },
  isLoading: {
    type: Boolean,
    default: false,
  },
});

defineEmits(['confirm', 'cancel']);
</script>



================================================
FILE: resources/js/Components/recipes/IngredientCard.vue
================================================
<template>
  <div class="bg-white border border-gray-200 rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow duration-200">
    <div class="flex items-center justify-between">
      <h3 class="font-medium text-gray-900 text-lg">{{ ingredient.name }}</h3>
      <Badge variant="secondary" class="ml-2 font-mono text-sm">
        {{ formatQuantity(ingredient.quantity) }} {{ ingredient.unit.code }}
      </Badge>
    </div>
  </div>
</template>

<script setup>
import { Badge } from '@/Components/ui/badge';

defineProps({
  ingredient: {
    type: Object,
    required: true,
  },
});

function formatQuantity(quantity) {
  // Format quantity to remove unnecessary decimals
  return quantity % 1 === 0 ? quantity.toString() : quantity.toFixed(2).replace(/\.?0+$/, '');
}
</script>



================================================
FILE: resources/js/Components/recipes/IngredientCardGrid.vue
================================================
<template>
  <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
    <IngredientCard
      v-for="ingredient in ingredients"
      :key="ingredient.id"
      :ingredient="ingredient"
    />
  </div>

  <!-- Empty state -->
  <div v-if="ingredients.length === 0" class="text-center py-8 text-gray-500">
    <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
    </svg>
    <p class="text-lg font-medium">No ingredients added</p>
    <p class="text-sm">This recipe doesn't have any ingredients yet.</p>
  </div>
</template>

<script setup>
import IngredientCard from './IngredientCard.vue';

defineProps({
  ingredients: {
    type: Array,
    default: () => [],
  },
});
</script>



================================================
FILE: resources/js/Components/recipes/IngredientManager.vue
================================================
<template>
  <div class="space-y-4">
    <!-- Ingredients List -->
    <div v-if="ingredients.length > 0" class="space-y-3">
      <IngredientRow
        v-for="(ingredient, index) in ingredients"
        :key="`ingredient-${index}`"
        :ingredient="ingredient"
        :index="index"
        :available-ingredients="availableIngredients"
        :available-units="availableUnits"
        :errors="getIngredientErrors(index)"
        @update="handleUpdateIngredient"
        @remove="handleRemoveIngredient"
        @add-ingredient="handleAddNewIngredient"
      />
    </div>

    <!-- Empty State -->
    <div v-else class="text-center py-8 text-muted-foreground">
      <div class="inline-flex items-center justify-center w-16 h-16 rounded-full bg-muted mb-4">
        <Plus class="w-6 h-6" />
      </div>
      <p class="text-sm">No ingredients added yet. Click "Add Ingredient" to get started.</p>
    </div>

    <!-- Add Ingredient Button -->
    <Button
      type="button"
      variant="outline"
      @click="handleAddIngredient"
      class="w-full"
    >
      <Plus class="w-4 h-4 mr-2" />
      Add Ingredient
    </Button>

    <!-- General Ingredients Error -->
    <div v-if="errors.ingredients && typeof errors.ingredients === 'string'" class="text-sm text-red-600">
      {{ errors.ingredients }}
    </div>
  </div>
</template>

<script setup>
import { Plus } from 'lucide-vue-next'
import { Button } from '@/Components/ui/button'
import IngredientRow from './IngredientRow.vue'

// Define props
const props = defineProps({
  ingredients: {
    type: Array,
    required: true
  },
  availableIngredients: {
    type: Array,
    required: true
  },
  availableUnits: {
    type: Array,
    required: true
  },
  errors: {
    type: Object,
    default: () => ({})
  }
})

// Define emits for v-model support
const emit = defineEmits(['update:ingredients', 'add-new-ingredient'])

// Handle adding new ingredient
const handleAddIngredient = () => {
  const newIngredients = [
    ...props.ingredients,
    {
      ingredient_id: null,
      quantity: '',
      unit_id: null
    }
  ]
  emit('update:ingredients', newIngredients)
}

// Handle updating ingredient
const handleUpdateIngredient = (index, updatedIngredient) => {
  const newIngredients = [...props.ingredients]
  newIngredients[index] = updatedIngredient
  emit('update:ingredients', newIngredients)
}

// Handle removing ingredient
const handleRemoveIngredient = (index) => {
  const newIngredients = props.ingredients.filter((_, i) => i !== index)
  emit('update:ingredients', newIngredients)
}

// Handle adding new ingredient from combobox
const handleAddNewIngredient = (ingredientName) => {
  // Emit event to parent component to handle creating new ingredient
  emit('add-new-ingredient', ingredientName)
}

// Get errors for specific ingredient
const getIngredientErrors = (index) => {
  const ingredientErrors = {}

  // Check for ingredient_id errors
  if (props.errors[`ingredients.${index}.ingredient_id`]) {
    ingredientErrors.ingredient_id = props.errors[`ingredients.${index}.ingredient_id`]
  }

  // Check for quantity errors
  if (props.errors[`ingredients.${index}.quantity`]) {
    ingredientErrors.quantity = props.errors[`ingredients.${index}.quantity`]
  }

  // Check for unit_id errors
  if (props.errors[`ingredients.${index}.unit_id`]) {
    ingredientErrors.unit_id = props.errors[`ingredients.${index}.unit_id`]
  }

  return ingredientErrors
}
</script>



================================================
FILE: resources/js/Components/recipes/IngredientRow.vue
================================================
<template>
  <div
    class="grid grid-cols-1 md:grid-cols-5 gap-4 p-4 border border-border rounded-lg bg-card"
    role="group"
    :aria-label="`Ingredient ${index + 1}`"
  >
    <!-- Ingredient Selection -->
    <div class="md:col-span-2 space-y-1">
      <label
        :for="`ingredient-${index}`"
        class="text-sm font-medium text-foreground"
      >
        Ingredient *
      </label>
                  <Select
        v-model="localIngredient.ingredient_id"
        :open="isSelectOpen"
        @update:open="handleSelectOpenChange"
      >
        <SelectTrigger
          :class="{ 'border-red-500': errors.ingredient_id }"
          :aria-invalid="!!errors.ingredient_id"
          :aria-describedby="errors.ingredient_id ? `ingredient-error-${index}` : undefined"
        >
          <SelectValue placeholder="Select ingredient..." />
        </SelectTrigger>
        <SelectContent>
          <div class="p-2">
            <Input
              v-model="searchTerm"
              placeholder="Search or add ingredient..."
              class="mb-2"
              @keydown.escape="isSelectOpen = false"
              @keydown.enter.prevent="handleEnterKey"
            />
          </div>
          <SelectItem
            v-for="ingredient in filteredIngredients"
            :key="ingredient.id"
            :value="ingredient.id"
            @click="handleIngredientSelect"
          >
            {{ ingredient.name }}
          </SelectItem>
          <div v-if="searchTerm && !exactMatch && filteredIngredients.length === 0" class="p-2">
            <Button
              type="button"
              variant="outline"
              size="sm"
              @click="handleAddNewIngredient"
              class="w-full"
            >
              Add "{{ searchTerm }}"
            </Button>
          </div>
          <div v-else-if="filteredIngredients.length === 0" class="p-2 text-sm text-muted-foreground">
            No ingredients found.
          </div>
        </SelectContent>
      </Select>
      <div
        v-if="errors.ingredient_id"
        :id="`ingredient-error-${index}`"
        class="text-xs text-red-600"
        role="alert"
      >
        {{ errors.ingredient_id }}
      </div>
    </div>

    <!-- Quantity -->
    <div class="space-y-1">
      <label
        :for="`quantity-${index}`"
        class="text-sm font-medium text-foreground"
      >
        Quantity *
      </label>
      <Input
        :id="`quantity-${index}`"
        v-model="localIngredient.quantity"
        type="number"
        step="0.01"
        min="0.01"
        placeholder="e.g. 2"
        :class="{ 'border-red-500': errors.quantity }"
        :aria-invalid="!!errors.quantity"
        :aria-describedby="errors.quantity ? `quantity-error-${index}` : undefined"
        aria-label="Ingredient quantity"
      />
      <div
        v-if="errors.quantity"
        :id="`quantity-error-${index}`"
        class="text-xs text-red-600"
        role="alert"
      >
        {{ errors.quantity }}
      </div>
    </div>

    <!-- Unit -->
    <div class="space-y-1">
      <label
        :for="`unit-${index}`"
        class="text-sm font-medium text-foreground"
      >
        Unit *
      </label>
      <Select
        v-model="localIngredient.unit_id"
        :id="`unit-${index}`"
      >
        <SelectTrigger
          :class="{ 'border-red-500': errors.unit_id }"
          :aria-invalid="!!errors.unit_id"
          :aria-describedby="errors.unit_id ? `unit-error-${index}` : undefined"
        >
          <SelectValue placeholder="Unit" />
        </SelectTrigger>
        <SelectContent>
          <SelectItem
            v-for="unit in availableUnits"
            :key="unit.id"
            :value="unit.id"
          >
            {{ unit.code }}
          </SelectItem>
        </SelectContent>
      </Select>
      <div
        v-if="errors.unit_id"
        :id="`unit-error-${index}`"
        class="text-xs text-red-600"
        role="alert"
      >
        {{ errors.unit_id }}
      </div>
    </div>

    <!-- Remove Button -->
    <div class="flex items-end">
      <Button
        type="button"
        variant="outline"
        size="sm"
        @click="handleRemoveIngredient"
        class="w-full text-red-600 hover:text-red-700 hover:bg-red-50"
        :aria-label="`Remove ingredient ${index + 1}`"
      >
        <Trash2 class="w-4 h-4" />
        <span class="sr-only">Remove ingredient</span>
      </Button>
    </div>
  </div>
</template>

<script setup>
import { computed, ref, watch, nextTick } from 'vue'
import { Trash2 } from 'lucide-vue-next'
import { Input } from '@/Components/ui/input'
import { Button } from '@/Components/ui/button'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/Components/ui/select'

// Define props
const props = defineProps({
  ingredient: {
    type: Object,
    required: true
  },
  index: {
    type: Number,
    required: true
  },
  availableIngredients: {
    type: Array,
    required: true
  },
  availableUnits: {
    type: Array,
    required: true
  },
  errors: {
    type: Object,
    default: () => ({})
  }
})

// Define emits
const emit = defineEmits(['update', 'remove', 'add-ingredient'])

// Local reactive copy of ingredient
const localIngredient = ref({ ...props.ingredient })

// Search term for filtering ingredients
const searchTerm = ref('')

// Control Select open state
const isSelectOpen = ref(false)

// Flag to prevent infinite watcher loops
const isUpdatingFromParent = ref(false)

// Watch for changes in props.ingredient and update local copy
watch(() => props.ingredient, (newIngredient) => {
  isUpdatingFromParent.value = true
  localIngredient.value = { ...newIngredient }
  // Reset flag after nextTick to allow DOM updates
  nextTick(() => {
    isUpdatingFromParent.value = false
  })
}, { deep: true })

// Watch for changes in local ingredient and emit updates
watch(localIngredient, (newIngredient) => {
  // Don't emit if we're updating from parent to prevent infinite loops
  if (!isUpdatingFromParent.value) {
    emit('update', props.index, { ...newIngredient })
  }
}, { deep: true, immediate: false })

// Computed properties
const selectedIngredient = computed(() => {
  return props.availableIngredients.find(
    ing => ing.id === localIngredient.value.ingredient_id
  )
})

const filteredIngredients = computed(() => {
  if (!searchTerm.value) {
    return props.availableIngredients
  }

  return props.availableIngredients.filter(ingredient =>
    ingredient.name.toLowerCase().includes(searchTerm.value.toLowerCase())
  )
})

// Check if search term exactly matches an existing ingredient
const exactMatch = computed(() => {
  return props.availableIngredients.some(
    ingredient => ingredient.name.toLowerCase() === searchTerm.value.toLowerCase()
  )
})

// Handle Select open/close
const handleSelectOpenChange = (open) => {
  isSelectOpen.value = open
  // Clear search term when closing
  if (!open) {
    searchTerm.value = ''
  }
}

// Handle ingredient selection - close select after choosing
const handleIngredientSelect = () => {
  isSelectOpen.value = false
  searchTerm.value = ''
}

// Handle Enter key in search input
const handleEnterKey = () => {
  if (filteredIngredients.value.length === 1) {
    // If only one ingredient matches, select it
    localIngredient.value.ingredient_id = filteredIngredients.value[0].id
    handleIngredientSelect()
  } else if (searchTerm.value && !exactMatch.value && filteredIngredients.value.length === 0) {
    // If no matches and search term exists, add new ingredient
    handleAddNewIngredient()
  }
}

// Handle adding new ingredient
const handleAddNewIngredient = () => {
  if (searchTerm.value.trim()) {
    emit('add-ingredient', searchTerm.value.trim())
    searchTerm.value = ''
    isSelectOpen.value = false
  }
}

// Handle remove ingredient
const handleRemoveIngredient = () => {
  emit('remove', props.index)
}
</script>



================================================
FILE: resources/js/Components/recipes/InstructionsSection.vue
================================================
<template>
  <div class="space-y-4">
    <h2 class="text-2xl font-semibold text-gray-900">Instructions</h2>
    <div class="prose prose-gray max-w-none">
      <div
        v-if="instructions && instructions.trim()"
        class="bg-gray-50 rounded-lg p-6 whitespace-pre-line text-gray-700 leading-relaxed"
      >
        {{ instructions }}
      </div>
      <div
        v-else
        class="text-center py-8 text-gray-500 bg-gray-50 rounded-lg"
      >
        <svg class="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
        </svg>
        <p class="text-lg font-medium">No instructions provided</p>
        <p class="text-sm">Instructions for preparing this recipe haven't been added yet.</p>
      </div>
    </div>
  </div>
</template>

<script setup>
defineProps({
  instructions: {
    type: String,
    default: '',
  },
});
</script>



================================================
FILE: resources/js/Components/recipes/RecipeForm.vue
================================================
<template>
  <form @submit.prevent="$emit('submit')" class="space-y-6">
    <!-- Recipe Name -->
    <div class="space-y-2">
      <label for="name" class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
        Recipe Name *
      </label>
      <Input
        id="name"
        v-model="form.name"
        type="text"
        placeholder="Enter recipe name"
        :class="{ 'border-red-500': form.errors.name }"
        required
      />
      <div v-if="form.errors.name" class="text-sm text-red-600">
        {{ form.errors.name }}
      </div>
    </div>

    <!-- Category -->
    <div class="space-y-2">
      <label for="category" class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
        Category *
      </label>
      <Select v-model="form.category" :disabled="form.processing">
        <SelectTrigger :class="{ 'border-red-500': form.errors.category }">
          <SelectValue placeholder="Select a category" />
        </SelectTrigger>
        <SelectContent>
          <SelectItem
            v-for="category in categories"
            :key="category.value"
            :value="category.value"
          >
            {{ category.label }}
          </SelectItem>
        </SelectContent>
      </Select>
      <div v-if="form.errors.category" class="text-sm text-red-600">
        {{ form.errors.category }}
      </div>
    </div>

    <!-- Instructions -->
    <div class="space-y-2">
      <label for="instructions" class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
        Instructions *
      </label>
      <Textarea
        id="instructions"
        v-model="form.instructions"
        rows="5"
        placeholder="Enter cooking instructions"
        :class="{ 'border-red-500': form.errors.instructions }"
        required
      />
      <div v-if="form.errors.instructions" class="text-sm text-red-600">
        {{ form.errors.instructions }}
      </div>
    </div>

    <!-- Calories and Servings Row -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      <!-- Calories -->
      <div class="space-y-2">
        <label for="calories" class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
          Calories *
        </label>
        <Input
          id="calories"
          v-model="form.calories"
          type="number"
          min="0"
          placeholder="e.g. 350"
          :class="{ 'border-red-500': form.errors.calories }"
          required
        />
        <div v-if="form.errors.calories" class="text-sm text-red-600">
          {{ form.errors.calories }}
        </div>
      </div>

      <!-- Servings -->
      <div class="space-y-2">
        <label for="servings" class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
          Servings *
        </label>
        <Input
          id="servings"
          v-model="form.servings"
          type="number"
          min="1"
          placeholder="e.g. 4"
          :class="{ 'border-red-500': form.errors.servings }"
          required
        />
        <div v-if="form.errors.servings" class="text-sm text-red-600">
          {{ form.errors.servings }}
        </div>
      </div>
    </div>

    <!-- Ingredients -->
    <div class="space-y-4">
      <div class="flex items-center justify-between">
        <h3 class="text-lg font-medium">Ingredients</h3>
      </div>

      <IngredientManager
        v-model:ingredients="form.ingredients"
        :available-ingredients="ingredients"
        :available-units="units"
        :errors="form.errors"
      />
    </div>

        <!-- Action Buttons -->
    <div class="flex items-center gap-4 pt-6 border-t">
      <Button
        type="submit"
        :disabled="form.processing || !isFormValid"
        class="flex-1 md:flex-none"
      >
        <span v-if="form.processing">
          {{ isEditing ? 'Updating...' : 'Creating...' }}
        </span>
        <span v-else>
          {{ isEditing ? 'Update Recipe' : 'Create Recipe' }}
        </span>
      </Button>

      <Button
        type="button"
        variant="outline"
        @click="$emit('cancel')"
        :disabled="form.processing"
      >
        Cancel
      </Button>
    </div>

    <div class="text-xs text-muted-foreground">
      * Required fields
    </div>
  </form>
</template>

<script setup>
import { computed } from 'vue'
import { Input } from '@/Components/ui/input'
import { Button } from '@/Components/ui/button'
import { Textarea } from '@/Components/ui/textarea'
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/Components/ui/select'
import IngredientManager from './IngredientManager.vue'

// Define props
const props = defineProps({
  form: {
    type: Object,
    required: true
  },
  categories: {
    type: Array,
    required: true
  },
  ingredients: {
    type: Array,
    required: true
  },
  units: {
    type: Array,
    required: true
  },
  isEditing: {
    type: Boolean,
    default: false
  }
})

// Define emits
defineEmits(['submit', 'cancel'])

// Basic form validation
const isFormValid = computed(() => {
  return !!(
    props.form.name &&
    props.form.category &&
    props.form.instructions &&
    props.form.calories &&
    props.form.servings
  )
})
</script>



================================================
FILE: resources/js/Components/recipes/RecipeHeader.vue
================================================
<template>
  <div class="space-y-4">
    <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
      <h1 class="text-3xl font-bold text-gray-900">{{ name }}</h1>
      <CategoryBadge :category="category" />
    </div>
  </div>
</template>

<script setup>
import CategoryBadge from './CategoryBadge.vue';

defineProps({
  name: {
    type: String,
    default: '',
  },
  category: {
    type: String,
    default: 'breakfast',
  },
});
</script>



================================================
FILE: resources/js/Components/recipes/RecipeMetaBadges.vue
================================================
<template>
  <div class="flex flex-wrap gap-3">
    <Badge variant="outline" class="flex items-center gap-2 px-3 py-1">
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z" />
      </svg>
      <span class="font-medium">{{ calories }} cal</span>
    </Badge>

    <Badge variant="outline" class="flex items-center gap-2 px-3 py-1">
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
      </svg>
      <span class="font-medium">{{ servings }} {{ servings === 1 ? 'serving' : 'servings' }}</span>
    </Badge>
  </div>
</template>

<script setup>
import { Badge } from '@/Components/ui/badge';

defineProps({
  calories: {
    type: Number,
    default: 0,
  },
  servings: {
    type: Number,
    default: 1,
  },
});
</script>



================================================
FILE: resources/js/Components/recipes/RecipeRow.vue
================================================
<template>
  <TableRow class="hover:bg-gray-50 dark:hover:bg-gray-800/50 transition-colors">
    <TableCell class="font-medium">
      <button
        type="button"
        class="text-left hover:text-blue-600 hover:underline transition-colors"
        @click="handleShowRecipe"
      >
        {{ recipe.name }}
      </button>
    </TableCell>
    <TableCell>
      <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium capitalize" :class="categoryClasses">
        {{ recipe.category }}
      </span>
    </TableCell>
    <TableCell class="text-gray-600 dark:text-gray-300">
      {{ formatCalories(recipe.calories) }}
    </TableCell>
    <TableCell class="text-gray-600 dark:text-gray-300">
      {{ recipe.servings }}
    </TableCell>
    <TableCell class="text-gray-600 dark:text-gray-300">
      {{ formatDate(recipe.created_at) }}
    </TableCell>
    <TableCell class="text-right">
      <div class="flex items-center justify-end gap-2">
        <Button
          variant="ghost"
          size="sm"
          @click="handleShowRecipe"
          class="h-8 w-8 p-0 hover:bg-blue-50 hover:text-blue-600 dark:hover:bg-blue-900/20"
          :aria-label="`View ${recipe.name}`"
        >
          <Eye class="h-4 w-4" />
        </Button>
        <Button
          variant="ghost"
          size="sm"
          @click="handleEditRecipe"
          class="h-8 w-8 p-0 hover:bg-amber-50 hover:text-amber-600 dark:hover:bg-amber-900/20"
          :aria-label="`Edit ${recipe.name}`"
        >
          <Edit class="h-4 w-4" />
        </Button>
        <Button
          variant="ghost"
          size="sm"
          @click="handleDeleteRecipe"
          class="h-8 w-8 p-0 hover:bg-red-50 hover:text-red-600 dark:hover:bg-red-900/20"
          :aria-label="`Delete ${recipe.name}`"
        >
          <Trash2 class="h-4 w-4" />
        </Button>
      </div>
    </TableCell>
  </TableRow>
</template>

<script setup>
import { computed } from 'vue';
import { router } from '@inertiajs/vue3';
import { Eye, Edit, Trash2 } from 'lucide-vue-next';
import { TableCell, TableRow } from '@/Components/ui/table';
import { Button } from '@/Components/ui/button';

// Props
const props = defineProps({
  recipe: {
    type: Object,
    required: true,
    validator: (recipe) => {
      return typeof recipe === 'object' &&
             'id' in recipe &&
             'name' in recipe &&
             'category' in recipe &&
             'calories' in recipe &&
             'servings' in recipe &&
             'created_at' in recipe;
    }
  }
});

// Emits
const emit = defineEmits(['delete-requested']);

// Computed
const categoryClasses = computed(() => {
  switch (props.recipe.category) {
    case 'breakfast':
      return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-300';
    case 'dinner':
      return 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-300';
    case 'supper':
      return 'bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-300';
    default:
      return 'bg-gray-100 text-gray-800 dark:bg-gray-800/50 dark:text-gray-300';
  }
});

// Methods
const formatCalories = (calories) => {
  return parseFloat(calories).toFixed(0) + ' kcal';
};

const formatDate = (dateString) => {
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric'
  });
};

// Event handlers
const handleShowRecipe = () => {
  router.visit(route('recipes.show', props.recipe.id));
};

const handleEditRecipe = () => {
  router.visit(route('recipes.edit', props.recipe.id));
};

const handleDeleteRecipe = () => {
  emit('delete-requested');
};
</script>



================================================
FILE: resources/js/Components/recipes/RecipesTable.vue
================================================
<template>
  <div class="space-y-4">
    <!-- Table -->
    <div class="overflow-hidden rounded-lg border border-gray-200 dark:border-gray-700">
      <Table>
        <TableHeader>
          <TableRow class="bg-gray-50 dark:bg-gray-800">
            <TableHead class="w-[300px] font-semibold">
              <SortableHeader
                field="name"
                :current-sort="sort"
                @sort-change="$emit('sort-change', $event)"
              >
                Name
              </SortableHeader>
            </TableHead>
            <TableHead class="w-[120px] font-semibold">
              <SortableHeader
                field="category"
                :current-sort="sort"
                @sort-change="$emit('sort-change', $event)"
              >
                Category
              </SortableHeader>
            </TableHead>
            <TableHead class="w-[100px] font-semibold">
              <SortableHeader
                field="calories"
                :current-sort="sort"
                @sort-change="$emit('sort-change', $event)"
              >
                Calories
              </SortableHeader>
            </TableHead>
            <TableHead class="w-[100px] font-semibold">Servings</TableHead>
            <TableHead class="w-[120px] font-semibold">
              <SortableHeader
                field="created_at"
                :current-sort="sort"
                @sort-change="$emit('sort-change', $event)"
              >
                Created
              </SortableHeader>
            </TableHead>
            <TableHead class="w-[120px] text-right font-semibold">Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          <RecipeRow
            v-for="recipe in recipes"
            :key="recipe.id"
            :recipe="recipe"
            @delete-requested="$emit('delete-requested', recipe)"
          />
          <TableRow v-if="recipes.length === 0">
            <TableCell :colspan="6" class="text-center py-8 text-gray-500 dark:text-gray-400">
              No recipes found
            </TableCell>
          </TableRow>
        </TableBody>
      </Table>
    </div>
  </div>
</template>

<script setup>
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/Components/ui/table';
import SortableHeader from './SortableHeader.vue';
import RecipeRow from './RecipeRow.vue';

// Props
defineProps({
  recipes: {
    type: Array,
    required: true
  },
  sort: {
    type: Object,
    required: true,
    validator: (sort) => {
      return typeof sort === 'object' &&
             'field' in sort &&
             'direction' in sort;
    }
  }
});

// Emits
defineEmits(['sort-change', 'delete-requested']);
</script>



================================================
FILE: resources/js/Components/recipes/RecipesToolbar.vue
================================================
<template>
  <div class="flex flex-col sm:flex-row gap-4 items-center justify-between">
    <div class="flex flex-col sm:flex-row gap-4 items-center flex-1">
      <!-- Search Input -->
      <div class="w-full sm:w-auto min-w-[300px]">
        <SearchInput
          v-model="searchValue"
          placeholder="Search recipes..."
          @update:model-value="handleSearchInput"
          @keydown.enter="handleSearchEnter"
        />
      </div>

      <!-- Category Filter Dropdown -->
      <div class="w-full sm:w-auto min-w-[200px]">
        <CategoryFilterDropdown
          v-model="categoryValue"
          :options="categoriesWithAll"
          @update:model-value="handleCategoryChange"
        />
      </div>

      <!-- Reset Filters Button -->
      <ResetFiltersButton
        :disabled="!hasActiveFilters"
        @click="handleReset"
      />
    </div>

    <!-- Create Recipe Button -->
    <div class="w-full sm:w-auto">
      <CreateRecipeButton />
    </div>
  </div>
</template>

<script setup>
import { ref, computed, watch } from 'vue';
import SearchInput from './SearchInput.vue';
import CategoryFilterDropdown from './CategoryFilterDropdown.vue';
import ResetFiltersButton from './ResetFiltersButton.vue';
import CreateRecipeButton from './CreateRecipeButton.vue';

// Props
const props = defineProps({
  modelValue: {
    type: Object,
    default: () => ({})
  },
  categories: {
    type: Array,
    required: true
  }
});

// Emits
const emit = defineEmits(['update:modelValue', 'search', 'category-change', 'reset']);

// Local state
const searchValue = ref(props.modelValue.search || '');
const categoryValue = ref(props.modelValue.category || 'all');

// Computed
const categoriesWithAll = computed(() => [
  { value: 'all', label: 'All Categories' },
  ...props.categories
]);

const hasActiveFilters = computed(() => {
  return searchValue.value !== '' || (categoryValue.value !== '' && categoryValue.value !== 'all');
});

// Watch for changes from parent
watch(() => props.modelValue, (newValue) => {
  searchValue.value = newValue.search || '';
  categoryValue.value = newValue.category || 'all';
}, { deep: true });

// Event handlers
const handleSearchInput = (value) => {
  searchValue.value = value;
  updateModelValue();
  emit('search', value);
};

const handleSearchEnter = () => {
  emit('search', searchValue.value);
};

const handleCategoryChange = (value) => {
  categoryValue.value = value;
  updateModelValue();
  emit('category-change', value);
};

const handleReset = () => {
  searchValue.value = '';
  categoryValue.value = 'all';
  updateModelValue();
  emit('reset');
};

// Update model value
const updateModelValue = () => {
  emit('update:modelValue', {
    search: searchValue.value,
    category: categoryValue.value
  });
};
</script>



================================================
FILE: resources/js/Components/recipes/ResetFiltersButton.vue
================================================
<template>
  <Button
    :disabled="disabled"
    variant="outline"
    size="default"
    @click="$emit('click')"
  >
    <RotateCcw class="h-4 w-4 mr-2" />
    Reset Filters
  </Button>
</template>

<script setup>
import { RotateCcw } from 'lucide-vue-next';
import { Button } from '@/Components/ui/button';

// Props
defineProps({
  disabled: {
    type: Boolean,
    default: false
  }
});

// Emits
defineEmits(['click']);
</script>



================================================
FILE: resources/js/Components/recipes/RowActionDropdown.vue
================================================
<template>
  <div class="relative">
    <Button
      variant="ghost"
      size="sm"
      @click="toggleDropdown"
      class="h-8 w-8 p-0"
    >
      <MoreHorizontal class="h-4 w-4" />
      <span class="sr-only">Open menu</span>
    </Button>

    <div
      v-if="isOpen"
      class="absolute right-0 mt-2 w-32 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-10"
      @click.stop
    >
      <div class="py-1" role="menu">
        <button
          type="button"
          class="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900"
          role="menuitem"
          @click="handleShow"
        >
          <Eye class="mr-2 h-4 w-4" />
          Show
        </button>
        <button
          type="button"
          class="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900"
          role="menuitem"
          @click="handleEdit"
        >
          <Edit class="mr-2 h-4 w-4" />
          Edit
        </button>
        <button
          type="button"
          class="flex items-center w-full px-4 py-2 text-sm text-red-700 hover:bg-red-50 hover:text-red-900"
          role="menuitem"
          @click="handleDelete"
        >
          <Trash2 class="mr-2 h-4 w-4" />
          Delete
        </button>
      </div>
    </div>
  </div>

  <!-- Overlay to close dropdown when clicking outside -->
  <div
    v-if="isOpen"
    class="fixed inset-0 z-0"
    @click="closeDropdown"
  ></div>
</template>

<script setup>
import { ref } from 'vue';
import { MoreHorizontal, Eye, Edit, Trash2 } from 'lucide-vue-next';
import { Button } from '@/Components/ui/button';

// Props
defineProps({
  recipeId: {
    type: Number,
    required: true
  }
});

// Emits
const emit = defineEmits(['show', 'edit', 'delete']);

// State
const isOpen = ref(false);

// Methods
const toggleDropdown = () => {
  isOpen.value = !isOpen.value;
};

const closeDropdown = () => {
  isOpen.value = false;
};

// Event handlers
const handleShow = () => {
  emit('show');
  closeDropdown();
};

const handleEdit = () => {
  emit('edit');
  closeDropdown();
};

const handleDelete = () => {
  emit('delete');
  closeDropdown();
};
</script>



================================================
FILE: resources/js/Components/recipes/SearchInput.vue
================================================
<template>
  <div class="relative">
    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
      <Search class="h-4 w-4 text-gray-400" />
    </div>
    <Input
      :model-value="modelValue"
      :placeholder="placeholder"
      :maxlength="50"
      type="search"
      class="pl-10"
      aria-label="Search recipes"
      @update:model-value="handleInput"
      @keydown.enter="$emit('keydown.enter')"
    />
  </div>
</template>

<script setup>
import { Search } from 'lucide-vue-next';
import { Input } from '@/Components/ui/input';

// Props
defineProps({
  modelValue: {
    type: String,
    default: ''
  },
  placeholder: {
    type: String,
    default: 'Search...'
  }
});

// Emits
const emit = defineEmits(['update:modelValue', 'keydown.enter']);

// Event handlers
const handleInput = (value) => {
  // Validate max length
  if (value.length <= 50) {
    emit('update:modelValue', value);
  }
};
</script>



================================================
FILE: resources/js/Components/recipes/ServerPagination.vue
================================================
<template>
  <nav
    v-if="meta.last_page > 1"
    class="flex items-center justify-between"
    aria-label="Pagination"
  >
    <div class="flex-1 flex justify-between sm:hidden">
      <!-- Mobile pagination -->
      <Button
        :disabled="!links.prev"
        variant="outline"
        size="sm"
        @click="changePage(meta.current_page - 1)"
      >
        Previous
      </Button>
      <Button
        :disabled="!links.next"
        variant="outline"
        size="sm"
        @click="changePage(meta.current_page + 1)"
      >
        Next
      </Button>
    </div>

    <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
      <div>
        <p class="text-sm text-gray-700">
          Showing
          <span class="font-medium">{{ meta.from || 0 }}</span>
          to
          <span class="font-medium">{{ meta.to || 0 }}</span>
          of
          <span class="font-medium">{{ meta.total }}</span>
          results
        </p>
      </div>

      <div>
        <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
          <!-- Previous button -->
          <Button
            :disabled="!links.prev"
            variant="outline"
            size="sm"
            class="rounded-r-none"
            @click="changePage(meta.current_page - 1)"
          >
            <ChevronLeft class="h-4 w-4" />
            <span class="sr-only">Previous</span>
          </Button>

          <!-- Page numbers -->
          <template v-for="page in pageNumbers" :key="page">
            <Button
              v-if="page !== '...'"
              :variant="page === meta.current_page ? 'default' : 'outline'"
              size="sm"
              class="rounded-none"
              @click="changePage(page)"
            >
              {{ page }}
            </Button>
            <span
              v-else
              class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium text-gray-500"
            >
              ...
            </span>
          </template>

          <!-- Next button -->
          <Button
            :disabled="!links.next"
            variant="outline"
            size="sm"
            class="rounded-l-none"
            @click="changePage(meta.current_page + 1)"
          >
            <ChevronRight class="h-4 w-4" />
            <span class="sr-only">Next</span>
          </Button>
        </nav>
      </div>
    </div>
  </nav>
</template>

<script setup>
import { computed } from 'vue';
import { ChevronLeft, ChevronRight } from 'lucide-vue-next';
import { Button } from '@/Components/ui/button';

// Props
const props = defineProps({
  meta: {
    type: Object,
    required: true,
    validator: (meta) => {
      return typeof meta === 'object' &&
             'current_page' in meta &&
             'last_page' in meta &&
             'total' in meta;
    }
  },
  links: {
    type: Object,
    required: true,
    validator: (links) => {
      return typeof links === 'object';
    }
  }
});

// Emits
const emit = defineEmits(['page-change']);

// Computed
const pageNumbers = computed(() => {
  const current = props.meta.current_page;
  const last = props.meta.last_page;
  const delta = 2;
  const range = [];
  const rangeWithDots = [];

  for (let i = Math.max(2, current - delta);
       i <= Math.min(last - 1, current + delta);
       i++) {
    range.push(i);
  }

  if (current - delta > 2) {
    rangeWithDots.push(1, '...');
  } else {
    rangeWithDots.push(1);
  }

  rangeWithDots.push(...range);

  if (current + delta < last - 1) {
    rangeWithDots.push('...', last);
  } else if (last > 1) {
    rangeWithDots.push(last);
  }

  return rangeWithDots;
});

// Methods
const changePage = (page) => {
  if (page >= 1 && page <= props.meta.last_page && page !== props.meta.current_page) {
    emit('page-change', page);
  }
};
</script>



================================================
FILE: resources/js/Components/recipes/SortableHeader.vue
================================================
<template>
  <button
    type="button"
    class="flex items-center space-x-1 hover:text-gray-900 transition-colors cursor-pointer select-none"
    :aria-label="`Sort by ${field}`"
    @click="handleSort"
    @keydown.enter="handleSort"
    @keydown.space.prevent="handleSort"
  >
    <span><slot /></span>
    <div class="flex flex-col">
      <ChevronUp
        :class="[
          'h-3 w-3 transition-colors',
          isActiveSortField && currentSort.direction === 'asc'
            ? 'text-gray-900'
            : 'text-gray-400'
        ]"
      />
      <ChevronDown
        :class="[
          'h-3 w-3 -mt-1 transition-colors',
          isActiveSortField && currentSort.direction === 'desc'
            ? 'text-gray-900'
            : 'text-gray-400'
        ]"
      />
    </div>
  </button>
</template>

<script setup>
import { computed } from 'vue';
import { ChevronUp, ChevronDown } from 'lucide-vue-next';

// Props
const props = defineProps({
  field: {
    type: String,
    required: true
  },
  currentSort: {
    type: Object,
    required: true,
    validator: (sort) => {
      return typeof sort === 'object' &&
             'field' in sort &&
             'direction' in sort;
    }
  }
});

// Emits
const emit = defineEmits(['sort-change']);

// Computed
const isActiveSortField = computed(() => {
  return props.currentSort.field === props.field;
});

// Event handlers
const handleSort = () => {
  emit('sort-change', props.field);
};
</script>



================================================
FILE: resources/js/Components/ui/avatar/Avatar.vue
================================================
<script setup>
import { AvatarRoot } from "reka-ui";
import { cn } from "@/lib/utils";
import { avatarVariant } from ".";

const props = defineProps({
  class: { type: null, required: false },
  size: { type: null, required: false, default: "sm" },
  shape: { type: null, required: false, default: "circle" },
});
</script>

<template>
  <AvatarRoot :class="cn(avatarVariant({ size, shape }), props.class)">
    <slot />
  </AvatarRoot>
</template>



================================================
FILE: resources/js/Components/ui/avatar/AvatarFallback.vue
================================================
<script setup>
import { AvatarFallback } from "reka-ui";

const props = defineProps({
  delayMs: { type: Number, required: false },
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
});
</script>

<template>
  <AvatarFallback v-bind="props">
    <slot />
  </AvatarFallback>
</template>



================================================
FILE: resources/js/Components/ui/avatar/AvatarImage.vue
================================================
<script setup>
import { AvatarImage } from "reka-ui";

const props = defineProps({
  src: { type: String, required: true },
  referrerPolicy: { type: null, required: false },
  crossOrigin: { type: null, required: false },
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
});
</script>

<template>
  <AvatarImage v-bind="props" class="h-full w-full object-cover">
    <slot />
  </AvatarImage>
</template>



================================================
FILE: resources/js/Components/ui/avatar/index.js
================================================
import { cva } from "class-variance-authority";

export { default as Avatar } from "./Avatar.vue";
export { default as AvatarFallback } from "./AvatarFallback.vue";
export { default as AvatarImage } from "./AvatarImage.vue";

export const avatarVariant = cva(
  "inline-flex items-center justify-center font-normal text-foreground select-none shrink-0 bg-secondary overflow-hidden",
  {
    variants: {
      size: {
        sm: "h-10 w-10 text-xs",
        base: "h-16 w-16 text-2xl",
        lg: "h-32 w-32 text-5xl",
      },
      shape: {
        circle: "rounded-full",
        square: "rounded-md",
      },
    },
  },
);



================================================
FILE: resources/js/Components/ui/badge/Badge.vue
================================================
<script setup>
import { cn } from "@/lib/utils";
import { badgeVariants } from ".";

const props = defineProps({
  variant: { type: null, required: false },
  class: { type: null, required: false },
});
</script>

<template>
  <div :class="cn(badgeVariants({ variant }), props.class)">
    <slot />
  </div>
</template>



================================================
FILE: resources/js/Components/ui/badge/index.js
================================================
import { cva } from "class-variance-authority";

export { default as Badge } from "./Badge.vue";

export const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);



================================================
FILE: resources/js/Components/ui/button/Button.vue
================================================
<script setup>
import { Primitive } from "reka-ui";
import { cn } from "@/lib/utils";
import { buttonVariants } from ".";

const props = defineProps({
  variant: { type: null, required: false },
  size: { type: null, required: false },
  class: { type: null, required: false },
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false, default: "button" },
});
</script>

<template>
  <Primitive
    :as="as"
    :as-child="asChild"
    :class="cn(buttonVariants({ variant, size }), props.class)"
  >
    <slot />
  </Primitive>
</template>



================================================
FILE: resources/js/Components/ui/button/index.js
================================================
import { cva } from "class-variance-authority";

export { default as Button } from "./Button.vue";

export const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        xs: "h-7 rounded px-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);



================================================
FILE: resources/js/Components/ui/combobox/Combobox.vue
================================================
<script setup>
import { ComboboxRoot, useForwardPropsEmits } from "reka-ui";

const props = defineProps({
  open: { type: Boolean, required: false },
  defaultOpen: { type: Boolean, required: false },
  resetSearchTermOnBlur: { type: Boolean, required: false },
  resetSearchTermOnSelect: { type: Boolean, required: false },
  openOnFocus: { type: Boolean, required: false },
  openOnClick: { type: Boolean, required: false },
  ignoreFilter: { type: Boolean, required: false },
  modelValue: { type: null, required: false },
  defaultValue: { type: null, required: false },
  multiple: { type: Boolean, required: false },
  dir: { type: String, required: false },
  disabled: { type: Boolean, required: false },
  highlightOnHover: { type: Boolean, required: false },
  by: { type: [String, Function], required: false },
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
  name: { type: String, required: false },
  required: { type: Boolean, required: false },
});
const emits = defineEmits(["update:modelValue", "highlight", "update:open"]);

const forwarded = useForwardPropsEmits(props, emits);
</script>

<template>
  <ComboboxRoot v-bind="forwarded">
    <slot />
  </ComboboxRoot>
</template>



================================================
FILE: resources/js/Components/ui/combobox/ComboboxAnchor.vue
================================================
<script setup>
import { reactiveOmit } from "@vueuse/core";
import { ComboboxAnchor, useForwardProps } from "reka-ui";
import { cn } from "@/lib/utils";

const props = defineProps({
  reference: { type: null, required: false },
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
  class: { type: null, required: false },
});

const delegatedProps = reactiveOmit(props, "class");

const forwarded = useForwardProps(delegatedProps);
</script>

<template>
  <ComboboxAnchor v-bind="forwarded" :class="cn('w-[200px]', props.class)">
    <slot />
  </ComboboxAnchor>
</template>



================================================
FILE: resources/js/Components/ui/combobox/ComboboxEmpty.vue
================================================
<script setup>
import { reactiveOmit } from "@vueuse/core";
import { ComboboxEmpty } from "reka-ui";
import { cn } from "@/lib/utils";

const props = defineProps({
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
  class: { type: null, required: false },
});

const delegatedProps = reactiveOmit(props, "class");
</script>

<template>
  <ComboboxEmpty
    v-bind="delegatedProps"
    :class="cn('py-6 text-center text-sm', props.class)"
  >
    <slot />
  </ComboboxEmpty>
</template>



================================================
FILE: resources/js/Components/ui/combobox/ComboboxGroup.vue
================================================
<script setup>
import { reactiveOmit } from "@vueuse/core";
import { ComboboxGroup, ComboboxLabel } from "reka-ui";
import { cn } from "@/lib/utils";

const props = defineProps({
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
  class: { type: null, required: false },
  heading: { type: String, required: false },
});

const delegatedProps = reactiveOmit(props, "class");
</script>

<template>
  <ComboboxGroup
    v-bind="delegatedProps"
    :class="
      cn(
        'overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground',
        props.class,
      )
    "
  >
    <ComboboxLabel
      v-if="heading"
      class="px-2 py-1.5 text-xs font-medium text-muted-foreground"
    >
      {{ heading }}
    </ComboboxLabel>
    <slot />
  </ComboboxGroup>
</template>



================================================
FILE: resources/js/Components/ui/combobox/ComboboxInput.vue
================================================
<script setup>
import { reactiveOmit } from "@vueuse/core";
import { ComboboxInput, useForwardPropsEmits } from "reka-ui";
import { cn } from "@/lib/utils";

const props = defineProps({
  displayValue: { type: Function, required: false },
  modelValue: { type: String, required: false },
  autoFocus: { type: Boolean, required: false },
  disabled: { type: Boolean, required: false },
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
  class: { type: null, required: false },
});

const emits = defineEmits(["update:modelValue"]);

const delegatedProps = reactiveOmit(props, "class");

const forwarded = useForwardPropsEmits(delegatedProps, emits);
</script>

<template>
  <ComboboxInput
    v-bind="forwarded"
    :class="
      cn(
        'flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50',
        props.class,
      )
    "
  >
    <slot />
  </ComboboxInput>
</template>



================================================
FILE: resources/js/Components/ui/combobox/ComboboxItem.vue
================================================
<script setup>
import { reactiveOmit } from "@vueuse/core";
import { ComboboxItem, useForwardPropsEmits } from "reka-ui";
import { cn } from "@/lib/utils";

const props = defineProps({
  textValue: { type: String, required: false },
  value: { type: null, required: true },
  disabled: { type: Boolean, required: false },
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
  class: { type: null, required: false },
});
const emits = defineEmits(["select"]);

const delegatedProps = reactiveOmit(props, "class");

const forwarded = useForwardPropsEmits(delegatedProps, emits);
</script>

<template>
  <ComboboxItem
    v-bind="forwarded"
    :class="
      cn(
        'relative flex cursor-default gap-2 select-none justify-between items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[highlighted]:bg-accent data-[highlighted]:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:size-4 [&_svg]:shrink-0',
        props.class,
      )
    "
  >
    <slot />
  </ComboboxItem>
</template>



================================================
FILE: resources/js/Components/ui/combobox/ComboboxList.vue
================================================
<script setup>
import { reactiveOmit } from "@vueuse/core";
import {
  ComboboxContent,
  ComboboxPortal,
  ComboboxViewport,
  useForwardPropsEmits,
} from "reka-ui";
import { cn } from "@/lib/utils";

const props = defineProps({
  forceMount: { type: Boolean, required: false },
  position: { type: String, required: false, default: "popper" },
  bodyLock: { type: Boolean, required: false },
  side: { type: null, required: false },
  sideOffset: { type: Number, required: false, default: 4 },
  sideFlip: { type: Boolean, required: false },
  align: { type: null, required: false, default: "center" },
  alignOffset: { type: Number, required: false },
  alignFlip: { type: Boolean, required: false },
  avoidCollisions: { type: Boolean, required: false },
  collisionBoundary: { type: null, required: false },
  collisionPadding: { type: [Number, Object], required: false },
  arrowPadding: { type: Number, required: false },
  sticky: { type: String, required: false },
  hideWhenDetached: { type: Boolean, required: false },
  positionStrategy: { type: String, required: false },
  updatePositionStrategy: { type: String, required: false },
  disableUpdateOnLayoutShift: { type: Boolean, required: false },
  prioritizePosition: { type: Boolean, required: false },
  reference: { type: null, required: false },
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
  disableOutsidePointerEvents: { type: Boolean, required: false },
  class: { type: null, required: false },
});
const emits = defineEmits([
  "escapeKeyDown",
  "pointerDownOutside",
  "focusOutside",
  "interactOutside",
]);

const delegatedProps = reactiveOmit(props, "class");

const forwarded = useForwardPropsEmits(delegatedProps, emits);
</script>

<template>
  <ComboboxPortal>
    <ComboboxContent
      v-bind="forwarded"
      :class="
        cn(
          'z-50 w-[200px] rounded-md border bg-popover text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
          props.class,
        )
      "
    >
      <ComboboxViewport>
        <slot />
      </ComboboxViewport>
    </ComboboxContent>
  </ComboboxPortal>
</template>



================================================
FILE: resources/js/Components/ui/combobox/ComboboxSeparator.vue
================================================
<script setup>
import { reactiveOmit } from "@vueuse/core";
import { ComboboxSeparator } from "reka-ui";
import { cn } from "@/lib/utils";

const props = defineProps({
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
  class: { type: null, required: false },
});

const delegatedProps = reactiveOmit(props, "class");
</script>

<template>
  <ComboboxSeparator
    v-bind="delegatedProps"
    :class="cn('-mx-1 h-px bg-border', props.class)"
  >
    <slot />
  </ComboboxSeparator>
</template>



================================================
FILE: resources/js/Components/ui/combobox/ComboboxTrigger.vue
================================================
<script setup>
import { reactiveOmit } from "@vueuse/core";
import { ComboboxTrigger, useForwardProps } from "reka-ui";
import { cn } from "@/lib/utils";

const props = defineProps({
  disabled: { type: Boolean, required: false },
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
  class: { type: null, required: false },
});

const delegatedProps = reactiveOmit(props, "class");

const forwarded = useForwardProps(delegatedProps);
</script>

<template>
  <ComboboxTrigger v-bind="forwarded" :class="cn('', props.class)" tabindex="0">
    <slot />
  </ComboboxTrigger>
</template>



================================================
FILE: resources/js/Components/ui/combobox/index.js
================================================
export { default as Combobox } from "./Combobox.vue";
export { default as ComboboxAnchor } from "./ComboboxAnchor.vue";
export { default as ComboboxEmpty } from "./ComboboxEmpty.vue";
export { default as ComboboxGroup } from "./ComboboxGroup.vue";
export { default as ComboboxInput } from "./ComboboxInput.vue";
export { default as ComboboxItem } from "./ComboboxItem.vue";
export { default as ComboboxList } from "./ComboboxList.vue";
export { default as ComboboxSeparator } from "./ComboboxSeparator.vue";

export {
  ComboboxCancel,
  ComboboxItemIndicator,
  ComboboxTrigger,
} from "reka-ui";



================================================
FILE: resources/js/Components/ui/dialog/Dialog.vue
================================================
<script setup>
import { DialogRoot, useForwardPropsEmits } from "reka-ui";

const props = defineProps({
  open: { type: Boolean, required: false },
  defaultOpen: { type: Boolean, required: false },
  modal: { type: Boolean, required: false },
});
const emits = defineEmits(["update:open"]);

const forwarded = useForwardPropsEmits(props, emits);
</script>

<template>
  <DialogRoot v-bind="forwarded">
    <slot />
  </DialogRoot>
</template>



================================================
FILE: resources/js/Components/ui/dialog/DialogClose.vue
================================================
<script setup>
import { DialogClose } from "reka-ui";

const props = defineProps({
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
});
</script>

<template>
  <DialogClose v-bind="props">
    <slot />
  </DialogClose>
</template>



================================================
FILE: resources/js/Components/ui/dialog/DialogContent.vue
================================================
<script setup>
import { reactiveOmit } from "@vueuse/core";
import { X } from "lucide-vue-next";
import {
  DialogClose,
  DialogContent,
  DialogOverlay,
  DialogPortal,
  useForwardPropsEmits,
} from "reka-ui";
import { cn } from "@/lib/utils";

const props = defineProps({
  forceMount: { type: Boolean, required: false },
  disableOutsidePointerEvents: { type: Boolean, required: false },
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
  class: { type: null, required: false },
});
const emits = defineEmits([
  "escapeKeyDown",
  "pointerDownOutside",
  "focusOutside",
  "interactOutside",
  "openAutoFocus",
  "closeAutoFocus",
]);

const delegatedProps = reactiveOmit(props, "class");

const forwarded = useForwardPropsEmits(delegatedProps, emits);
</script>

<template>
  <DialogPortal>
    <DialogOverlay
      class="fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0"
    />
    <DialogContent
      v-bind="forwarded"
      :class="
        cn(
          'fixed left-1/2 top-1/2 z-50 grid w-full max-w-lg -translate-x-1/2 -translate-y-1/2 gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',
          props.class,
        )
      "
    >
      <slot />

      <DialogClose
        class="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground"
      >
        <X class="w-4 h-4" />
        <span class="sr-only">Close</span>
      </DialogClose>
    </DialogContent>
  </DialogPortal>
</template>



================================================
FILE: resources/js/Components/ui/dialog/DialogDescription.vue
================================================
<script setup>
import { reactiveOmit } from "@vueuse/core";
import { DialogDescription, useForwardProps } from "reka-ui";
import { cn } from "@/lib/utils";

const props = defineProps({
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
  class: { type: null, required: false },
});

const delegatedProps = reactiveOmit(props, "class");

const forwardedProps = useForwardProps(delegatedProps);
</script>

<template>
  <DialogDescription
    v-bind="forwardedProps"
    :class="cn('text-sm text-muted-foreground', props.class)"
  >
    <slot />
  </DialogDescription>
</template>



================================================
FILE: resources/js/Components/ui/dialog/DialogFooter.vue
================================================
<script setup>
import { cn } from "@/lib/utils";

const props = defineProps({
  class: { type: null, required: false },
});
</script>

<template>
  <div
    :class="
      cn(
        'flex flex-col-reverse sm:flex-row sm:justify-end sm:gap-x-2',
        props.class,
      )
    "
  >
    <slot />
  </div>
</template>



================================================
FILE: resources/js/Components/ui/dialog/DialogHeader.vue
================================================
<script setup>
import { cn } from "@/lib/utils";

const props = defineProps({
  class: { type: null, required: false },
});
</script>

<template>
  <div
    :class="cn('flex flex-col gap-y-1.5 text-center sm:text-left', props.class)"
  >
    <slot />
  </div>
</template>



================================================
FILE: resources/js/Components/ui/dialog/DialogScrollContent.vue
================================================
<script setup>
import { reactiveOmit } from "@vueuse/core";
import { X } from "lucide-vue-next";
import {
  DialogClose,
  DialogContent,
  DialogOverlay,
  DialogPortal,
  useForwardPropsEmits,
} from "reka-ui";
import { cn } from "@/lib/utils";

const props = defineProps({
  forceMount: { type: Boolean, required: false },
  disableOutsidePointerEvents: { type: Boolean, required: false },
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
  class: { type: null, required: false },
});
const emits = defineEmits([
  "escapeKeyDown",
  "pointerDownOutside",
  "focusOutside",
  "interactOutside",
  "openAutoFocus",
  "closeAutoFocus",
]);

const delegatedProps = reactiveOmit(props, "class");

const forwarded = useForwardPropsEmits(delegatedProps, emits);
</script>

<template>
  <DialogPortal>
    <DialogOverlay
      class="fixed inset-0 z-50 grid place-items-center overflow-y-auto bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0"
    >
      <DialogContent
        :class="
          cn(
            'relative z-50 grid w-full max-w-lg my-8 gap-4 border border-border bg-background p-6 shadow-lg duration-200 sm:rounded-lg md:w-full',
            props.class,
          )
        "
        v-bind="forwarded"
        @pointer-down-outside="
          (event) => {
            const originalEvent = event.detail.originalEvent;
            const target = originalEvent.target;
            if (
              originalEvent.offsetX > target.clientWidth ||
              originalEvent.offsetY > target.clientHeight
            ) {
              event.preventDefault();
            }
          }
        "
      >
        <slot />

        <DialogClose
          class="absolute top-4 right-4 p-0.5 transition-colors rounded-md hover:bg-secondary"
        >
          <X class="w-4 h-4" />
          <span class="sr-only">Close</span>
        </DialogClose>
      </DialogContent>
    </DialogOverlay>
  </DialogPortal>
</template>



================================================
FILE: resources/js/Components/ui/dialog/DialogTitle.vue
================================================
<script setup>
import { reactiveOmit } from "@vueuse/core";
import { DialogTitle, useForwardProps } from "reka-ui";
import { cn } from "@/lib/utils";

const props = defineProps({
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
  class: { type: null, required: false },
});

const delegatedProps = reactiveOmit(props, "class");

const forwardedProps = useForwardProps(delegatedProps);
</script>

<template>
  <DialogTitle
    v-bind="forwardedProps"
    :class="
      cn('text-lg font-semibold leading-none tracking-tight', props.class)
    "
  >
    <slot />
  </DialogTitle>
</template>



================================================
FILE: resources/js/Components/ui/dialog/DialogTrigger.vue
================================================
<script setup>
import { DialogTrigger } from "reka-ui";

const props = defineProps({
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
});
</script>

<template>
  <DialogTrigger v-bind="props">
    <slot />
  </DialogTrigger>
</template>



================================================
FILE: resources/js/Components/ui/dialog/index.js
================================================
export { default as Dialog } from "./Dialog.vue";
export { default as DialogClose } from "./DialogClose.vue";
export { default as DialogContent } from "./DialogContent.vue";
export { default as DialogDescription } from "./DialogDescription.vue";
export { default as DialogFooter } from "./DialogFooter.vue";
export { default as DialogHeader } from "./DialogHeader.vue";
export { default as DialogScrollContent } from "./DialogScrollContent.vue";
export { default as DialogTitle } from "./DialogTitle.vue";
export { default as DialogTrigger } from "./DialogTrigger.vue";



================================================
FILE: resources/js/Components/ui/dropdown-menu/DropdownMenu.vue
================================================
<script setup>
import { DropdownMenuRoot, useForwardPropsEmits } from "reka-ui";

const props = defineProps({
  defaultOpen: { type: Boolean, required: false },
  open: { type: Boolean, required: false },
  dir: { type: String, required: false },
  modal: { type: Boolean, required: false },
});
const emits = defineEmits(["update:open"]);

const forwarded = useForwardPropsEmits(props, emits);
</script>

<template>
  <DropdownMenuRoot v-bind="forwarded">
    <slot />
  </DropdownMenuRoot>
</template>



================================================
FILE: resources/js/Components/ui/dropdown-menu/DropdownMenuCheckboxItem.vue
================================================
<script setup>
import { reactiveOmit } from "@vueuse/core";
import { Check } from "lucide-vue-next";
import {
  DropdownMenuCheckboxItem,
  DropdownMenuItemIndicator,
  useForwardPropsEmits,
} from "reka-ui";
import { cn } from "@/lib/utils";

const props = defineProps({
  modelValue: { type: [Boolean, String], required: false },
  disabled: { type: Boolean, required: false },
  textValue: { type: String, required: false },
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
  class: { type: null, required: false },
});
const emits = defineEmits(["select", "update:modelValue"]);

const delegatedProps = reactiveOmit(props, "class");

const forwarded = useForwardPropsEmits(delegatedProps, emits);
</script>

<template>
  <DropdownMenuCheckboxItem
    v-bind="forwarded"
    :class="
      cn(
        'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
        props.class,
      )
    "
  >
    <span class="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuItemIndicator>
        <Check class="w-4 h-4" />
      </DropdownMenuItemIndicator>
    </span>
    <slot />
  </DropdownMenuCheckboxItem>
</template>



================================================
FILE: resources/js/Components/ui/dropdown-menu/DropdownMenuContent.vue
================================================
<script setup>
import { reactiveOmit } from "@vueuse/core";
import {
  DropdownMenuContent,
  DropdownMenuPortal,
  useForwardPropsEmits,
} from "reka-ui";
import { cn } from "@/lib/utils";

const props = defineProps({
  forceMount: { type: Boolean, required: false },
  loop: { type: Boolean, required: false },
  side: { type: null, required: false },
  sideOffset: { type: Number, required: false, default: 4 },
  sideFlip: { type: Boolean, required: false },
  align: { type: null, required: false },
  alignOffset: { type: Number, required: false },
  alignFlip: { type: Boolean, required: false },
  avoidCollisions: { type: Boolean, required: false },
  collisionBoundary: { type: null, required: false },
  collisionPadding: { type: [Number, Object], required: false },
  arrowPadding: { type: Number, required: false },
  sticky: { type: String, required: false },
  hideWhenDetached: { type: Boolean, required: false },
  positionStrategy: { type: String, required: false },
  updatePositionStrategy: { type: String, required: false },
  disableUpdateOnLayoutShift: { type: Boolean, required: false },
  prioritizePosition: { type: Boolean, required: false },
  reference: { type: null, required: false },
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
  class: { type: null, required: false },
});
const emits = defineEmits([
  "escapeKeyDown",
  "pointerDownOutside",
  "focusOutside",
  "interactOutside",
  "closeAutoFocus",
]);

const delegatedProps = reactiveOmit(props, "class");

const forwarded = useForwardPropsEmits(delegatedProps, emits);
</script>

<template>
  <DropdownMenuPortal>
    <DropdownMenuContent
      v-bind="forwarded"
      :class="
        cn(
          'z-50 min-w-32 overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
          props.class,
        )
      "
    >
      <slot />
    </DropdownMenuContent>
  </DropdownMenuPortal>
</template>



================================================
FILE: resources/js/Components/ui/dropdown-menu/DropdownMenuGroup.vue
================================================
<script setup>
import { DropdownMenuGroup } from "reka-ui";

const props = defineProps({
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
});
</script>

<template>
  <DropdownMenuGroup v-bind="props">
    <slot />
  </DropdownMenuGroup>
</template>



================================================
FILE: resources/js/Components/ui/dropdown-menu/DropdownMenuItem.vue
================================================
<script setup>
import { reactiveOmit } from "@vueuse/core";
import { DropdownMenuItem, useForwardProps } from "reka-ui";
import { cn } from "@/lib/utils";

const props = defineProps({
  disabled: { type: Boolean, required: false },
  textValue: { type: String, required: false },
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
  class: { type: null, required: false },
  inset: { type: Boolean, required: false },
});

const delegatedProps = reactiveOmit(props, "class");

const forwardedProps = useForwardProps(delegatedProps);
</script>

<template>
  <DropdownMenuItem
    v-bind="forwardedProps"
    :class="
      cn(
        'relative flex cursor-default select-none items-center rounded-sm gap-2 px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0',
        inset && 'pl-8',
        props.class,
      )
    "
  >
    <slot />
  </DropdownMenuItem>
</template>



================================================
FILE: resources/js/Components/ui/dropdown-menu/DropdownMenuLabel.vue
================================================
<script setup>
import { reactiveOmit } from "@vueuse/core";
import { DropdownMenuLabel, useForwardProps } from "reka-ui";
import { cn } from "@/lib/utils";

const props = defineProps({
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
  class: { type: null, required: false },
  inset: { type: Boolean, required: false },
});

const delegatedProps = reactiveOmit(props, "class");

const forwardedProps = useForwardProps(delegatedProps);
</script>

<template>
  <DropdownMenuLabel
    v-bind="forwardedProps"
    :class="
      cn('px-2 py-1.5 text-sm font-semibold', inset && 'pl-8', props.class)
    "
  >
    <slot />
  </DropdownMenuLabel>
</template>



================================================
FILE: resources/js/Components/ui/dropdown-menu/DropdownMenuRadioGroup.vue
================================================
<script setup>
import { DropdownMenuRadioGroup, useForwardPropsEmits } from "reka-ui";

const props = defineProps({
  modelValue: { type: String, required: false },
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
});
const emits = defineEmits(["update:modelValue"]);

const forwarded = useForwardPropsEmits(props, emits);
</script>

<template>
  <DropdownMenuRadioGroup v-bind="forwarded">
    <slot />
  </DropdownMenuRadioGroup>
</template>



================================================
FILE: resources/js/Components/ui/dropdown-menu/DropdownMenuRadioItem.vue
================================================
<script setup>
import { reactiveOmit } from "@vueuse/core";
import { Circle } from "lucide-vue-next";
import {
  DropdownMenuItemIndicator,
  DropdownMenuRadioItem,
  useForwardPropsEmits,
} from "reka-ui";
import { cn } from "@/lib/utils";

const props = defineProps({
  value: { type: String, required: true },
  disabled: { type: Boolean, required: false },
  textValue: { type: String, required: false },
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
  class: { type: null, required: false },
});

const emits = defineEmits(["select"]);

const delegatedProps = reactiveOmit(props, "class");

const forwarded = useForwardPropsEmits(delegatedProps, emits);
</script>

<template>
  <DropdownMenuRadioItem
    v-bind="forwarded"
    :class="
      cn(
        'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
        props.class,
      )
    "
  >
    <span class="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuItemIndicator>
        <Circle class="h-4 w-4 fill-current" />
      </DropdownMenuItemIndicator>
    </span>
    <slot />
  </DropdownMenuRadioItem>
</template>



================================================
FILE: resources/js/Components/ui/dropdown-menu/DropdownMenuSeparator.vue
================================================
<script setup>
import { reactiveOmit } from "@vueuse/core";
import { DropdownMenuSeparator } from "reka-ui";
import { cn } from "@/lib/utils";

const props = defineProps({
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
  class: { type: null, required: false },
});

const delegatedProps = reactiveOmit(props, "class");
</script>

<template>
  <DropdownMenuSeparator
    v-bind="delegatedProps"
    :class="cn('-mx-1 my-1 h-px bg-muted', props.class)"
  />
</template>



================================================
FILE: resources/js/Components/ui/dropdown-menu/DropdownMenuShortcut.vue
================================================
<script setup>
import { cn } from "@/lib/utils";

const props = defineProps({
  class: { type: null, required: false },
});
</script>

<template>
  <span :class="cn('ml-auto text-xs tracking-widest opacity-60', props.class)">
    <slot />
  </span>
</template>



================================================
FILE: resources/js/Components/ui/dropdown-menu/DropdownMenuSub.vue
================================================
<script setup>
import { DropdownMenuSub, useForwardPropsEmits } from "reka-ui";

const props = defineProps({
  defaultOpen: { type: Boolean, required: false },
  open: { type: Boolean, required: false },
});
const emits = defineEmits(["update:open"]);

const forwarded = useForwardPropsEmits(props, emits);
</script>

<template>
  <DropdownMenuSub v-bind="forwarded">
    <slot />
  </DropdownMenuSub>
</template>



================================================
FILE: resources/js/Components/ui/dropdown-menu/DropdownMenuSubContent.vue
================================================
<script setup>
import { reactiveOmit } from "@vueuse/core";
import { DropdownMenuSubContent, useForwardPropsEmits } from "reka-ui";
import { cn } from "@/lib/utils";

const props = defineProps({
  forceMount: { type: Boolean, required: false },
  loop: { type: Boolean, required: false },
  sideOffset: { type: Number, required: false },
  sideFlip: { type: Boolean, required: false },
  alignOffset: { type: Number, required: false },
  alignFlip: { type: Boolean, required: false },
  avoidCollisions: { type: Boolean, required: false },
  collisionBoundary: { type: null, required: false },
  collisionPadding: { type: [Number, Object], required: false },
  arrowPadding: { type: Number, required: false },
  sticky: { type: String, required: false },
  hideWhenDetached: { type: Boolean, required: false },
  positionStrategy: { type: String, required: false },
  updatePositionStrategy: { type: String, required: false },
  disableUpdateOnLayoutShift: { type: Boolean, required: false },
  prioritizePosition: { type: Boolean, required: false },
  reference: { type: null, required: false },
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
  class: { type: null, required: false },
});
const emits = defineEmits([
  "escapeKeyDown",
  "pointerDownOutside",
  "focusOutside",
  "interactOutside",
  "entryFocus",
  "openAutoFocus",
  "closeAutoFocus",
]);

const delegatedProps = reactiveOmit(props, "class");

const forwarded = useForwardPropsEmits(delegatedProps, emits);
</script>

<template>
  <DropdownMenuSubContent
    v-bind="forwarded"
    :class="
      cn(
        'z-50 min-w-32 overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        props.class,
      )
    "
  >
    <slot />
  </DropdownMenuSubContent>
</template>



================================================
FILE: resources/js/Components/ui/dropdown-menu/DropdownMenuSubTrigger.vue
================================================
<script setup>
import { reactiveOmit } from "@vueuse/core";
import { ChevronRight } from "lucide-vue-next";
import { DropdownMenuSubTrigger, useForwardProps } from "reka-ui";
import { cn } from "@/lib/utils";

const props = defineProps({
  disabled: { type: Boolean, required: false },
  textValue: { type: String, required: false },
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
  class: { type: null, required: false },
});

const delegatedProps = reactiveOmit(props, "class");

const forwardedProps = useForwardProps(delegatedProps);
</script>

<template>
  <DropdownMenuSubTrigger
    v-bind="forwardedProps"
    :class="
      cn(
        'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent',
        props.class,
      )
    "
  >
    <slot />
    <ChevronRight class="ml-auto h-4 w-4" />
  </DropdownMenuSubTrigger>
</template>



================================================
FILE: resources/js/Components/ui/dropdown-menu/DropdownMenuTrigger.vue
================================================
<script setup>
import { DropdownMenuTrigger, useForwardProps } from "reka-ui";

const props = defineProps({
  disabled: { type: Boolean, required: false },
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
});

const forwardedProps = useForwardProps(props);
</script>

<template>
  <DropdownMenuTrigger class="outline-none" v-bind="forwardedProps">
    <slot />
  </DropdownMenuTrigger>
</template>



================================================
FILE: resources/js/Components/ui/dropdown-menu/index.js
================================================
export { default as DropdownMenu } from "./DropdownMenu.vue";

export { default as DropdownMenuCheckboxItem } from "./DropdownMenuCheckboxItem.vue";
export { default as DropdownMenuContent } from "./DropdownMenuContent.vue";
export { default as DropdownMenuGroup } from "./DropdownMenuGroup.vue";
export { default as DropdownMenuItem } from "./DropdownMenuItem.vue";
export { default as DropdownMenuLabel } from "./DropdownMenuLabel.vue";
export { default as DropdownMenuRadioGroup } from "./DropdownMenuRadioGroup.vue";
export { default as DropdownMenuRadioItem } from "./DropdownMenuRadioItem.vue";
export { default as DropdownMenuSeparator } from "./DropdownMenuSeparator.vue";
export { default as DropdownMenuShortcut } from "./DropdownMenuShortcut.vue";
export { default as DropdownMenuSub } from "./DropdownMenuSub.vue";
export { default as DropdownMenuSubContent } from "./DropdownMenuSubContent.vue";
export { default as DropdownMenuSubTrigger } from "./DropdownMenuSubTrigger.vue";
export { default as DropdownMenuTrigger } from "./DropdownMenuTrigger.vue";
export { DropdownMenuPortal } from "reka-ui";



================================================
FILE: resources/js/Components/ui/input/index.js
================================================
export { default as Input } from "./Input.vue";



================================================
FILE: resources/js/Components/ui/input/Input.vue
================================================
<script setup>
import { useVModel } from "@vueuse/core";
import { cn } from "@/lib/utils";

const props = defineProps({
  defaultValue: { type: [String, Number], required: false },
  modelValue: { type: [String, Number], required: false },
  class: { type: null, required: false },
});

const emits = defineEmits(["update:modelValue"]);

const modelValue = useVModel(props, "modelValue", emits, {
  passive: true,
  defaultValue: props.defaultValue,
});
</script>

<template>
  <input
    v-model="modelValue"
    :class="
      cn(
        'flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50',
        props.class,
      )
    "
  />
</template>



================================================
FILE: resources/js/Components/ui/label/index.js
================================================
export { default as Label } from "./Label.vue";



================================================
FILE: resources/js/Components/ui/label/Label.vue
================================================
<script setup>
import { reactiveOmit } from "@vueuse/core";
import { Label } from "reka-ui";
import { cn } from "@/lib/utils";

const props = defineProps({
  for: { type: String, required: false },
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
  class: { type: null, required: false },
});

const delegatedProps = reactiveOmit(props, "class");
</script>

<template>
  <Label
    v-bind="delegatedProps"
    :class="
      cn(
        'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70',
        props.class,
      )
    "
  >
    <slot />
  </Label>
</template>



================================================
FILE: resources/js/Components/ui/select/index.js
================================================
export { default as Select } from "./Select.vue";
export { default as SelectContent } from "./SelectContent.vue";
export { default as SelectGroup } from "./SelectGroup.vue";
export { default as SelectItem } from "./SelectItem.vue";
export { default as SelectItemText } from "./SelectItemText.vue";
export { default as SelectLabel } from "./SelectLabel.vue";
export { default as SelectScrollDownButton } from "./SelectScrollDownButton.vue";
export { default as SelectScrollUpButton } from "./SelectScrollUpButton.vue";
export { default as SelectSeparator } from "./SelectSeparator.vue";
export { default as SelectTrigger } from "./SelectTrigger.vue";
export { default as SelectValue } from "./SelectValue.vue";



================================================
FILE: resources/js/Components/ui/select/Select.vue
================================================
<script setup>
import { SelectRoot, useForwardPropsEmits } from "reka-ui";

const props = defineProps({
  open: { type: Boolean, required: false },
  defaultOpen: { type: Boolean, required: false },
  defaultValue: { type: null, required: false },
  modelValue: { type: null, required: false },
  by: { type: [String, Function], required: false },
  dir: { type: String, required: false },
  multiple: { type: Boolean, required: false },
  autocomplete: { type: String, required: false },
  disabled: { type: Boolean, required: false },
  name: { type: String, required: false },
  required: { type: Boolean, required: false },
});
const emits = defineEmits(["update:modelValue", "update:open"]);

const forwarded = useForwardPropsEmits(props, emits);
</script>

<template>
  <SelectRoot v-bind="forwarded">
    <slot />
  </SelectRoot>
</template>



================================================
FILE: resources/js/Components/ui/select/SelectContent.vue
================================================
<script setup>
import { reactiveOmit } from "@vueuse/core";
import {
  SelectContent,
  SelectPortal,
  SelectViewport,
  useForwardPropsEmits,
} from "reka-ui";
import { cn } from "@/lib/utils";
import { SelectScrollDownButton, SelectScrollUpButton } from ".";

defineOptions({
  inheritAttrs: false,
});

const props = defineProps({
  forceMount: { type: Boolean, required: false },
  position: { type: String, required: false, default: "popper" },
  bodyLock: { type: Boolean, required: false },
  side: { type: null, required: false },
  sideOffset: { type: Number, required: false },
  sideFlip: { type: Boolean, required: false },
  align: { type: null, required: false },
  alignOffset: { type: Number, required: false },
  alignFlip: { type: Boolean, required: false },
  avoidCollisions: { type: Boolean, required: false },
  collisionBoundary: { type: null, required: false },
  collisionPadding: { type: [Number, Object], required: false },
  arrowPadding: { type: Number, required: false },
  sticky: { type: String, required: false },
  hideWhenDetached: { type: Boolean, required: false },
  positionStrategy: { type: String, required: false },
  updatePositionStrategy: { type: String, required: false },
  disableUpdateOnLayoutShift: { type: Boolean, required: false },
  prioritizePosition: { type: Boolean, required: false },
  reference: { type: null, required: false },
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
  class: { type: null, required: false },
});
const emits = defineEmits([
  "closeAutoFocus",
  "escapeKeyDown",
  "pointerDownOutside",
]);

const delegatedProps = reactiveOmit(props, "class");

const forwarded = useForwardPropsEmits(delegatedProps, emits);
</script>

<template>
  <SelectPortal>
    <SelectContent
      v-bind="{ ...forwarded, ...$attrs }"
      :class="
        cn(
          'relative z-50 max-h-96 min-w-32 overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
          position === 'popper' &&
            'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',
          props.class,
        )
      "
    >
      <SelectScrollUpButton />
      <SelectViewport
        :class="
          cn(
            'p-1',
            position === 'popper' &&
              'h-[--reka-select-trigger-height] w-full min-w-[--reka-select-trigger-width]',
          )
        "
      >
        <slot />
      </SelectViewport>
      <SelectScrollDownButton />
    </SelectContent>
  </SelectPortal>
</template>



================================================
FILE: resources/js/Components/ui/select/SelectGroup.vue
================================================
<script setup>
import { reactiveOmit } from "@vueuse/core";
import { SelectGroup } from "reka-ui";
import { cn } from "@/lib/utils";

const props = defineProps({
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
  class: { type: null, required: false },
});

const delegatedProps = reactiveOmit(props, "class");
</script>

<template>
  <SelectGroup :class="cn('p-1 w-full', props.class)" v-bind="delegatedProps">
    <slot />
  </SelectGroup>
</template>



================================================
FILE: resources/js/Components/ui/select/SelectItem.vue
================================================
<script setup>
import { reactiveOmit } from "@vueuse/core";
import { Check } from "lucide-vue-next";
import {
  SelectItem,
  SelectItemIndicator,
  SelectItemText,
  useForwardProps,
} from "reka-ui";
import { cn } from "@/lib/utils";

const props = defineProps({
  value: { type: null, required: true },
  disabled: { type: Boolean, required: false },
  textValue: { type: String, required: false },
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
  class: { type: null, required: false },
});

const delegatedProps = reactiveOmit(props, "class");

const forwardedProps = useForwardProps(delegatedProps);
</script>

<template>
  <SelectItem
    v-bind="forwardedProps"
    :class="
      cn(
        'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
        props.class,
      )
    "
  >
    <span class="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectItemIndicator>
        <Check class="h-4 w-4" />
      </SelectItemIndicator>
    </span>

    <SelectItemText>
      <slot />
    </SelectItemText>
  </SelectItem>
</template>



================================================
FILE: resources/js/Components/ui/select/SelectItemText.vue
================================================
<script setup>
import { SelectItemText } from "reka-ui";

const props = defineProps({
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
});
</script>

<template>
  <SelectItemText v-bind="props">
    <slot />
  </SelectItemText>
</template>



================================================
FILE: resources/js/Components/ui/select/SelectLabel.vue
================================================
<script setup>
import { SelectLabel } from "reka-ui";
import { cn } from "@/lib/utils";

const props = defineProps({
  for: { type: String, required: false },
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
  class: { type: null, required: false },
});
</script>

<template>
  <SelectLabel :class="cn('px-2 py-1.5 text-sm font-semibold', props.class)">
    <slot />
  </SelectLabel>
</template>



================================================
FILE: resources/js/Components/ui/select/SelectScrollDownButton.vue
================================================
<script setup>
import { reactiveOmit } from "@vueuse/core";
import { ChevronDown } from "lucide-vue-next";
import { SelectScrollDownButton, useForwardProps } from "reka-ui";
import { cn } from "@/lib/utils";

const props = defineProps({
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
  class: { type: null, required: false },
});

const delegatedProps = reactiveOmit(props, "class");

const forwardedProps = useForwardProps(delegatedProps);
</script>

<template>
  <SelectScrollDownButton
    v-bind="forwardedProps"
    :class="
      cn('flex cursor-default items-center justify-center py-1', props.class)
    "
  >
    <slot>
      <ChevronDown />
    </slot>
  </SelectScrollDownButton>
</template>



================================================
FILE: resources/js/Components/ui/select/SelectScrollUpButton.vue
================================================
<script setup>
import { reactiveOmit } from "@vueuse/core";
import { ChevronUp } from "lucide-vue-next";
import { SelectScrollUpButton, useForwardProps } from "reka-ui";
import { cn } from "@/lib/utils";

const props = defineProps({
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
  class: { type: null, required: false },
});

const delegatedProps = reactiveOmit(props, "class");

const forwardedProps = useForwardProps(delegatedProps);
</script>

<template>
  <SelectScrollUpButton
    v-bind="forwardedProps"
    :class="
      cn('flex cursor-default items-center justify-center py-1', props.class)
    "
  >
    <slot>
      <ChevronUp />
    </slot>
  </SelectScrollUpButton>
</template>



================================================
FILE: resources/js/Components/ui/select/SelectSeparator.vue
================================================
<script setup>
import { reactiveOmit } from "@vueuse/core";
import { SelectSeparator } from "reka-ui";
import { cn } from "@/lib/utils";

const props = defineProps({
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
  class: { type: null, required: false },
});

const delegatedProps = reactiveOmit(props, "class");
</script>

<template>
  <SelectSeparator
    v-bind="delegatedProps"
    :class="cn('-mx-1 my-1 h-px bg-muted', props.class)"
  />
</template>



================================================
FILE: resources/js/Components/ui/select/SelectTrigger.vue
================================================
<script setup>
import { reactiveOmit } from "@vueuse/core";
import { ChevronDown } from "lucide-vue-next";
import { SelectIcon, SelectTrigger, useForwardProps } from "reka-ui";
import { cn } from "@/lib/utils";

const props = defineProps({
  disabled: { type: Boolean, required: false },
  reference: { type: null, required: false },
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
  class: { type: null, required: false },
});

const delegatedProps = reactiveOmit(props, "class");

const forwardedProps = useForwardProps(delegatedProps);
</script>

<template>
  <SelectTrigger
    v-bind="forwardedProps"
    :class="
      cn(
        'flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:truncate text-start',
        props.class,
      )
    "
  >
    <slot />
    <SelectIcon as-child>
      <ChevronDown class="w-4 h-4 opacity-50 shrink-0" />
    </SelectIcon>
  </SelectTrigger>
</template>



================================================
FILE: resources/js/Components/ui/select/SelectValue.vue
================================================
<script setup>
import { SelectValue } from "reka-ui";

const props = defineProps({
  placeholder: { type: String, required: false },
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
});
</script>

<template>
  <SelectValue v-bind="props">
    <slot />
  </SelectValue>
</template>



================================================
FILE: resources/js/Components/ui/separator/index.js
================================================
export { default as Separator } from "./Separator.vue";



================================================
FILE: resources/js/Components/ui/separator/Separator.vue
================================================
<script setup>
import { reactiveOmit } from "@vueuse/core";
import { Separator } from "reka-ui";
import { cn } from "@/lib/utils";

const props = defineProps({
  orientation: { type: String, required: false, default: "horizontal" },
  decorative: { type: Boolean, required: false, default: true },
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
  class: { type: null, required: false },
});

const delegatedProps = reactiveOmit(props, "class");
</script>

<template>
  <Separator
    v-bind="delegatedProps"
    :class="
      cn(
        'shrink-0 bg-border',
        props.orientation === 'horizontal' ? 'h-px w-full' : 'w-px h-full',
        props.class,
      )
    "
  />
</template>



================================================
FILE: resources/js/Components/ui/sheet/index.js
================================================
import { cva } from "class-variance-authority";

export { default as Sheet } from "./Sheet.vue";
export { default as SheetClose } from "./SheetClose.vue";
export { default as SheetContent } from "./SheetContent.vue";
export { default as SheetDescription } from "./SheetDescription.vue";
export { default as SheetFooter } from "./SheetFooter.vue";
export { default as SheetHeader } from "./SheetHeader.vue";
export { default as SheetTitle } from "./SheetTitle.vue";
export { default as SheetTrigger } from "./SheetTrigger.vue";

export const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  },
);



================================================
FILE: resources/js/Components/ui/sheet/Sheet.vue
================================================
<script setup>
import { DialogRoot, useForwardPropsEmits } from "reka-ui";

const props = defineProps({
  open: { type: Boolean, required: false },
  defaultOpen: { type: Boolean, required: false },
  modal: { type: Boolean, required: false },
});
const emits = defineEmits(["update:open"]);

const forwarded = useForwardPropsEmits(props, emits);
</script>

<template>
  <DialogRoot v-bind="forwarded">
    <slot />
  </DialogRoot>
</template>



================================================
FILE: resources/js/Components/ui/sheet/SheetClose.vue
================================================
<script setup>
import { DialogClose } from "reka-ui";

const props = defineProps({
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
});
</script>

<template>
  <DialogClose v-bind="props">
    <slot />
  </DialogClose>
</template>



================================================
FILE: resources/js/Components/ui/sheet/SheetContent.vue
================================================
<script setup>
import { reactiveOmit } from "@vueuse/core";
import { X } from "lucide-vue-next";
import {
  DialogClose,
  DialogContent,
  DialogOverlay,
  DialogPortal,
  useForwardPropsEmits,
} from "reka-ui";
import { cn } from "@/lib/utils";
import { sheetVariants } from ".";

defineOptions({
  inheritAttrs: false,
});

const props = defineProps({
  class: { type: null, required: false },
  side: { type: null, required: false },
  forceMount: { type: Boolean, required: false },
  disableOutsidePointerEvents: { type: Boolean, required: false },
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
});

const emits = defineEmits([
  "escapeKeyDown",
  "pointerDownOutside",
  "focusOutside",
  "interactOutside",
  "openAutoFocus",
  "closeAutoFocus",
]);

const delegatedProps = reactiveOmit(props, "class", "side");

const forwarded = useForwardPropsEmits(delegatedProps, emits);
</script>

<template>
  <DialogPortal>
    <DialogOverlay
      class="fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0"
    />
    <DialogContent
      :class="cn(sheetVariants({ side }), props.class)"
      v-bind="{ ...forwarded, ...$attrs }"
    >
      <slot />

      <DialogClose
        class="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary"
      >
        <X class="w-4 h-4" />
      </DialogClose>
    </DialogContent>
  </DialogPortal>
</template>



================================================
FILE: resources/js/Components/ui/sheet/SheetDescription.vue
================================================
<script setup>
import { reactiveOmit } from "@vueuse/core";
import { DialogDescription } from "reka-ui";
import { cn } from "@/lib/utils";

const props = defineProps({
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
  class: { type: null, required: false },
});

const delegatedProps = reactiveOmit(props, "class");
</script>

<template>
  <DialogDescription
    :class="cn('text-sm text-muted-foreground', props.class)"
    v-bind="delegatedProps"
  >
    <slot />
  </DialogDescription>
</template>



================================================
FILE: resources/js/Components/ui/sheet/SheetFooter.vue
================================================
<script setup>
import { cn } from "@/lib/utils";

const props = defineProps({
  class: { type: null, required: false },
});
</script>

<template>
  <div
    :class="
      cn(
        'flex flex-col-reverse sm:flex-row sm:justify-end sm:gap-x-2',
        props.class,
      )
    "
  >
    <slot />
  </div>
</template>



================================================
FILE: resources/js/Components/ui/sheet/SheetHeader.vue
================================================
<script setup>
import { cn } from "@/lib/utils";

const props = defineProps({
  class: { type: null, required: false },
});
</script>

<template>
  <div
    :class="cn('flex flex-col gap-y-2 text-center sm:text-left', props.class)"
  >
    <slot />
  </div>
</template>



================================================
FILE: resources/js/Components/ui/sheet/SheetTitle.vue
================================================
<script setup>
import { reactiveOmit } from "@vueuse/core";
import { DialogTitle } from "reka-ui";
import { cn } from "@/lib/utils";

const props = defineProps({
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
  class: { type: null, required: false },
});

const delegatedProps = reactiveOmit(props, "class");
</script>

<template>
  <DialogTitle
    :class="cn('text-lg font-semibold text-foreground', props.class)"
    v-bind="delegatedProps"
  >
    <slot />
  </DialogTitle>
</template>



================================================
FILE: resources/js/Components/ui/sheet/SheetTrigger.vue
================================================
<script setup>
import { DialogTrigger } from "reka-ui";

const props = defineProps({
  asChild: { type: Boolean, required: false },
  as: { type: null, required: false },
});
</script>

<template>
  <DialogTrigger v-bind="props">
    <slot />
  </DialogTrigger>
</template>



================================================
FILE: resources/js/Components/ui/sonner/index.js
================================================
export { default as Toaster } from "./Toaster.vue";



================================================
FILE: resources/js/Components/ui/sonner/Toaster.vue
================================================
<script setup>
import { Toaster as SonnerToaster } from 'vue-sonner'

const props = defineProps({
  position: {
    type: String,
    default: 'bottom-right'
  },
  expand: {
    type: Boolean,
    default: false
  },
  richColors: {
    type: Boolean,
    default: false
  },
  closeButton: {
    type: Boolean,
    default: false
  },
  toastOptions: {
    type: Object,
    default: () => ({})
  }
})
</script>

<template>
  <SonnerToaster
    :position="position"
    :expand="expand"
    :rich-colors="richColors"
    :close-button="closeButton"
    :toast-options="{
      style: {
        background: 'hsl(var(--background))',
        color: 'hsl(var(--foreground))',
        border: '1px solid hsl(var(--border))',
      },
      ...toastOptions
    }"
  />
</template>



================================================
FILE: resources/js/Components/ui/table/index.js
================================================
export { default as Table } from "./Table.vue";
export { default as TableBody } from "./TableBody.vue";
export { default as TableCaption } from "./TableCaption.vue";
export { default as TableCell } from "./TableCell.vue";
export { default as TableEmpty } from "./TableEmpty.vue";
export { default as TableFooter } from "./TableFooter.vue";
export { default as TableHead } from "./TableHead.vue";
export { default as TableHeader } from "./TableHeader.vue";
export { default as TableRow } from "./TableRow.vue";



================================================
FILE: resources/js/Components/ui/table/Table.vue
================================================
<script setup>
import { cn } from "@/lib/utils";

const props = defineProps({
  class: { type: null, required: false },
});
</script>

<template>
  <div class="relative w-full overflow-auto">
    <table :class="cn('w-full caption-bottom text-sm', props.class)">
      <slot />
    </table>
  </div>
</template>



================================================
FILE: resources/js/Components/ui/table/TableBody.vue
================================================
<script setup>
import { cn } from "@/lib/utils";

const props = defineProps({
  class: { type: null, required: false },
});
</script>

<template>
  <tbody :class="cn('[&_tr:last-child]:border-0', props.class)">
    <slot />
  </tbody>
</template>



================================================
FILE: resources/js/Components/ui/table/TableCaption.vue
================================================
<script setup>
import { cn } from "@/lib/utils";

const props = defineProps({
  class: { type: null, required: false },
});
</script>

<template>
  <caption :class="cn('mt-4 text-sm text-muted-foreground', props.class)">
    <slot />
  </caption>
</template>



================================================
FILE: resources/js/Components/ui/table/TableCell.vue
================================================
<script setup>
import { cn } from "@/lib/utils";

const props = defineProps({
  class: { type: null, required: false },
});
</script>

<template>
  <td
    :class="
      cn(
        'p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-0.5',
        props.class,
      )
    "
  >
    <slot />
  </td>
</template>



================================================
FILE: resources/js/Components/ui/table/TableEmpty.vue
================================================
<script setup>
import { reactiveOmit } from "@vueuse/core";
import { cn } from "@/lib/utils";
import TableCell from "./TableCell.vue";
import TableRow from "./TableRow.vue";

const props = defineProps({
  class: { type: null, required: false },
  colspan: { type: Number, required: false, default: 1 },
});

const delegatedProps = reactiveOmit(props, "class");
</script>

<template>
  <TableRow>
    <TableCell
      :class="
        cn(
          'p-4 whitespace-nowrap align-middle text-sm text-foreground',
          props.class,
        )
      "
      v-bind="delegatedProps"
    >
      <div class="flex items-center justify-center py-10">
        <slot />
      </div>
    </TableCell>
  </TableRow>
</template>



================================================
FILE: resources/js/Components/ui/table/TableFooter.vue
================================================
<script setup>
import { cn } from "@/lib/utils";

const props = defineProps({
  class: { type: null, required: false },
});
</script>

<template>
  <tfoot
    :class="
      cn('border-t bg-muted/50 font-medium [&>tr]:last:border-b-0', props.class)
    "
  >
    <slot />
  </tfoot>
</template>



================================================
FILE: resources/js/Components/ui/table/TableHead.vue
================================================
<script setup>
import { cn } from "@/lib/utils";

const props = defineProps({
  class: { type: null, required: false },
});
</script>

<template>
  <th
    :class="
      cn(
        'h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-0.5',
        props.class,
      )
    "
  >
    <slot />
  </th>
</template>



================================================
FILE: resources/js/Components/ui/table/TableHeader.vue
================================================
<script setup>
import { cn } from "@/lib/utils";

const props = defineProps({
  class: { type: null, required: false },
});
</script>

<template>
  <thead :class="cn('[&_tr]:border-b', props.class)">
    <slot />
  </thead>
</template>



================================================
FILE: resources/js/Components/ui/table/TableRow.vue
================================================
<script setup>
import { cn } from "@/lib/utils";

const props = defineProps({
  class: { type: null, required: false },
});
</script>

<template>
  <tr
    :class="
      cn(
        'border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted',
        props.class,
      )
    "
  >
    <slot />
  </tr>
</template>



================================================
FILE: resources/js/Components/ui/textarea/index.js
================================================
export { default as Textarea } from "./Textarea.vue";



================================================
FILE: resources/js/Components/ui/textarea/Textarea.vue
================================================
<script setup>
import { useVModel } from "@vueuse/core";
import { cn } from "@/lib/utils";

const props = defineProps({
  class: { type: null, required: false },
  defaultValue: { type: [String, Number], required: false },
  modelValue: { type: [String, Number], required: false },
});

const emits = defineEmits(["update:modelValue"]);

const modelValue = useVModel(props, "modelValue", emits, {
  passive: true,
  defaultValue: props.defaultValue,
});
</script>

<template>
  <textarea
    v-model="modelValue"
    :class="
      cn(
        'flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50',
        props.class,
      )
    "
  />
</template>



================================================
FILE: resources/js/hooks/useDeleteRecipe.ts
================================================
import { ref } from 'vue';
import { router } from '@inertiajs/vue3';

export function useDeleteRecipe() {
  const isLoading = ref(false);
  const error = ref(null);

  const deleteRecipe = async (recipeId) => {
    if (isLoading.value) return;

    try {
      isLoading.value = true;
      error.value = null;

      // Use Inertia's delete method with promise support
      await new Promise((resolve, reject) => {
        router.delete(`/recipes/${recipeId}`, {
          onSuccess: () => {
            // Success message will be handled by Laravel flash message
            resolve();
          },
          onError: (errors) => {
            const errorMessage = errors?.message || 'Failed to delete recipe. Please try again.';
            error.value = errorMessage;

            // Show error toast if available
            if (window.toast) {
              window.toast.error(errorMessage);
            }

            reject(new Error(errorMessage));
          },
          onFinish: () => {
            isLoading.value = false;
          },
        });
      });

    } catch (err) {
      isLoading.value = false;
      throw err;
    }
  };

  return {
    deleteRecipe,
    isLoading,
    error,
  };
}





================================================
FILE: resources/js/Layouts/AuthenticatedLayout.vue
================================================
<script setup>
import { ref } from 'vue'
import Dropdown from '@/Components/Dropdown.vue'
import DropdownLink from '@/Components/DropdownLink.vue'
import Sidebar from '@/Components/Sidebar.vue'
import { Avatar, AvatarFallback, AvatarImage } from '@/Components/ui/avatar'
import { Toaster } from '@/Components/ui/sonner'
import { User, LogOut } from 'lucide-vue-next'

// Get user initials for avatar fallback
const getUserInitials = (name) => {
  return name
    .split(' ')
    .map(word => word.charAt(0))
    .join('')
    .toUpperCase()
    .slice(0, 2)
}
</script>

<template>
  <div class="min-h-screen bg-gray-50 dark:bg-gray-900">
    <!-- Sidebar Navigation -->
    <Sidebar>
      <div class="flex min-h-screen flex-col">
        <!-- Top Header -->
        <header class="sticky top-0 z-30 border-b border-gray-200 bg-white px-4 py-3 dark:border-gray-700 dark:bg-gray-800">
          <div class="flex items-center justify-between">
            <!-- Page title slot -->
            <div v-if="$slots.header" class="flex-1">
              <slot name="header" />
            </div>
            <div v-else class="flex-1">
              <h1 class="text-lg font-semibold text-gray-900 dark:text-white">
                Menu Maker
              </h1>
            </div>

            <!-- User menu -->
            <div class="flex items-center space-x-4">
              <!-- User avatar dropdown -->
              <Dropdown align="right" width="56">
                <template #trigger>
                  <button
                    type="button"
                    class="flex items-center space-x-3 rounded-lg px-3 py-2 text-sm transition-colors hover:bg-gray-100 focus:bg-gray-100 focus:outline-none dark:hover:bg-gray-700 dark:focus:bg-gray-700"
                    aria-label="Menu u≈ºytkownika"
                  >
                    <Avatar size="sm">
                      <AvatarImage
                        v-if="$page.props.auth.user.avatar"
                        :src="$page.props.auth.user.avatar"
                        :alt="$page.props.auth.user.name"
                      />
                      <AvatarFallback>
                        {{ getUserInitials($page.props.auth.user.name) }}
                      </AvatarFallback>
                    </Avatar>
                    <div class="hidden text-left sm:block">
                      <div class="text-sm font-medium text-gray-900 dark:text-white">
                        {{ $page.props.auth.user.name }}
                      </div>
                      <div class="text-xs text-gray-500 dark:text-gray-400">
                        {{ $page.props.auth.user.email }}
                      </div>
                    </div>
                    <svg
                      class="h-4 w-4 text-gray-400"
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 20 20"
                      fill="currentColor"
                    >
                      <path
                        fill-rule="evenodd"
                        d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                        clip-rule="evenodd"
                      />
                    </svg>
                  </button>
                </template>

                <template #content>
                  <div class="px-4 py-3 border-b border-gray-100 dark:border-gray-600">
                    <div class="text-sm font-medium text-gray-900 dark:text-white">
                      {{ $page.props.auth.user.name }}
                    </div>
                    <div class="text-sm text-gray-500 dark:text-gray-400">
                      {{ $page.props.auth.user.email }}
                    </div>
                  </div>

                  <DropdownLink :href="route('profile.edit')">
                    <div class="flex items-center space-x-2">
                      <User class="h-4 w-4" />
                      <span>Profil</span>
                    </div>
                  </DropdownLink>

                  <DropdownLink
                    :href="route('logout')"
                    method="post"
                    as="button"
                  >
                    <div class="flex items-center space-x-2">
                      <LogOut class="h-4 w-4" />
                      <span>Wyloguj</span>
                    </div>
                  </DropdownLink>
                </template>
              </Dropdown>
            </div>
          </div>
        </header>

        <!-- Main Content -->
        <main class="flex-1 overflow-auto">
          <div class="p-6">
            <slot />
          </div>
        </main>
      </div>
    </Sidebar>

    <!-- Toast notifications -->
    <Toaster />
  </div>
</template>



================================================
FILE: resources/js/Layouts/GuestLayout.vue
================================================
<script setup>
import { ChefHat } from 'lucide-vue-next'
import { Link } from '@inertiajs/vue3'
</script>

<template>
  <div class="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800">
    <div class="flex min-h-screen flex-col items-center justify-center px-4 py-12 sm:px-6 lg:px-8">
      <!-- Logo and branding -->
      <div class="text-center">
        <Link
          href="/"
          class="inline-flex items-center space-x-3 text-2xl font-bold text-gray-900 dark:text-white hover:text-gray-700 dark:hover:text-gray-300 transition-colors"
        >
          <ChefHat class="h-10 w-10 text-primary" />
          <span>Menu Maker</span>
        </Link>
        <p class="mt-2 text-sm text-gray-600 dark:text-gray-400">
          Tw√≥j osobisty asystent kulinarny
        </p>
      </div>

      <!-- Form container -->
      <div class="mt-8 w-full max-w-md">
        <div class="bg-white py-8 px-6 shadow-lg rounded-xl dark:bg-gray-800 border border-gray-200 dark:border-gray-700">
          <slot />
        </div>
      </div>

      <!-- Footer -->
      <div class="mt-8 text-center">
        <p class="text-xs text-gray-500 dark:text-gray-400">
          ¬© 2024 Menu Maker. Wszystkie prawa zastrze≈ºone.
        </p>
      </div>
    </div>
  </div>
</template>



================================================
FILE: resources/js/lib/useLocalStorageStateSync.js
================================================
import { watch, onMounted } from 'vue';

/**
 * Composable for syncing reactive state with localStorage
 * @param {string} key - localStorage key to store the data
 * @param {Object} stateObjects - Object containing reactive state objects to sync
 * @returns {Object} - Object with syncToStorage method
 */
export function useLocalStorageStateSync() {
  const syncToStorage = (key, stateObjects) => {
    // Load initial state from localStorage on mount
    onMounted(() => {
      try {
        const storedState = localStorage.getItem(key);
        if (storedState) {
          const parsedState = JSON.parse(storedState);

          // Restore state from localStorage
          Object.keys(stateObjects).forEach(stateKey => {
            if (parsedState[stateKey] && stateObjects[stateKey]) {
              Object.assign(stateObjects[stateKey], parsedState[stateKey]);
            }
          });
        }
      } catch (error) {
        console.warn('Failed to load state from localStorage:', error);
      }
    });

    // Watch for changes and sync to localStorage
    Object.keys(stateObjects).forEach(stateKey => {
      watch(
        () => stateObjects[stateKey],
        (newState) => {
          try {
            const currentStorage = localStorage.getItem(key);
            const currentState = currentStorage ? JSON.parse(currentStorage) : {};

            currentState[stateKey] = newState;
            localStorage.setItem(key, JSON.stringify(currentState));
          } catch (error) {
            console.warn('Failed to save state to localStorage:', error);
          }
        },
        { deep: true }
      );
    });
  };

  return {
    syncToStorage
  };
}



================================================
FILE: resources/js/lib/utils.js
================================================
import { clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs) {
  return twMerge(clsx(inputs))
}



================================================
FILE: resources/js/Pages/Dashboard.vue
================================================
<script setup>
import AuthenticatedLayout from '@/Layouts/AuthenticatedLayout.vue'
import { Button } from '@/Components/ui/button'
import { Head, Link } from '@inertiajs/vue3'
import { Plus, ChefHat, Calendar, FileText } from 'lucide-vue-next'
</script>

<template>
    <Head title="Dashboard" />

    <AuthenticatedLayout>
        <template #header>
            <h1 class="text-2xl font-bold text-gray-900 dark:text-white">
                Dashboard
            </h1>
        </template>

        <!-- Statistics Cards -->
        <div class="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 mb-8">
            <!-- Recipes Count -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 dark:bg-gray-800 dark:border-gray-700">
                <div class="flex items-center">
                    <div class="p-3 rounded-full bg-blue-100 dark:bg-blue-900">
                        <ChefHat class="h-6 w-6 text-blue-600 dark:text-blue-400" />
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-gray-600 dark:text-gray-400">
                            Liczba przepis√≥w
                        </p>
                        <p class="text-2xl font-bold text-gray-900 dark:text-white">
                            12
                        </p>
                    </div>
                </div>
            </div>

            <!-- Meal Plans Count -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 dark:bg-gray-800 dark:border-gray-700">
                <div class="flex items-center">
                    <div class="p-3 rounded-full bg-green-100 dark:bg-green-900">
                        <Calendar class="h-6 w-6 text-green-600 dark:text-green-400" />
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-gray-600 dark:text-gray-400">
                            Jad≈Çospisy
                        </p>
                        <p class="text-2xl font-bold text-gray-900 dark:text-white">
                            3
                        </p>
                    </div>
                </div>
            </div>

            <!-- Last Generated PDF -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 dark:bg-gray-800 dark:border-gray-700">
                <div class="flex items-center">
                    <div class="p-3 rounded-full bg-purple-100 dark:bg-purple-900">
                        <FileText class="h-6 w-6 text-purple-600 dark:text-purple-400" />
                    </div>
                    <div class="ml-4">
                        <p class="text-sm font-medium text-gray-600 dark:text-gray-400">
                            Ostatni PDF
                        </p>
                        <p class="text-sm font-medium text-gray-900 dark:text-white">
                            2 dni temu
                        </p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Quick Actions -->
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6 dark:bg-gray-800 dark:border-gray-700">
            <h2 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                Szybkie akcje
            </h2>
            <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
                <Button size="lg" class="w-full justify-start" as-child>
                    <Link href="/recipes/create">
                        <Plus class="mr-2 h-5 w-5" />
                        Dodaj przepis
                    </Link>
                </Button>
                <Button variant="outline" size="lg" class="w-full justify-start" as-child>
                    <Link href="/meal-plans/create">
                        <Calendar class="mr-2 h-5 w-5" />
                        Wygeneruj jad≈Çospis
                    </Link>
                </Button>
            </div>
        </div>

        <!-- Welcome Message -->
        <div class="mt-8 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-200 p-6 dark:from-blue-900/20 dark:to-indigo-900/20 dark:border-blue-800">
            <h3 class="text-lg font-medium text-blue-900 dark:text-blue-100">
                Witaj w Menu Maker! üëã
            </h3>
            <p class="mt-2 text-blue-700 dark:text-blue-200">
                Tw√≥j osobisty asystent kulinarny jest gotowy do dzia≈Çania. Zacznij od dodania przepis√≥w, a nastƒôpnie wygeneruj sw√≥j pierwszy jad≈Çospis.
            </p>
        </div>
    </AuthenticatedLayout>
</template>



================================================
FILE: resources/js/Pages/Welcome.vue
================================================
<script setup>
import { Head, Link } from '@inertiajs/vue3';

defineProps({
    canLogin: {
        type: Boolean,
    },
    canRegister: {
        type: Boolean,
    },
    laravelVersion: {
        type: String,
        required: true,
    },
    phpVersion: {
        type: String,
        required: true,
    },
});

function handleImageError() {
    document.getElementById('screenshot-container')?.classList.add('!hidden');
    document.getElementById('docs-card')?.classList.add('!row-span-1');
    document.getElementById('docs-card-content')?.classList.add('!flex-row');
    document.getElementById('background')?.classList.add('!hidden');
}
</script>

<template>
    <Head title="Welcome" />
    <div class="bg-gray-50 text-black/50 dark:bg-black dark:text-white/50">
        <img
            id="background"
            class="absolute -left-20 top-0 max-w-[877px]"
            src="https://laravel.com/assets/img/welcome/background.svg"
        />
        <div
            class="relative flex min-h-screen flex-col items-center justify-center selection:bg-[#FF2D20] selection:text-white"
        >
            <div class="relative w-full max-w-2xl px-6 lg:max-w-7xl">
                <header
                    class="grid grid-cols-2 items-center gap-2 py-10 lg:grid-cols-3"
                >
                    <div class="flex lg:col-start-2 lg:justify-center">
                        <svg
                            class="h-12 w-auto text-white lg:h-16 lg:text-[#FF2D20]"
                            viewBox="0 0 62 65"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            <path
                                d="M61.8548 14.6253C61.8778 14.7102 61.8895 14.7978 61.8897 14.8858V28.5615C61.8898 28.737 61.8434 28.9095 61.7554 29.0614C61.6675 29.2132 61.5409 29.3392 61.3887 29.4265L49.9104 36.0351V49.1337C49.9104 49.4902 49.7209 49.8192 49.4118 49.9987L25.4519 63.7916C25.3971 63.8227 25.3372 63.8427 25.2774 63.8639C25.255 63.8714 25.2338 63.8851 25.2101 63.8913C25.0426 63.9354 24.8666 63.9354 24.6991 63.8913C24.6716 63.8838 24.6467 63.8689 24.6205 63.8589C24.5657 63.8389 24.5084 63.8215 24.456 63.7916L0.501061 49.9987C0.348882 49.9113 0.222437 49.7853 0.134469 49.6334C0.0465019 49.4816 0.000120578 49.3092 0 49.1337L0 8.10652C0 8.01678 0.0124642 7.92953 0.0348998 7.84477C0.0423783 7.8161 0.0598282 7.78993 0.0697995 7.76126C0.0884958 7.70891 0.105946 7.65531 0.133367 7.6067C0.152063 7.5743 0.179485 7.54812 0.20192 7.51821C0.230588 7.47832 0.256763 7.43719 0.290416 7.40229C0.319084 7.37362 0.356476 7.35243 0.388883 7.32751C0.425029 7.29759 0.457436 7.26518 0.498568 7.2415L12.4779 0.345059C12.6296 0.257786 12.8015 0.211853 12.9765 0.211853C13.1515 0.211853 13.3234 0.257786 13.475 0.345059L25.4531 7.2415H25.4556C25.4955 7.26643 25.5292 7.29759 25.5653 7.32626C25.5977 7.35119 25.6339 7.37362 25.6625 7.40104C25.6974 7.43719 25.7224 7.47832 25.7523 7.51821C25.7735 7.54812 25.8021 7.5743 25.8196 7.6067C25.8483 7.65656 25.8645 7.70891 25.8844 7.76126C25.8944 7.78993 25.9118 7.8161 25.9193 7.84602C25.9423 7.93096 25.954 8.01853 25.9542 8.10652V33.7317L35.9355 27.9844V14.8846C35.9355 14.7973 35.948 14.7088 35.9704 14.6253C35.9792 14.5954 35.9954 14.5692 36.0053 14.5405C36.0253 14.4882 36.0427 14.4346 36.0702 14.386C36.0888 14.3536 36.1163 14.3274 36.1375 14.2975C36.1674 14.2576 36.1923 14.2165 36.2272 14.1816C36.2559 14.1529 36.292 14.1317 36.3244 14.1068C36.3618 14.0769 36.3942 14.0445 36.4341 14.0208L48.4147 7.12434C48.5663 7.03694 48.7383 6.99094 48.9133 6.99094C49.0883 6.99094 49.2602 7.03694 49.4118 7.12434L61.3899 14.0208C61.4323 14.0457 61.4647 14.0769 61.5021 14.1055C61.5333 14.1305 61.5694 14.1529 61.5981 14.1803C61.633 14.2165 61.6579 14.2576 61.6878 14.2975C61.7103 14.3274 61.7377 14.3536 61.7551 14.386C61.7838 14.4346 61.8 14.4882 61.8199 14.5405C61.8312 14.5692 61.8474 14.5954 61.8548 14.6253ZM59.893 27.9844V16.6121L55.7013 19.0252L49.9104 22.3593V33.7317L59.8942 27.9844H59.893ZM47.9149 48.5566V37.1768L42.2187 40.4299L25.953 49.7133V61.2003L47.9149 48.5566ZM1.99677 9.83281V48.5566L23.9562 61.199V49.7145L12.4841 43.2219L12.4804 43.2194L12.4754 43.2169C12.4368 43.1945 12.4044 43.1621 12.3682 43.1347C12.3371 43.1097 12.3009 43.0898 12.2735 43.0624L12.271 43.0586C12.2386 43.0275 12.2162 42.9888 12.1887 42.9539C12.1638 42.9203 12.1339 42.8916 12.114 42.8567L12.1127 42.853C12.0903 42.8156 12.0766 42.7707 12.0604 42.7283C12.0442 42.6909 12.023 42.656 12.013 42.6161C12.0005 42.5688 11.998 42.5177 11.9931 42.4691C11.9881 42.4317 11.9781 42.3943 11.9781 42.3569V15.5801L6.18848 12.2446L1.99677 9.83281ZM12.9777 2.36177L2.99764 8.10652L12.9752 13.8513L22.9541 8.10527L12.9752 2.36177H12.9777ZM18.1678 38.2138L23.9574 34.8809V9.83281L19.7657 12.2459L13.9749 15.5801V40.6281L18.1678 38.2138ZM48.9133 9.14105L38.9344 14.8858L48.9133 20.6305L58.8909 14.8846L48.9133 9.14105ZM47.9149 22.3593L42.124 19.0252L37.9323 16.6121V27.9844L43.7219 31.3174L47.9149 33.7317V22.3593ZM24.9533 47.987L39.59 39.631L46.9065 35.4555L36.9352 29.7145L25.4544 36.3242L14.9907 42.3482L24.9533 47.987Z"
                                fill="currentColor"
                            />
                        </svg>
                    </div>
                    <nav v-if="canLogin" class="-mx-3 flex flex-1 justify-end">
                        <Link
                            v-if="$page.props.auth.user"
                            :href="route('dashboard')"
                            class="rounded-md px-3 py-2 text-black ring-1 ring-transparent transition hover:text-black/70 focus:outline-none focus-visible:ring-[#FF2D20] dark:text-white dark:hover:text-white/80 dark:focus-visible:ring-white"
                        >
                            Dashboard
                        </Link>

                        <template v-else>
                            <Link
                                :href="route('login')"
                                class="rounded-md px-3 py-2 text-black ring-1 ring-transparent transition hover:text-black/70 focus:outline-none focus-visible:ring-[#FF2D20] dark:text-white dark:hover:text-white/80 dark:focus-visible:ring-white"
                            >
                                Log in
                            </Link>

                            <Link
                                v-if="canRegister"
                                :href="route('register')"
                                class="rounded-md px-3 py-2 text-black ring-1 ring-transparent transition hover:text-black/70 focus:outline-none focus-visible:ring-[#FF2D20] dark:text-white dark:hover:text-white/80 dark:focus-visible:ring-white"
                            >
                                Register
                            </Link>
                        </template>
                    </nav>
                </header>

                <main class="mt-6">
                    <div class="grid gap-6 lg:grid-cols-2 lg:gap-8">
                        <a
                            href="https://laravel.com/docs"
                            id="docs-card"
                            class="flex flex-col items-start gap-6 overflow-hidden rounded-lg bg-white p-6 shadow-[0px_14px_34px_0px_rgba(0,0,0,0.08)] ring-1 ring-white/[0.05] transition duration-300 hover:text-black/70 hover:ring-black/20 focus:outline-none focus-visible:ring-[#FF2D20] md:row-span-3 lg:p-10 lg:pb-10 dark:bg-zinc-900 dark:ring-zinc-800 dark:hover:text-white/70 dark:hover:ring-zinc-700 dark:focus-visible:ring-[#FF2D20]"
                        >
                            <div
                                id="screenshot-container"
                                class="relative flex w-full flex-1 items-stretch"
                            >
                                <img
                                    src="https://laravel.com/assets/img/welcome/docs-light.svg"
                                    alt="Laravel documentation screenshot"
                                    class="aspect-video h-full w-full flex-1 rounded-[10px] object-cover object-top drop-shadow-[0px_4px_34px_rgba(0,0,0,0.06)] dark:hidden"
                                    @error="handleImageError"
                                />
                                <img
                                    src="https://laravel.com/assets/img/welcome/docs-dark.svg"
                                    alt="Laravel documentation screenshot"
                                    class="hidden aspect-video h-full w-full flex-1 rounded-[10px] object-cover object-top drop-shadow-[0px_4px_34px_rgba(0,0,0,0.25)] dark:block"
                                />
                                <div
                                    class="absolute -bottom-16 -left-16 h-40 w-[calc(100%+8rem)] bg-gradient-to-b from-transparent via-white to-white dark:via-zinc-900 dark:to-zinc-900"
                                ></div>
                            </div>

                            <div
                                class="relative flex items-center gap-6 lg:items-end"
                            >
                                <div
                                    id="docs-card-content"
                                    class="flex items-start gap-6 lg:flex-col"
                                >
                                    <div
                                        class="flex size-12 shrink-0 items-center justify-center rounded-full bg-[#FF2D20]/10 sm:size-16"
                                    >
                                        <svg
                                            class="size-5 sm:size-6"
                                            xmlns="http://www.w3.org/2000/svg"
                                            fill="none"
                                            viewBox="0 0 24 24"
                                        >
                                            <path
                                                fill="#FF2D20"
                                                d="M23 4a1 1 0 0 0-1.447-.894L12.224 7.77a.5.5 0 0 1-.448 0L2.447 3.106A1 1 0 0 0 1 4v13.382a1.99 1.99 0 0 0 1.105 1.79l9.448 4.728c.14.065.293.1.447.1.154-.005.306-.04.447-.105l9.453-4.724a1.99 1.99 0 0 0 1.1-1.789V4ZM3 6.023a.25.25 0 0 1 .362-.223l7.5 3.75a.251.251 0 0 1 .138.223v11.2a.25.25 0 0 1-.362.224l-7.5-3.75a.25.25 0 0 1-.138-.22V6.023Zm18 11.2a.25.25 0 0 1-.138.224l-7.5 3.75a.249.249 0 0 1-.329-.099.249.249 0 0 1-.033-.12V9.772a.251.251 0 0 1 .138-.224l7.5-3.75a.25.25 0 0 1 .362.224v11.2Z"
                                            />
                                            <path
                                                fill="#FF2D20"
                                                d="m3.55 1.893 8 4.048a1.008 1.008 0 0 0 .9 0l8-4.048a1 1 0 0 0-.9-1.785l-7.322 3.706a.506.506 0 0 1-.452 0L4.454.108a1 1 0 0 0-.9 1.785H3.55Z"
                                            />
                                        </svg>
                                    </div>

                                    <div class="pt-3 sm:pt-5 lg:pt-0">
                                        <h2
                                            class="text-xl font-semibold text-black dark:text-white"
                                        >
                                            Documentation
                                        </h2>

                                        <p class="mt-4 text-sm/relaxed">
                                            Laravel has wonderful documentation
                                            covering every aspect of the
                                            framework. Whether you are a
                                            newcomer or have prior experience
                                            with Laravel, we recommend reading
                                            our documentation from beginning to
                                            end.
                                        </p>
                                    </div>
                                </div>

                                <svg
                                    class="size-6 shrink-0 stroke-[#FF2D20]"
                                    xmlns="http://www.w3.org/2000/svg"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    stroke-width="1.5"
                                >
                                    <path
                                        stroke-linecap="round"
                                        stroke-linejoin="round"
                                        d="M4.5 12h15m0 0l-6.75-6.75M19.5 12l-6.75 6.75"
                                    />
                                </svg>
                            </div>
                        </a>

                        <a
                            href="https://laracasts.com"
                            class="flex items-start gap-4 rounded-lg bg-white p-6 shadow-[0px_14px_34px_0px_rgba(0,0,0,0.08)] ring-1 ring-white/[0.05] transition duration-300 hover:text-black/70 hover:ring-black/20 focus:outline-none focus-visible:ring-[#FF2D20] lg:pb-10 dark:bg-zinc-900 dark:ring-zinc-800 dark:hover:text-white/70 dark:hover:ring-zinc-700 dark:focus-visible:ring-[#FF2D20]"
                        >
                            <div
                                class="flex size-12 shrink-0 items-center justify-center rounded-full bg-[#FF2D20]/10 sm:size-16"
                            >
                                <svg
                                    class="size-5 sm:size-6"
                                    xmlns="http://www.w3.org/2000/svg"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                >
                                    <g fill="#FF2D20">
                                        <path
                                            d="M24 8.25a.5.5 0 0 0-.5-.5H.5a.5.5 0 0 0-.5.5v12a2.5 2.5 0 0 0 2.5 2.5h19a2.5 2.5 0 0 0 2.5-2.5v-12Zm-7.765 5.868a1.221 1.221 0 0 1 0 2.264l-6.626 2.776A1.153 1.153 0 0 1 8 18.123v-5.746a1.151 1.151 0 0 1 1.609-1.035l6.626 2.776ZM19.564 1.677a.25.25 0 0 0-.177-.427H15.6a.106.106 0 0 0-.072.03l-4.54 4.543a.25.25 0 0 0 .177.427h3.783c.027 0 .054-.01.073-.03l4.543-4.543ZM22.071 1.318a.047.047 0 0 0-.045.013l-4.492 4.492a.249.249 0 0 0 .038.385.25.25 0 0 0 .14.042h5.784a.5.5 0 0 0 .5-.5v-2a2.5 2.5 0 0 0-1.925-2.432ZM13.014 1.677a.25.25 0 0 0-.178-.427H9.101a.106.106 0 0 0-.073.03l-4.54 4.543a.25.25 0 0 0 .177.427H8.4a.106.106 0 0 0 .073-.03l4.54-4.543ZM6.513 1.677a.25.25 0 0 0-.177-.427H2.5A2.5 2.5 0 0 0 0 3.75v2a.5.5 0 0 0 .5.5h1.4a.106.106 0 0 0 .073-.03l4.54-4.543Z"
                                        />
                                    </g>
                                </svg>
                            </div>

                            <div class="pt-3 sm:pt-5">
                                <h2
                                    class="text-xl font-semibold text-black dark:text-white"
                                >
                                    Laracasts
                                </h2>

                                <p class="mt-4 text-sm/relaxed">
                                    Laracasts offers thousands of video
                                    tutorials on Laravel, PHP, and JavaScript
                                    development. Check them out, see for
                                    yourself, and massively level up your
                                    development skills in the process.
                                </p>
                            </div>

                            <svg
                                class="size-6 shrink-0 self-center stroke-[#FF2D20]"
                                xmlns="http://www.w3.org/2000/svg"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke-width="1.5"
                            >
                                <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    d="M4.5 12h15m0 0l-6.75-6.75M19.5 12l-6.75 6.75"
                                />
                            </svg>
                        </a>

                        <a
                            href="https://laravel-news.com"
                            class="flex items-start gap-4 rounded-lg bg-white p-6 shadow-[0px_14px_34px_0px_rgba(0,0,0,0.08)] ring-1 ring-white/[0.05] transition duration-300 hover:text-black/70 hover:ring-black/20 focus:outline-none focus-visible:ring-[#FF2D20] lg:pb-10 dark:bg-zinc-900 dark:ring-zinc-800 dark:hover:text-white/70 dark:hover:ring-zinc-700 dark:focus-visible:ring-[#FF2D20]"
                        >
                            <div
                                class="flex size-12 shrink-0 items-center justify-center rounded-full bg-[#FF2D20]/10 sm:size-16"
                            >
                                <svg
                                    class="size-5 sm:size-6"
                                    xmlns="http://www.w3.org/2000/svg"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                >
                                    <g fill="#FF2D20">
                                        <path
                                            d="M8.75 4.5H5.5c-.69 0-1.25.56-1.25 1.25v4.75c0 .69.56 1.25 1.25 1.25h3.25c.69 0 1.25-.56 1.25-1.25V5.75c0-.69-.56-1.25-1.25-1.25Z"
                                        />
                                        <path
                                            d="M24 10a3 3 0 0 0-3-3h-2V2.5a2 2 0 0 0-2-2H2a2 2 0 0 0-2 2V20a3.5 3.5 0 0 0 3.5 3.5h17A3.5 3.5 0 0 0 24 20V10ZM3.5 21.5A1.5 1.5 0 0 1 2 20V3a.5.5 0 0 1 .5-.5h14a.5.5 0 0 1 .5.5v17c0 .295.037.588.11.874a.5.5 0 0 1-.484.625L3.5 21.5ZM22 20a1.5 1.5 0 1 1-3 0V9.5a.5.5 0 0 1 .5-.5H21a1 1 0 0 1 1 1v10Z"
                                        />
                                        <path
                                            d="M12.751 6.047h2a.75.75 0 0 1 .75.75v.5a.75.75 0 0 1-.75.75h-2A.75.75 0 0 1 12 7.3v-.5a.75.75 0 0 1 .751-.753ZM12.751 10.047h2a.75.75 0 0 1 .75.75v.5a.75.75 0 0 1-.75.75h-2A.75.75 0 0 1 12 11.3v-.5a.75.75 0 0 1 .751-.753ZM4.751 14.047h10a.75.75 0 0 1 .75.75v.5a.75.75 0 0 1-.75.75h-10A.75.75 0 0 1 4 15.3v-.5a.75.75 0 0 1 .751-.753ZM4.75 18.047h7.5a.75.75 0 0 1 .75.75v.5a.75.75 0 0 1-.75.75h-7.5A.75.75 0 0 1 4 19.3v-.5a.75.75 0 0 1 .75-.753Z"
                                        />
                                    </g>
                                </svg>
                            </div>

                            <div class="pt-3 sm:pt-5">
                                <h2
                                    class="text-xl font-semibold text-black dark:text-white"
                                >
                                    Laravel News
                                </h2>

                                <p class="mt-4 text-sm/relaxed">
                                    Laravel News is a community driven portal
                                    and newsletter aggregating all of the latest
                                    and most important news in the Laravel
                                    ecosystem, including new package releases
                                    and tutorials.
                                </p>
                            </div>

                            <svg
                                class="size-6 shrink-0 self-center stroke-[#FF2D20]"
                                xmlns="http://www.w3.org/2000/svg"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke-width="1.5"
                            >
                                <path
                                    stroke-linecap="round"
                                    stroke-linejoin="round"
                                    d="M4.5 12h15m0 0l-6.75-6.75M19.5 12l-6.75 6.75"
                                />
                            </svg>
                        </a>

                        <div
                            class="flex items-start gap-4 rounded-lg bg-white p-6 shadow-[0px_14px_34px_0px_rgba(0,0,0,0.08)] ring-1 ring-white/[0.05] lg:pb-10 dark:bg-zinc-900 dark:ring-zinc-800"
                        >
                            <div
                                class="flex size-12 shrink-0 items-center justify-center rounded-full bg-[#FF2D20]/10 sm:size-16"
                            >
                                <svg
                                    class="size-5 sm:size-6"
                                    xmlns="http://www.w3.org/2000/svg"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                >
                                    <g fill="#FF2D20">
                                        <path
                                            d="M16.597 12.635a.247.247 0 0 0-.08-.237 2.234 2.234 0 0 1-.769-1.68c.001-.195.03-.39.084-.578a.25.25 0 0 0-.09-.267 8.8 8.8 0 0 0-4.826-1.66.25.25 0 0 0-.268.181 2.5 2.5 0 0 1-2.4 1.824.045.045 0 0 0-.045.037 12.255 12.255 0 0 0-.093 3.86.251.251 0 0 0 .208.214c2.22.366 4.367 1.08 6.362 2.118a.252.252 0 0 0 .32-.079 10.09 10.09 0 0 0 1.597-3.733ZM13.616 17.968a.25.25 0 0 0-.063-.407A19.697 19.697 0 0 0 8.91 15.98a.25.25 0 0 0-.287.325c.151.455.334.898.548 1.328.437.827.981 1.594 1.619 2.28a.249.249 0 0 0 .32.044 29.13 29.13 0 0 0 2.506-1.99ZM6.303 14.105a.25.25 0 0 0 .265-.274 13.048 13.048 0 0 1 .205-4.045.062.062 0 0 0-.022-.07 2.5 2.5 0 0 1-.777-.982.25.25 0 0 0-.271-.149 11 11 0 0 0-5.6 2.815.255.255 0 0 0-.075.163c-.008.135-.02.27-.02.406.002.8.084 1.598.246 2.381a.25.25 0 0 0 .303.193 19.924 19.924 0 0 1 5.746-.438ZM9.228 20.914a.25.25 0 0 0 .1-.393 11.53 11.53 0 0 1-1.5-2.22 12.238 12.238 0 0 1-.91-2.465.248.248 0 0 0-.22-.187 18.876 18.876 0 0 0-5.69.33.249.249 0 0 0-.179.336c.838 2.142 2.272 4 4.132 5.353a.254.254 0 0 0 .15.048c1.41-.01 2.807-.282 4.117-.802ZM18.93 12.957l-.005-.008a.25.25 0 0 0-.268-.082 2.21 2.21 0 0 1-.41.081.25.25 0 0 0-.217.2c-.582 2.66-2.127 5.35-5.75 7.843a.248.248 0 0 0-.09.299.25.25 0 0 0 .065.091 28.703 28.703 0 0 0 2.662 2.12.246.246 0 0 0 .209.037c2.579-.701 4.85-2.242 6.456-4.378a.25.25 0 0 0 .048-.189 13.51 13.51 0 0 0-2.7-6.014ZM5.702 7.058a.254.254 0 0 0 .2-.165A2.488 2.488 0 0 1 7.98 5.245a.093.093 0 0 0 .078-.062 19.734 19.734 0 0 1 3.055-4.74.25.25 0 0 0-.21-.41 12.009 12.009 0 0 0-10.4 8.558.25.25 0 0 0 .373.281 12.912 12.912 0 0 1 4.826-1.814ZM10.773 22.052a.25.25 0 0 0-.28-.046c-.758.356-1.55.635-2.365.833a.25.25 0 0 0-.022.48c1.252.43 2.568.65 3.893.65.1 0 .2 0 .3-.008a.25.25 0 0 0 .147-.444c-.526-.424-1.1-.917-1.673-1.465ZM18.744 8.436a.249.249 0 0 0 .15.228 2.246 2.246 0 0 1 1.352 2.054c0 .337-.08.67-.23.972a.25.25 0 0 0 .042.28l.007.009a15.016 15.016 0 0 1 2.52 4.6.25.25 0 0 0 .37.132.25.25 0 0 0 .096-.114c.623-1.464.944-3.039.945-4.63a12.005 12.005 0 0 0-5.78-10.258.25.25 0 0 0-.373.274c.547 2.109.85 4.274.901 6.453ZM9.61 5.38a.25.25 0 0 0 .08.31c.34.24.616.561.8.935a.25.25 0 0 0 .3.127.631.631 0 0 1 .206-.034c2.054.078 4.036.772 5.69 1.991a.251.251 0 0 0 .267.024c.046-.024.093-.047.141-.067a.25.25 0 0 0 .151-.23A29.98 29.98 0 0 0 15.957.764a.25.25 0 0 0-.16-.164 11.924 11.924 0 0 0-2.21-.518.252.252 0 0 0-.215.076A22.456 22.456 0 0 0 9.61 5.38Z"
                                        />
                                    </g>
                                </svg>
                            </div>

                            <div class="pt-3 sm:pt-5">
                                <h2
                                    class="text-xl font-semibold text-black dark:text-white"
                                >
                                    Vibrant Ecosystem
                                </h2>

                                <p class="mt-4 text-sm/relaxed">
                                    Laravel's robust library of first-party
                                    tools and libraries, such as
                                    <a
                                        href="https://forge.laravel.com"
                                        class="rounded-sm underline hover:text-black focus:outline-none focus-visible:ring-1 focus-visible:ring-[#FF2D20] dark:hover:text-white dark:focus-visible:ring-[#FF2D20]"
                                        >Forge</a
                                    >,
                                    <a
                                        href="https://vapor.laravel.com"
                                        class="rounded-sm underline hover:text-black focus:outline-none focus-visible:ring-1 focus-visible:ring-[#FF2D20] dark:hover:text-white"
                                        >Vapor</a
                                    >,
                                    <a
                                        href="https://nova.laravel.com"
                                        class="rounded-sm underline hover:text-black focus:outline-none focus-visible:ring-1 focus-visible:ring-[#FF2D20] dark:hover:text-white"
                                        >Nova</a
                                    >,
                                    <a
                                        href="https://envoyer.io"
                                        class="rounded-sm underline hover:text-black focus:outline-none focus-visible:ring-1 focus-visible:ring-[#FF2D20] dark:hover:text-white"
                                        >Envoyer</a
                                    >, and
                                    <a
                                        href="https://herd.laravel.com"
                                        class="rounded-sm underline hover:text-black focus:outline-none focus-visible:ring-1 focus-visible:ring-[#FF2D20] dark:hover:text-white"
                                        >Herd</a
                                    >
                                    help you take your projects to the next
                                    level. Pair them with powerful open source
                                    libraries like
                                    <a
                                        href="https://laravel.com/docs/billing"
                                        class="rounded-sm underline hover:text-black focus:outline-none focus-visible:ring-1 focus-visible:ring-[#FF2D20] dark:hover:text-white"
                                        >Cashier</a
                                    >,
                                    <a
                                        href="https://laravel.com/docs/dusk"
                                        class="rounded-sm underline hover:text-black focus:outline-none focus-visible:ring-1 focus-visible:ring-[#FF2D20] dark:hover:text-white"
                                        >Dusk</a
                                    >,
                                    <a
                                        href="https://laravel.com/docs/broadcasting"
                                        class="rounded-sm underline hover:text-black focus:outline-none focus-visible:ring-1 focus-visible:ring-[#FF2D20] dark:hover:text-white"
                                        >Echo</a
                                    >,
                                    <a
                                        href="https://laravel.com/docs/horizon"
                                        class="rounded-sm underline hover:text-black focus:outline-none focus-visible:ring-1 focus-visible:ring-[#FF2D20] dark:hover:text-white"
                                        >Horizon</a
                                    >,
                                    <a
                                        href="https://laravel.com/docs/sanctum"
                                        class="rounded-sm underline hover:text-black focus:outline-none focus-visible:ring-1 focus-visible:ring-[#FF2D20] dark:hover:text-white"
                                        >Sanctum</a
                                    >,
                                    <a
                                        href="https://laravel.com/docs/telescope"
                                        class="rounded-sm underline hover:text-black focus:outline-none focus-visible:ring-1 focus-visible:ring-[#FF2D20] dark:hover:text-white"
                                        >Telescope</a
                                    >, and more.
                                </p>
                            </div>
                        </div>
                    </div>
                </main>

                <footer
                    class="py-16 text-center text-sm text-black dark:text-white/70"
                >
                    Laravel v{{ laravelVersion }} (PHP v{{ phpVersion }})
                </footer>
            </div>
        </div>
    </div>
</template>



================================================
FILE: resources/js/Pages/Auth/ConfirmPassword.vue
================================================
<script setup>
import GuestLayout from '@/Layouts/GuestLayout.vue';
import InputError from '@/Components/InputError.vue';
import InputLabel from '@/Components/InputLabel.vue';
import PrimaryButton from '@/Components/PrimaryButton.vue';
import TextInput from '@/Components/TextInput.vue';
import { Head, useForm } from '@inertiajs/vue3';

const form = useForm({
    password: '',
});

const submit = () => {
    form.post(route('password.confirm'), {
        onFinish: () => form.reset(),
    });
};
</script>

<template>
    <GuestLayout>
        <Head title="Confirm Password" />

        <div class="mb-4 text-sm text-gray-600 dark:text-gray-400">
            This is a secure area of the application. Please confirm your
            password before continuing.
        </div>

        <form @submit.prevent="submit">
            <div>
                <InputLabel for="password" value="Password" />
                <TextInput
                    id="password"
                    type="password"
                    class="mt-1 block w-full"
                    v-model="form.password"
                    required
                    autocomplete="current-password"
                    autofocus
                />
                <InputError class="mt-2" :message="form.errors.password" />
            </div>

            <div class="mt-4 flex justify-end">
                <PrimaryButton
                    class="ms-4"
                    :class="{ 'opacity-25': form.processing }"
                    :disabled="form.processing"
                >
                    Confirm
                </PrimaryButton>
            </div>
        </form>
    </GuestLayout>
</template>



================================================
FILE: resources/js/Pages/Auth/ForgotPassword.vue
================================================
<script setup>
import GuestLayout from '@/Layouts/GuestLayout.vue';
import InputError from '@/Components/InputError.vue';
import InputLabel from '@/Components/InputLabel.vue';
import PrimaryButton from '@/Components/PrimaryButton.vue';
import TextInput from '@/Components/TextInput.vue';
import { Head, useForm } from '@inertiajs/vue3';

defineProps({
    status: {
        type: String,
    },
});

const form = useForm({
    email: '',
});

const submit = () => {
    form.post(route('password.email'));
};
</script>

<template>
    <GuestLayout>
        <Head title="Forgot Password" />

        <div class="mb-4 text-sm text-gray-600 dark:text-gray-400">
            Forgot your password? No problem. Just let us know your email
            address and we will email you a password reset link that will allow
            you to choose a new one.
        </div>

        <div
            v-if="status"
            class="mb-4 text-sm font-medium text-green-600 dark:text-green-400"
        >
            {{ status }}
        </div>

        <form @submit.prevent="submit">
            <div>
                <InputLabel for="email" value="Email" />

                <TextInput
                    id="email"
                    type="email"
                    class="mt-1 block w-full"
                    v-model="form.email"
                    required
                    autofocus
                    autocomplete="username"
                />

                <InputError class="mt-2" :message="form.errors.email" />
            </div>

            <div class="mt-4 flex items-center justify-end">
                <PrimaryButton
                    :class="{ 'opacity-25': form.processing }"
                    :disabled="form.processing"
                >
                    Email Password Reset Link
                </PrimaryButton>
            </div>
        </form>
    </GuestLayout>
</template>



================================================
FILE: resources/js/Pages/Auth/Login.vue
================================================
<script setup>
import Checkbox from '@/Components/Checkbox.vue';
import GuestLayout from '@/Layouts/GuestLayout.vue';
import InputError from '@/Components/InputError.vue';
import InputLabel from '@/Components/InputLabel.vue';
import PrimaryButton from '@/Components/PrimaryButton.vue';
import TextInput from '@/Components/TextInput.vue';
import { Head, Link, useForm } from '@inertiajs/vue3';

defineProps({
    canResetPassword: {
        type: Boolean,
    },
    status: {
        type: String,
    },
});

const form = useForm({
    email: '',
    password: '',
    remember: false,
});

const submit = () => {
    form.post(route('login'), {
        onFinish: () => form.reset('password'),
    });
};
</script>

<template>
    <GuestLayout>
        <Head title="Log in" />

        <div v-if="status" class="mb-4 text-sm font-medium text-green-600">
            {{ status }}
        </div>

        <form @submit.prevent="submit">
            <div>
                <InputLabel for="email" value="Email" />

                <TextInput
                    id="email"
                    type="email"
                    class="mt-1 block w-full"
                    v-model="form.email"
                    required
                    autofocus
                    autocomplete="username"
                />

                <InputError class="mt-2" :message="form.errors.email" />
            </div>

            <div class="mt-4">
                <InputLabel for="password" value="Password" />

                <TextInput
                    id="password"
                    type="password"
                    class="mt-1 block w-full"
                    v-model="form.password"
                    required
                    autocomplete="current-password"
                />

                <InputError class="mt-2" :message="form.errors.password" />
            </div>

            <div class="mt-4 block">
                <label class="flex items-center">
                    <Checkbox name="remember" v-model:checked="form.remember" />
                    <span class="ms-2 text-sm text-gray-600 dark:text-gray-400"
                        >Remember me</span
                    >
                </label>
            </div>

            <div class="mt-4 flex items-center justify-end">
                <Link
                    v-if="canResetPassword"
                    :href="route('password.request')"
                    class="rounded-md text-sm text-gray-600 underline hover:text-gray-900 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 dark:text-gray-400 dark:hover:text-gray-100 dark:focus:ring-offset-gray-800"
                >
                    Forgot your password?
                </Link>

                <PrimaryButton
                    class="ms-4"
                    :class="{ 'opacity-25': form.processing }"
                    :disabled="form.processing"
                >
                    Log in
                </PrimaryButton>
            </div>
        </form>
    </GuestLayout>
</template>



================================================
FILE: resources/js/Pages/Auth/Register.vue
================================================
<script setup>
import GuestLayout from '@/Layouts/GuestLayout.vue';
import InputError from '@/Components/InputError.vue';
import InputLabel from '@/Components/InputLabel.vue';
import PrimaryButton from '@/Components/PrimaryButton.vue';
import TextInput from '@/Components/TextInput.vue';
import { Head, Link, useForm } from '@inertiajs/vue3';

const form = useForm({
    name: '',
    email: '',
    password: '',
    password_confirmation: '',
});

const submit = () => {
    form.post(route('register'), {
        onFinish: () => form.reset('password', 'password_confirmation'),
    });
};
</script>

<template>
    <GuestLayout>
        <Head title="Register" />

        <form @submit.prevent="submit">
            <div>
                <InputLabel for="name" value="Name" />

                <TextInput
                    id="name"
                    type="text"
                    class="mt-1 block w-full"
                    v-model="form.name"
                    required
                    autofocus
                    autocomplete="name"
                />

                <InputError class="mt-2" :message="form.errors.name" />
            </div>

            <div class="mt-4">
                <InputLabel for="email" value="Email" />

                <TextInput
                    id="email"
                    type="email"
                    class="mt-1 block w-full"
                    v-model="form.email"
                    required
                    autocomplete="username"
                />

                <InputError class="mt-2" :message="form.errors.email" />
            </div>

            <div class="mt-4">
                <InputLabel for="password" value="Password" />

                <TextInput
                    id="password"
                    type="password"
                    class="mt-1 block w-full"
                    v-model="form.password"
                    required
                    autocomplete="new-password"
                />

                <InputError class="mt-2" :message="form.errors.password" />
            </div>

            <div class="mt-4">
                <InputLabel
                    for="password_confirmation"
                    value="Confirm Password"
                />

                <TextInput
                    id="password_confirmation"
                    type="password"
                    class="mt-1 block w-full"
                    v-model="form.password_confirmation"
                    required
                    autocomplete="new-password"
                />

                <InputError
                    class="mt-2"
                    :message="form.errors.password_confirmation"
                />
            </div>

            <div class="mt-4 flex items-center justify-end">
                <Link
                    :href="route('login')"
                    class="rounded-md text-sm text-gray-600 underline hover:text-gray-900 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 dark:text-gray-400 dark:hover:text-gray-100 dark:focus:ring-offset-gray-800"
                >
                    Already registered?
                </Link>

                <PrimaryButton
                    class="ms-4"
                    :class="{ 'opacity-25': form.processing }"
                    :disabled="form.processing"
                >
                    Register
                </PrimaryButton>
            </div>
        </form>
    </GuestLayout>
</template>



================================================
FILE: resources/js/Pages/Auth/ResetPassword.vue
================================================
<script setup>
import GuestLayout from '@/Layouts/GuestLayout.vue';
import InputError from '@/Components/InputError.vue';
import InputLabel from '@/Components/InputLabel.vue';
import PrimaryButton from '@/Components/PrimaryButton.vue';
import TextInput from '@/Components/TextInput.vue';
import { Head, useForm } from '@inertiajs/vue3';

const props = defineProps({
    email: {
        type: String,
        required: true,
    },
    token: {
        type: String,
        required: true,
    },
});

const form = useForm({
    token: props.token,
    email: props.email,
    password: '',
    password_confirmation: '',
});

const submit = () => {
    form.post(route('password.store'), {
        onFinish: () => form.reset('password', 'password_confirmation'),
    });
};
</script>

<template>
    <GuestLayout>
        <Head title="Reset Password" />

        <form @submit.prevent="submit">
            <div>
                <InputLabel for="email" value="Email" />

                <TextInput
                    id="email"
                    type="email"
                    class="mt-1 block w-full"
                    v-model="form.email"
                    required
                    autofocus
                    autocomplete="username"
                />

                <InputError class="mt-2" :message="form.errors.email" />
            </div>

            <div class="mt-4">
                <InputLabel for="password" value="Password" />

                <TextInput
                    id="password"
                    type="password"
                    class="mt-1 block w-full"
                    v-model="form.password"
                    required
                    autocomplete="new-password"
                />

                <InputError class="mt-2" :message="form.errors.password" />
            </div>

            <div class="mt-4">
                <InputLabel
                    for="password_confirmation"
                    value="Confirm Password"
                />

                <TextInput
                    id="password_confirmation"
                    type="password"
                    class="mt-1 block w-full"
                    v-model="form.password_confirmation"
                    required
                    autocomplete="new-password"
                />

                <InputError
                    class="mt-2"
                    :message="form.errors.password_confirmation"
                />
            </div>

            <div class="mt-4 flex items-center justify-end">
                <PrimaryButton
                    :class="{ 'opacity-25': form.processing }"
                    :disabled="form.processing"
                >
                    Reset Password
                </PrimaryButton>
            </div>
        </form>
    </GuestLayout>
</template>



================================================
FILE: resources/js/Pages/Auth/VerifyEmail.vue
================================================
<script setup>
import { computed } from 'vue';
import GuestLayout from '@/Layouts/GuestLayout.vue';
import PrimaryButton from '@/Components/PrimaryButton.vue';
import { Head, Link, useForm } from '@inertiajs/vue3';

const props = defineProps({
    status: {
        type: String,
    },
});

const form = useForm({});

const submit = () => {
    form.post(route('verification.send'));
};

const verificationLinkSent = computed(
    () => props.status === 'verification-link-sent',
);
</script>

<template>
    <GuestLayout>
        <Head title="Email Verification" />

        <div class="mb-4 text-sm text-gray-600 dark:text-gray-400">
            Thanks for signing up! Before getting started, could you verify your
            email address by clicking on the link we just emailed to you? If you
            didn't receive the email, we will gladly send you another.
        </div>

        <div
            class="mb-4 text-sm font-medium text-green-600 dark:text-green-400"
            v-if="verificationLinkSent"
        >
            A new verification link has been sent to the email address you
            provided during registration.
        </div>

        <form @submit.prevent="submit">
            <div class="mt-4 flex items-center justify-between">
                <PrimaryButton
                    :class="{ 'opacity-25': form.processing }"
                    :disabled="form.processing"
                >
                    Resend Verification Email
                </PrimaryButton>

                <Link
                    :href="route('logout')"
                    method="post"
                    as="button"
                    class="rounded-md text-sm text-gray-600 underline hover:text-gray-900 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 dark:text-gray-400 dark:hover:text-gray-100 dark:focus:ring-offset-gray-800"
                    >Log Out</Link
                >
            </div>
        </form>
    </GuestLayout>
</template>



================================================
FILE: resources/js/Pages/FamilyMembers/ConfirmDialog.vue
================================================
<script setup>
import { ref } from 'vue'
import { router } from '@inertiajs/vue3'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/Components/ui/dialog'
import { Button } from '@/Components/ui/button'
import { toast } from 'vue-sonner'
import { AlertTriangle, Trash2 } from 'lucide-vue-next'

const props = defineProps({
  open: {
    type: Boolean,
    required: true
  },
  memberId: {
    type: Number,
    required: true
  },
  memberName: {
    type: String,
    required: true
  }
})

const emit = defineEmits(['confirmed', 'cancelled'])

const isDeleting = ref(false)

const handleConfirm = async () => {
  isDeleting.value = true

  router.delete(`/family-members/${props.memberId}`, {
    preserveScroll: true,
    onSuccess: () => {
      emit('confirmed', props.memberId)
      toast.success(`Cz≈Çonek rodziny "${props.memberName}" zosta≈Ç usuniƒôty`)
    },
    onError: (errors) => {
      console.error('Error deleting family member:', errors)
      toast.error('Nie uda≈Ço siƒô usunƒÖƒá cz≈Çonka rodziny')
    },
    onFinish: () => {
      isDeleting.value = false
    }
  })
}

const handleCancel = () => {
  if (!isDeleting.value) {
    emit('cancelled')
  }
}
</script>

<template>
  <Dialog :open="open" @update:open="handleCancel">
    <DialogContent class="sm:max-w-[425px]">
      <DialogHeader>
        <DialogTitle class="flex items-center gap-2 text-red-600">
          <AlertTriangle class="h-5 w-5" />
          Usu≈Ñ cz≈Çonka rodziny
        </DialogTitle>
        <DialogDescription class="text-gray-600 dark:text-gray-300">
          Ta akcja jest nieodwracalna. Wszystkie dane zwiƒÖzane z tym cz≈Çonkiem rodziny zostanƒÖ trwale usuniƒôte.
        </DialogDescription>
      </DialogHeader>

      <div class="py-4">
        <div class="rounded-lg bg-red-50 border border-red-200 p-4 dark:bg-red-900/20 dark:border-red-800">
          <p class="text-sm text-red-800 dark:text-red-200">
            Czy na pewno chcesz usunƒÖƒá cz≈Çonka rodziny:
            <span class="font-semibold">{{ memberName }}</span>?
          </p>
        </div>
      </div>

      <DialogFooter class="gap-2">
        <Button
          variant="outline"
          @click="handleCancel"
          :disabled="isDeleting"
        >
          Anuluj
        </Button>
        <Button
          variant="destructive"
          @click="handleConfirm"
          :disabled="isDeleting"
          class="flex items-center gap-2"
        >
          <Trash2 class="h-4 w-4" />
          {{ isDeleting ? 'Usuwanie...' : 'Usu≈Ñ' }}
        </Button>
      </DialogFooter>
    </DialogContent>
  </Dialog>
</template>



================================================
FILE: resources/js/Pages/FamilyMembers/FamilyMemberTable.vue
================================================
<script setup>
import { ref } from 'vue'
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow
} from '@/Components/ui/table'
import { Button } from '@/Components/ui/button'
import ConfirmDialog from './ConfirmDialog.vue'
import { Edit, Trash2 } from 'lucide-vue-next'

const props = defineProps({
  members: {
    type: Array,
    required: true
  }
})

const emit = defineEmits(['edit', 'deleted'])

// Local state for delete confirmation
const showDeleteDialog = ref(false)
const memberToDelete = ref(null)

// Helper functions
const formatDate = (dateString) => {
  const date = new Date(dateString)
  return date.toLocaleDateString('pl-PL', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  })
}

const formatGender = (gender) => {
  return gender === 'male' ? 'Mƒô≈ºczyzna' : 'Kobieta'
}

const calculateAge = (birthDate) => {
  const today = new Date()
  const birth = new Date(birthDate)
  let age = today.getFullYear() - birth.getFullYear()
  const monthDiff = today.getMonth() - birth.getMonth()

  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
    age--
  }

  return age
}

// Event handlers
const handleEdit = (member) => {
  emit('edit', member)
}

const handleDeleteClick = (member) => {
  memberToDelete.value = member
  showDeleteDialog.value = true
}

const handleDeleteConfirmed = (memberId) => {
  emit('deleted', memberId)
  showDeleteDialog.value = false
  memberToDelete.value = null
}

const handleDeleteCancelled = () => {
  showDeleteDialog.value = false
  memberToDelete.value = null
}
</script>

<template>
  <div class="space-y-4">
    <!-- Table -->
    <div class="overflow-hidden rounded-lg border border-gray-200 dark:border-gray-700">
      <Table>
        <TableHeader>
          <TableRow class="bg-gray-50 dark:bg-gray-800">
            <TableHead class="w-[200px] font-semibold">
              Imiƒô
            </TableHead>
            <TableHead class="w-[150px] font-semibold">
              Data urodzenia
            </TableHead>
            <TableHead class="w-[100px] font-semibold">
              Wiek
            </TableHead>
            <TableHead class="w-[120px] font-semibold">
              P≈Çeƒá
            </TableHead>
            <TableHead class="w-[120px] text-right font-semibold">
              Akcje
            </TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          <TableRow
            v-for="member in members"
            :key="member.id"
            class="hover:bg-gray-50 dark:hover:bg-gray-800/50 transition-colors"
          >
            <TableCell class="font-medium">
              {{ member.first_name }}
            </TableCell>
            <TableCell class="text-gray-600 dark:text-gray-300">
              {{ formatDate(member.birth_date) }}
            </TableCell>
            <TableCell class="text-gray-600 dark:text-gray-300">
              {{ calculateAge(member.birth_date) }} lat
            </TableCell>
            <TableCell class="text-gray-600 dark:text-gray-300">
              {{ formatGender(member.gender) }}
            </TableCell>
            <TableCell class="text-right">
              <div class="flex items-center justify-end gap-2">
                <Button
                  variant="ghost"
                  size="sm"
                  @click="handleEdit(member)"
                  class="h-8 w-8 p-0 hover:bg-blue-50 hover:text-blue-600 dark:hover:bg-blue-900/20"
                  :aria-label="`Edytuj ${member.first_name}`"
                >
                  <Edit class="h-4 w-4" />
                </Button>
                <Button
                  variant="ghost"
                  size="sm"
                  @click="handleDeleteClick(member)"
                  class="h-8 w-8 p-0 hover:bg-red-50 hover:text-red-600 dark:hover:bg-red-900/20"
                  :aria-label="`Usu≈Ñ ${member.first_name}`"
                >
                  <Trash2 class="h-4 w-4" />
                </Button>
              </div>
            </TableCell>
          </TableRow>
        </TableBody>
      </Table>
    </div>

    <!-- Delete Confirmation Dialog -->
    <ConfirmDialog
      v-if="memberToDelete"
      :open="showDeleteDialog"
      :member-id="memberToDelete.id"
      :member-name="memberToDelete.first_name"
      @confirmed="handleDeleteConfirmed"
      @cancelled="handleDeleteCancelled"
    />
  </div>
</template>



================================================
FILE: resources/js/Pages/FamilyMembers/Index.vue
================================================
<script setup>
import { ref, computed } from 'vue'
import { Head, router } from '@inertiajs/vue3'
import AuthenticatedLayout from '@/Layouts/AuthenticatedLayout.vue'
import FamilyMemberTable from './FamilyMemberTable.vue'
import InlineEditDialog from './InlineEditDialog.vue'
import { Button } from '@/Components/ui/button'
import { Plus } from 'lucide-vue-next'

const props = defineProps({
  familyMembers: {
    type: Object,
    required: true
  }
})

// Local state management
const members = ref([...props.familyMembers.data])
const showEditDialog = ref(false)
const editingMember = ref(null)

// Computed properties
const totalMembers = computed(() => members.value.length)

// Event handlers
const handleAddMember = () => {
  editingMember.value = null
  showEditDialog.value = true
}

const handleEditMember = (member) => {
  editingMember.value = member
  showEditDialog.value = true
}

const handleMemberSaved = (savedMember) => {
  if (editingMember.value) {
    // Update existing member
    const index = members.value.findIndex(m => m.id === savedMember.id)
    if (index !== -1) {
      members.value[index] = savedMember
    }
  } else {
    // Add new member at the beginning
    members.value.unshift(savedMember)
  }
  showEditDialog.value = false
  editingMember.value = null
}

const handleMemberDeleted = (memberId) => {
  const index = members.value.findIndex(m => m.id === memberId)
  if (index !== -1) {
    members.value.splice(index, 1)
  }
}

const handleDialogClose = () => {
  showEditDialog.value = false
  editingMember.value = null
}
</script>

<template>
  <Head title="Cz≈Çonkowie rodziny" />

  <AuthenticatedLayout>
    <template #header>
      <div class="flex items-center justify-between">
        <div>
          <h1 class="text-2xl font-semibold text-gray-900 dark:text-white">
            Cz≈Çonkowie rodziny
          </h1>
          <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">
            ZarzƒÖdzaj cz≈Çonkami swojej rodziny
            <span v-if="totalMembers > 0" class="ml-2">
              ({{ totalMembers }} {{ totalMembers === 1 ? 'osoba' : totalMembers < 5 ? 'osoby' : 'os√≥b' }})
            </span>
          </p>
        </div>

        <Button @click="handleAddMember" class="flex items-center gap-2">
          <Plus class="h-4 w-4" />
          Dodaj cz≈Çonka
        </Button>
      </div>
    </template>

    <div class="mx-auto max-w-7xl">
      <div class="overflow-hidden sm:rounded-lg bg-white dark:bg-gray-800 shadow-sm">
        <div class="p-6">
          <!-- Family Members Table -->
          <FamilyMemberTable
            :members="members"
            @edit="handleEditMember"
            @deleted="handleMemberDeleted"
          />

          <!-- Empty state when no members -->
          <div v-if="members.length === 0" class="py-12 text-center">
            <div class="mx-auto h-12 w-12 text-gray-400">
              <svg fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.196-2.196M17 20H7m10 0v-2c0-5.523-4.477-10-10-10s-10 4.477-10 10v2m10 0V9a3 3 0 114 2.83V20M7 20H2v-2a3 3 0 015.196-2.196M7 20v-2m6-6a3 3 0 11-6 0 3 3 0 016 0z" />
              </svg>
            </div>
            <h3 class="mt-2 text-sm font-semibold text-gray-900 dark:text-white">
              Brak cz≈Çonk√≥w rodziny
            </h3>
            <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">
              Rozpocznij od dodania pierwszego cz≈Çonka rodziny.
            </p>
            <div class="mt-6">
              <Button @click="handleAddMember" class="flex items-center gap-2">
                <Plus class="h-4 w-4" />
                Dodaj pierwszego cz≈Çonka
              </Button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Edit/Create Dialog -->
    <InlineEditDialog
      :open="showEditDialog"
      :member="editingMember"
      @saved="handleMemberSaved"
      @close="handleDialogClose"
    />
  </AuthenticatedLayout>
</template>



================================================
FILE: resources/js/Pages/FamilyMembers/InlineEditDialog.vue
================================================
<script setup>
import { ref, watch, computed } from 'vue'
import { router } from '@inertiajs/vue3'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/Components/ui/dialog'
import { Button } from '@/Components/ui/button'
import { Input } from '@/Components/ui/input'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/Components/ui/select'
import { Label } from '@/Components/ui/label'
import { toast } from 'vue-sonner'
import { X, Save } from 'lucide-vue-next'

const props = defineProps({
  open: {
    type: Boolean,
    required: true
  },
  member: {
    type: Object,
    default: null
  }
})

const emit = defineEmits(['saved', 'close'])

// Form state
const form = ref({
  first_name: '',
  birth_date: '',
  gender: ''
})

const errors = ref({})
const isSubmitting = ref(false)

// Computed properties
const isEditing = computed(() => !!props.member)
const dialogTitle = computed(() =>
  isEditing.value ? 'Edytuj cz≈Çonka rodziny' : 'Dodaj cz≈Çonka rodziny'
)

const maxDate = computed(() => {
  const today = new Date()
  today.setDate(today.getDate() - 1) // Yesterday as max date
  return today.toISOString().split('T')[0]
})

// Watch for prop changes and reset form
watch(() => props.open, (newValue) => {
  if (newValue) {
    resetForm()
    errors.value = {}
  }
})

watch(() => props.member, (newMember) => {
  if (newMember) {
    form.value = {
      first_name: newMember.first_name,
      birth_date: newMember.birth_date,
      gender: newMember.gender
    }
  } else {
    resetForm()
  }
})

// Methods
const resetForm = () => {
  if (props.member) {
    form.value = {
      first_name: props.member.first_name,
      birth_date: props.member.birth_date,
      gender: props.member.gender
    }
  } else {
    form.value = {
      first_name: '',
      birth_date: '',
      gender: ''
    }
  }
}

const validateForm = () => {
  const newErrors = {}

  // First name validation
  if (!form.value.first_name.trim()) {
    newErrors.first_name = 'Imiƒô jest wymagane'
  } else if (form.value.first_name.length > 255) {
    newErrors.first_name = 'Imiƒô nie mo≈ºe byƒá d≈Çu≈ºsze ni≈º 255 znak√≥w'
  }

  // Birth date validation
  if (!form.value.birth_date) {
    newErrors.birth_date = 'Data urodzenia jest wymagana'
  } else {
    const birthDate = new Date(form.value.birth_date)
    const today = new Date()
    today.setHours(0, 0, 0, 0)

    if (birthDate >= today) {
      newErrors.birth_date = 'Data urodzenia musi byƒá wcze≈õniejsza ni≈º dzisiaj'
    }
  }

  // Gender validation
  if (!form.value.gender) {
    newErrors.gender = 'P≈Çeƒá jest wymagana'
  } else if (!['male', 'female'].includes(form.value.gender)) {
    newErrors.gender = 'Nieprawid≈Çowa warto≈õƒá p≈Çci'
  }

  errors.value = newErrors
  return Object.keys(newErrors).length === 0
}

const handleSubmit = async () => {
  if (!validateForm()) {
    return
  }

  isSubmitting.value = true
  errors.value = {}

  try {
    const url = isEditing.value
      ? `/family-members/${props.member.id}`
      : '/family-members'

    const method = isEditing.value ? 'put' : 'post'

        router[method](url, form.value, {
      preserveScroll: true,
      onSuccess: (page) => {
        // Extract the created/updated member from the response
        let savedMember = null

        if (isEditing.value) {
          // For edit, create the updated member object
          savedMember = {
            ...props.member,
            ...form.value,
            updated_at: new Date().toISOString()
          }
          toast.success('Cz≈Çonek rodziny zosta≈Ç zaktualizowany')
        } else {
          // For create, we need to get the new member
          // Since Laravel redirects back to index, we can get the latest member
          const familyMembers = page.props.familyMembers?.data || []
          savedMember = familyMembers.find(m =>
            m.first_name === form.value.first_name &&
            m.birth_date === form.value.birth_date &&
            m.gender === form.value.gender
          ) || {
            id: Date.now(), // Fallback temporary ID
            ...form.value,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          }
          toast.success('Nowy cz≈Çonek rodziny zosta≈Ç dodany')
        }

        emit('saved', savedMember)
      },
      onError: (serverErrors) => {
        // Handle validation errors from backend
        errors.value = serverErrors
        toast.error('Sprawd≈∫ poprawno≈õƒá wprowadzonych danych')
      },
      onFinish: () => {
        isSubmitting.value = false
      }
    })
  } catch (error) {
    console.error('Error submitting form:', error)
    toast.error('WystƒÖpi≈Ç b≈ÇƒÖd podczas zapisywania. Spr√≥buj ponownie.')
    isSubmitting.value = false
  }
}

const handleClose = () => {
  if (!isSubmitting.value) {
    emit('close')
  }
}

const handleGenderChange = (value) => {
  form.value.gender = value
  if (errors.value.gender) {
    errors.value.gender = ''
  }
}
</script>

<template>
  <Dialog :open="open" @update:open="handleClose">
    <DialogContent class="sm:max-w-[425px]">
      <DialogHeader>
        <DialogTitle class="flex items-center gap-2">
          {{ dialogTitle }}
        </DialogTitle>
        <DialogDescription>
          {{ isEditing ? 'Zaktualizuj informacje o cz≈Çonku rodziny.' : 'Dodaj nowego cz≈Çonka rodziny.' }}
        </DialogDescription>
      </DialogHeader>

      <form @submit.prevent="handleSubmit" class="space-y-4">
        <!-- First Name -->
        <div class="space-y-2">
          <Label for="first_name">Imiƒô *</Label>
          <Input
            id="first_name"
            v-model="form.first_name"
            type="text"
            placeholder="Wpisz imiƒô"
            :class="{ 'border-red-500 focus:border-red-500': errors.first_name }"
            maxlength="255"
            required
          />
          <p v-if="errors.first_name" class="text-sm text-red-600">
            {{ errors.first_name }}
          </p>
        </div>

        <!-- Birth Date -->
        <div class="space-y-2">
          <Label for="birth_date">Data urodzenia *</Label>
          <Input
            id="birth_date"
            v-model="form.birth_date"
            type="date"
            :max="maxDate"
            :class="{ 'border-red-500 focus:border-red-500': errors.birth_date }"
            required
          />
          <p v-if="errors.birth_date" class="text-sm text-red-600">
            {{ errors.birth_date }}
          </p>
        </div>

        <!-- Gender -->
        <div class="space-y-2">
          <Label for="gender">P≈Çeƒá *</Label>
          <Select
            :model-value="form.gender"
            @update:model-value="handleGenderChange"
            required
          >
            <SelectTrigger
              :class="{ 'border-red-500 focus:border-red-500': errors.gender }"
            >
              <SelectValue placeholder="Wybierz p≈Çeƒá" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="male">Mƒô≈ºczyzna</SelectItem>
              <SelectItem value="female">Kobieta</SelectItem>
            </SelectContent>
          </Select>
          <p v-if="errors.gender" class="text-sm text-red-600">
            {{ errors.gender }}
          </p>
        </div>
      </form>

      <DialogFooter class="gap-2">
        <Button
          variant="outline"
          @click="handleClose"
          :disabled="isSubmitting"
        >
          <X class="h-4 w-4 mr-2" />
          Anuluj
        </Button>
        <Button
          @click="handleSubmit"
          :disabled="isSubmitting"
          class="flex items-center gap-2"
        >
          <Save class="h-4 w-4" />
          {{ isSubmitting ? 'Zapisywanie...' : 'Zapisz' }}
        </Button>
      </DialogFooter>
    </DialogContent>
  </Dialog>
</template>



================================================
FILE: resources/js/Pages/MealPlans/Index.vue
================================================
<template>
  <Head title="Jad≈Çospisy" />

  <AuthenticatedLayout>
    <template #header>
      <div class="flex items-center justify-between">
        <div>
          <h1 class="text-2xl font-semibold text-gray-900 dark:text-white">
            Jad≈Çospisy
          </h1>
          <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">
            PrzeglƒÖdaj i zarzƒÖdzaj wygenerowanymi jad≈Çospisami
            <span v-if="mealPlans.meta.total > 0" class="ml-2">
              ({{ mealPlans.meta.total }} {{ mealPlans.meta.total === 1 ? 'jad≈Çospis' : mealPlans.meta.total < 5 ? 'jad≈Çospisy' : 'jad≈Çospis√≥w' }})
            </span>
          </p>
        </div>
        <div class="flex items-center gap-2">
          <Button as-child>
            <Link :href="route('meal-plans.store')" class="flex items-center gap-2">
              <Plus class="h-4 w-4" />
              Wygeneruj nowy jad≈Çospis
            </Link>
          </Button>
        </div>
      </div>
    </template>

    <div class="mx-auto max-w-7xl">
      <div class="overflow-hidden bg-white shadow-sm sm:rounded-lg dark:bg-gray-800">
        <div class="p-6">
          <div class="space-y-6">
            <!-- Filters Bar -->
            <FiltersBar
              v-model:value="localFilters"
              :statuses="statuses"
              :results-count="mealPlans.meta.total"
              @update:value="handleFiltersChange"
            />

            <!-- Meal Plan Table -->
            <MealPlanTable
              :items="mealPlans.data"
              :sort="localFilters.sort"
              :direction="localFilters.direction"
              @sort-change="handleSortChange"
            />

            <!-- Pagination -->
            <ServerPagination
              :links="mealPlans.links"
              :meta="mealPlans.meta"
            />
          </div>
        </div>
      </div>
    </div>
  </AuthenticatedLayout>
</template>

<script setup lang="ts">
import { Head, Link } from '@inertiajs/vue3'
import { ref, computed, watch } from 'vue'
import { router } from '@inertiajs/vue3'
import AuthenticatedLayout from '@/Layouts/AuthenticatedLayout.vue'
import { Button } from '@/Components/ui/button'
import { Plus } from 'lucide-vue-next'
// Types for MealPlan components and API responses
type MealPlanStatus = 'pending' | 'processing' | 'done' | 'error'

interface StatusOption {
  value: MealPlanStatus
  label: string
}

interface MealPlanListItem {
  id: number
  start_date: string
  end_date: string
  status: MealPlanStatus
  created_at: string
  updated_at: string
  meals_count: number
  logs_count: number
  links: {
    self: string
  }
}

interface PaginationMeta {
  current_page: number
  last_page: number
  per_page: number
  total: number
  from: number | null
  to: number | null
}

interface PaginationLinks {
  first: string | null
  last: string | null
  prev: string | null
  next: string | null
}

interface MealPlanCollection {
  data: MealPlanListItem[]
  meta: PaginationMeta
  links: PaginationLinks
}

type SortDirection = 'asc' | 'desc'

interface FiltersState {
  status?: MealPlanStatus | ''
  sort?: 'start_date' | 'end_date' | 'status' | 'created_at'
  direction?: SortDirection
  perPage?: number
}

interface MealPlanCollectionProps {
  mealPlans: MealPlanCollection
  filters: {
    'filter.status'?: MealPlanStatus
    sort?: FiltersState['sort']
    direction?: SortDirection
    perPage?: number
  }
  statuses: StatusOption[]
}
import FiltersBar from '@/Components/MealPlans/FiltersBar.vue'
import MealPlanTable from '@/Components/MealPlans/MealPlanTable.vue'
import ServerPagination from '@/Components/MealPlans/ServerPagination.vue'

// Props from Inertia
const props = defineProps<MealPlanCollectionProps>()

// Local filters state synchronized with query params
const localFilters = ref<FiltersState>({
  status: props.filters['filter.status'] || '',
  sort: props.filters.sort || 'created_at',
  direction: props.filters.direction || 'desc',
  perPage: props.filters.perPage || 15
})

// Handle filters change
const handleFiltersChange = (newFilters: FiltersState) => {
  localFilters.value = { ...localFilters.value, ...newFilters }

  // Convert filters to query params format
  const queryParams: Record<string, any> = {}

  if (localFilters.value.status) {
    queryParams['filter[status]'] = localFilters.value.status
  }

  if (localFilters.value.sort) {
    queryParams.sort = localFilters.value.sort
  }

  if (localFilters.value.direction) {
    queryParams.direction = localFilters.value.direction
  }

  if (localFilters.value.perPage) {
    queryParams.perPage = localFilters.value.perPage
  }

  // Navigate with new filters
  router.get(route('meal-plans.index'), queryParams, {
    preserveScroll: true,
    replace: true
  })
}

// Handle sorting change
const handleSortChange = ({ field, direction }: { field: string, direction: SortDirection }) => {
  handleFiltersChange({
    sort: field as FiltersState['sort'],
    direction
  })
}

// Save filters to localStorage
watch(localFilters, (newFilters) => {
  try {
    localStorage.setItem('mm.mealPlans.filters', JSON.stringify(newFilters))
  } catch (error) {
    console.warn('Failed to save filters to localStorage:', error)
  }
}, { deep: true })

// Load filters from localStorage on mount
const loadFiltersFromStorage = () => {
  try {
    const savedFilters = localStorage.getItem('mm.mealPlans.filters')
    if (savedFilters) {
      const parsed = JSON.parse(savedFilters)
      // Only use saved filters if not overridden by URL params
      if (!props.filters['filter.status'] && parsed.status) {
        localFilters.value.status = parsed.status
      }
      if (!props.filters.perPage && parsed.perPage) {
        localFilters.value.perPage = parsed.perPage
      }
    }
  } catch (error) {
    console.warn('Failed to load filters from localStorage:', error)
  }
}

// Load saved filters on component mount
loadFiltersFromStorage()
</script>



================================================
FILE: resources/js/Pages/MealPlans/Show.vue
================================================
<template>
  <Head :title="`Meal Plan - ${formatDateRange(mealPlan.start_date, mealPlan.end_date)}`" />

  <AuthenticatedLayout>
    <template #header>
      <div class="flex items-center justify-between">
        <div>
          <h1 class="text-2xl font-semibold text-gray-900 dark:text-white">
            Meal Plan Details
          </h1>
          <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">
            {{ formatDateRange(mealPlan.start_date, mealPlan.end_date) }}
            ({{ calculateDays(mealPlan.start_date, mealPlan.end_date) }} days)
          </p>
        </div>
        <div class="flex items-center gap-3">
          <StatusTag :value="mealPlan.status as any" />
          <ActionDropdown :item="mealPlan" />
        </div>
      </div>
    </template>

    <div class="space-y-6">
      <!-- Summary Cards -->
      <div class="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4">
        <div class="bg-white overflow-hidden shadow rounded-lg">
          <div class="p-5">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <ChefHat class="h-6 w-6 text-gray-400" />
              </div>
              <div class="ml-5 w-0 flex-1">
                <dl>
                  <dt class="text-sm font-medium text-gray-500 truncate">
                    Total Meals
                  </dt>
                  <dd class="text-lg font-medium text-gray-900">
                    {{ mealPlan.meals_count }}
                  </dd>
                </dl>
              </div>
            </div>
          </div>
        </div>

        <div class="bg-white overflow-hidden shadow rounded-lg">
          <div class="p-5">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <FileText class="h-6 w-6 text-gray-400" />
              </div>
              <div class="ml-5 w-0 flex-1">
                <dl>
                  <dt class="text-sm font-medium text-gray-500 truncate">
                    Generation Logs
                  </dt>
                  <dd class="text-lg font-medium text-gray-900">
                    {{ mealPlan.logs_count }}
                  </dd>
                </dl>
              </div>
            </div>
          </div>
        </div>

        <div class="bg-white overflow-hidden shadow rounded-lg">
          <div class="p-5">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <Calendar class="h-6 w-6 text-gray-400" />
              </div>
              <div class="ml-5 w-0 flex-1">
                <dl>
                  <dt class="text-sm font-medium text-gray-500 truncate">
                    Created
                  </dt>
                  <dd class="text-sm font-medium text-gray-900">
                    {{ formatDateTime(mealPlan.created_at) }}
                  </dd>
                </dl>
              </div>
            </div>
          </div>
        </div>

        <div class="bg-white overflow-hidden shadow rounded-lg">
          <div class="p-5">
            <div class="flex items-center">
              <div class="flex-shrink-0">
                <Clock class="h-6 w-6 text-gray-400" />
              </div>
              <div class="ml-5 w-0 flex-1">
                <dl>
                  <dt class="text-sm font-medium text-gray-500 truncate">
                    Last Updated
                  </dt>
                  <dd class="text-sm font-medium text-gray-900">
                    {{ formatDateTime(mealPlan.updated_at) }}
                  </dd>
                </dl>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Meals Section -->
      <div class="bg-white shadow overflow-hidden sm:rounded-md" v-if="mealPlan.meals && mealPlan.meals.length > 0">
        <div class="px-4 py-5 sm:px-6">
          <h3 class="text-lg leading-6 font-medium text-gray-900">Meals</h3>
          <p class="mt-1 max-w-2xl text-sm text-gray-500">
            Planned meals for this period
          </p>
        </div>
        <ul class="divide-y divide-gray-200">
          <li v-for="meal in mealPlan.meals" :key="meal.id" class="px-4 py-4">
            <div class="flex items-center justify-between">
              <div class="flex-1">
                <div class="flex items-center justify-between">
                  <h4 class="text-sm font-medium text-gray-900">
                    {{ meal.recipe.title }}
                  </h4>
                  <div class="ml-2 flex-shrink-0 flex">
                    <p class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                      {{ meal.meal_type }}
                    </p>
                  </div>
                </div>
                <div class="mt-2 flex justify-between">
                  <div class="sm:flex">
                    <p class="flex items-center text-sm text-gray-500">
                      <Calendar class="flex-shrink-0 mr-1.5 h-4 w-4 text-gray-400" />
                      {{ formatDate(meal.planned_date) }}
                    </p>
                    <p class="mt-2 flex items-center text-sm text-gray-500 sm:mt-0 sm:ml-6" v-if="meal.recipe.prep_time">
                      <Clock class="flex-shrink-0 mr-1.5 h-4 w-4 text-gray-400" />
                      {{ meal.recipe.prep_time }} min prep
                    </p>
                  </div>
                </div>
              </div>
            </div>
          </li>
        </ul>
      </div>

      <!-- Generation Logs Section -->
      <div class="bg-white shadow overflow-hidden sm:rounded-md" v-if="mealPlan.logs && mealPlan.logs.length > 0">
        <div class="px-4 py-5 sm:px-6">
          <h3 class="text-lg leading-6 font-medium text-gray-900">Generation Logs</h3>
          <p class="mt-1 max-w-2xl text-sm text-gray-500">
            History of meal plan generation process
          </p>
        </div>
        <ul class="divide-y divide-gray-200">
          <li v-for="log in mealPlan.logs" :key="log.id" class="px-4 py-4">
            <div class="flex space-x-3">
              <div class="flex-shrink-0">
                <div class="h-8 w-8 rounded-full flex items-center justify-center"
                     :class="getLogTypeClass(log.level)">
                  <component :is="getLogIcon(log.level)" class="h-4 w-4" />
                </div>
              </div>
              <div class="min-w-0 flex-1">
                <p class="text-sm font-medium text-gray-900">
                  {{ log.message }}
                </p>
                <p class="text-sm text-gray-500">
                  {{ formatDateTime(log.created_at) }}
                </p>
                <div v-if="log.context" class="mt-2">
                  <pre class="text-xs bg-gray-50 rounded p-2 overflow-x-auto">{{ JSON.stringify(log.context, null, 2) }}</pre>
                </div>
              </div>
            </div>
          </li>
        </ul>
      </div>

      <!-- Empty States -->
      <div v-if="!mealPlan.meals || mealPlan.meals.length === 0" class="text-center py-12">
        <ChefHat class="mx-auto h-12 w-12 text-gray-400" />
        <h3 class="mt-2 text-sm font-medium text-gray-900">No meals planned</h3>
        <p class="mt-1 text-sm text-gray-500">This meal plan doesn't have any meals yet.</p>
      </div>

      <!-- Back to List -->
      <div class="flex justify-start">
        <Link :href="route('meal-plans.index')"
              class="inline-flex items-center px-4 py-2 border border-gray-300 shadow-sm text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
          <ArrowLeft class="mr-2 h-4 w-4" />
          Back to Meal Plans
        </Link>
      </div>
    </div>
  </AuthenticatedLayout>
</template>

<script setup lang="ts">
import { Head, Link } from '@inertiajs/vue3'
import {
  ChefHat,
  FileText,
  Calendar,
  Clock,
  ArrowLeft,
  AlertCircle,
  CheckCircle,
  Info,
  XCircle
} from 'lucide-vue-next'
import AuthenticatedLayout from '@/Layouts/AuthenticatedLayout.vue'
import StatusTag from '@/Components/MealPlans/StatusTag.vue'
import ActionDropdown from '@/Components/MealPlans/ActionDropdown.vue'

// Local type definitions
interface Recipe {
  id: number
  title: string
  prep_time?: number
}

interface Meal {
  id: number
  meal_type: string
  planned_date: string
  recipe: Recipe
}

interface Log {
  id: number
  level: string
  message: string
  context?: any
  created_at: string
}

interface MealPlan {
  id: number
  start_date: string
  end_date: string
  status: string
  created_at: string
  updated_at: string
  meals_count: number
  logs_count: number
  meals?: Meal[]
  logs?: Log[]
  links: {
    self: string
  }
}

interface Props {
  mealPlan: MealPlan
}

const props = defineProps<Props>()

// Date formatting utilities
const formatDateRange = (startDate: string, endDate: string): string => {
  const start = new Date(startDate).toLocaleDateString('en-GB', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  })
  const end = new Date(endDate).toLocaleDateString('en-GB', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  })
  return `${start} - ${end}`
}

const formatDate = (date: string): string => {
  return new Date(date).toLocaleDateString('en-GB', {
    weekday: 'long',
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  })
}

const formatDateTime = (dateTime: string): string => {
  return new Date(dateTime).toLocaleDateString('en-GB', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  })
}

const calculateDays = (startDate: string, endDate: string): number => {
  const start = new Date(startDate)
  const end = new Date(endDate)
  const diffTime = Math.abs(end.getTime() - start.getTime())
  return Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1
}

// Log utilities
const getLogTypeClass = (level: string): string => {
  switch (level.toLowerCase()) {
    case 'error':
      return 'bg-red-100 text-red-600'
    case 'warning':
      return 'bg-yellow-100 text-yellow-600'
    case 'info':
      return 'bg-blue-100 text-blue-600'
    case 'success':
      return 'bg-green-100 text-green-600'
    default:
      return 'bg-gray-100 text-gray-600'
  }
}

const getLogIcon = (level: string) => {
  switch (level.toLowerCase()) {
    case 'error':
      return XCircle
    case 'warning':
      return AlertCircle
    case 'info':
      return Info
    case 'success':
      return CheckCircle
    default:
      return Info
  }
}
</script>



================================================
FILE: resources/js/Pages/Profile/Edit.vue
================================================
<script setup>
import AuthenticatedLayout from '@/Layouts/AuthenticatedLayout.vue';
import DeleteUserForm from './Partials/DeleteUserForm.vue';
import UpdatePasswordForm from './Partials/UpdatePasswordForm.vue';
import UpdateProfileInformationForm from './Partials/UpdateProfileInformationForm.vue';
import { Head } from '@inertiajs/vue3';

defineProps({
    mustVerifyEmail: {
        type: Boolean,
    },
    status: {
        type: String,
    },
});
</script>

<template>
    <Head title="Profile" />

    <AuthenticatedLayout>
        <template #header>
            <h2
                class="text-xl font-semibold leading-tight text-gray-800 dark:text-gray-200"
            >
                Profile
            </h2>
        </template>

        <div class="py-12">
            <div class="mx-auto max-w-7xl space-y-6 sm:px-6 lg:px-8">
                <div
                    class="bg-white p-4 shadow sm:rounded-lg sm:p-8 dark:bg-gray-800"
                >
                    <UpdateProfileInformationForm
                        :must-verify-email="mustVerifyEmail"
                        :status="status"
                        class="max-w-xl"
                    />
                </div>

                <div
                    class="bg-white p-4 shadow sm:rounded-lg sm:p-8 dark:bg-gray-800"
                >
                    <UpdatePasswordForm class="max-w-xl" />
                </div>

                <div
                    class="bg-white p-4 shadow sm:rounded-lg sm:p-8 dark:bg-gray-800"
                >
                    <DeleteUserForm class="max-w-xl" />
                </div>
            </div>
        </div>
    </AuthenticatedLayout>
</template>



================================================
FILE: resources/js/Pages/Profile/Partials/DeleteUserForm.vue
================================================
<script setup>
import DangerButton from '@/Components/DangerButton.vue';
import InputError from '@/Components/InputError.vue';
import InputLabel from '@/Components/InputLabel.vue';
import Modal from '@/Components/Modal.vue';
import SecondaryButton from '@/Components/SecondaryButton.vue';
import TextInput from '@/Components/TextInput.vue';
import { useForm } from '@inertiajs/vue3';
import { nextTick, ref } from 'vue';

const confirmingUserDeletion = ref(false);
const passwordInput = ref(null);

const form = useForm({
    password: '',
});

const confirmUserDeletion = () => {
    confirmingUserDeletion.value = true;

    nextTick(() => passwordInput.value.focus());
};

const deleteUser = () => {
    form.delete(route('profile.destroy'), {
        preserveScroll: true,
        onSuccess: () => closeModal(),
        onError: () => passwordInput.value.focus(),
        onFinish: () => form.reset(),
    });
};

const closeModal = () => {
    confirmingUserDeletion.value = false;

    form.clearErrors();
    form.reset();
};
</script>

<template>
    <section class="space-y-6">
        <header>
            <h2 class="text-lg font-medium text-gray-900 dark:text-gray-100">
                Delete Account
            </h2>

            <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">
                Once your account is deleted, all of its resources and data will
                be permanently deleted. Before deleting your account, please
                download any data or information that you wish to retain.
            </p>
        </header>

        <DangerButton @click="confirmUserDeletion">Delete Account</DangerButton>

        <Modal :show="confirmingUserDeletion" @close="closeModal">
            <div class="p-6">
                <h2
                    class="text-lg font-medium text-gray-900 dark:text-gray-100"
                >
                    Are you sure you want to delete your account?
                </h2>

                <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">
                    Once your account is deleted, all of its resources and data
                    will be permanently deleted. Please enter your password to
                    confirm you would like to permanently delete your account.
                </p>

                <div class="mt-6">
                    <InputLabel
                        for="password"
                        value="Password"
                        class="sr-only"
                    />

                    <TextInput
                        id="password"
                        ref="passwordInput"
                        v-model="form.password"
                        type="password"
                        class="mt-1 block w-3/4"
                        placeholder="Password"
                        @keyup.enter="deleteUser"
                    />

                    <InputError :message="form.errors.password" class="mt-2" />
                </div>

                <div class="mt-6 flex justify-end">
                    <SecondaryButton @click="closeModal">
                        Cancel
                    </SecondaryButton>

                    <DangerButton
                        class="ms-3"
                        :class="{ 'opacity-25': form.processing }"
                        :disabled="form.processing"
                        @click="deleteUser"
                    >
                        Delete Account
                    </DangerButton>
                </div>
            </div>
        </Modal>
    </section>
</template>



================================================
FILE: resources/js/Pages/Profile/Partials/UpdatePasswordForm.vue
================================================
<script setup>
import InputError from '@/Components/InputError.vue';
import InputLabel from '@/Components/InputLabel.vue';
import PrimaryButton from '@/Components/PrimaryButton.vue';
import TextInput from '@/Components/TextInput.vue';
import { useForm } from '@inertiajs/vue3';
import { ref } from 'vue';

const passwordInput = ref(null);
const currentPasswordInput = ref(null);

const form = useForm({
    current_password: '',
    password: '',
    password_confirmation: '',
});

const updatePassword = () => {
    form.put(route('password.update'), {
        preserveScroll: true,
        onSuccess: () => form.reset(),
        onError: () => {
            if (form.errors.password) {
                form.reset('password', 'password_confirmation');
                passwordInput.value.focus();
            }
            if (form.errors.current_password) {
                form.reset('current_password');
                currentPasswordInput.value.focus();
            }
        },
    });
};
</script>

<template>
    <section>
        <header>
            <h2 class="text-lg font-medium text-gray-900 dark:text-gray-100">
                Update Password
            </h2>

            <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">
                Ensure your account is using a long, random password to stay
                secure.
            </p>
        </header>

        <form @submit.prevent="updatePassword" class="mt-6 space-y-6">
            <div>
                <InputLabel for="current_password" value="Current Password" />

                <TextInput
                    id="current_password"
                    ref="currentPasswordInput"
                    v-model="form.current_password"
                    type="password"
                    class="mt-1 block w-full"
                    autocomplete="current-password"
                />

                <InputError
                    :message="form.errors.current_password"
                    class="mt-2"
                />
            </div>

            <div>
                <InputLabel for="password" value="New Password" />

                <TextInput
                    id="password"
                    ref="passwordInput"
                    v-model="form.password"
                    type="password"
                    class="mt-1 block w-full"
                    autocomplete="new-password"
                />

                <InputError :message="form.errors.password" class="mt-2" />
            </div>

            <div>
                <InputLabel
                    for="password_confirmation"
                    value="Confirm Password"
                />

                <TextInput
                    id="password_confirmation"
                    v-model="form.password_confirmation"
                    type="password"
                    class="mt-1 block w-full"
                    autocomplete="new-password"
                />

                <InputError
                    :message="form.errors.password_confirmation"
                    class="mt-2"
                />
            </div>

            <div class="flex items-center gap-4">
                <PrimaryButton :disabled="form.processing">Save</PrimaryButton>

                <Transition
                    enter-active-class="transition ease-in-out"
                    enter-from-class="opacity-0"
                    leave-active-class="transition ease-in-out"
                    leave-to-class="opacity-0"
                >
                    <p
                        v-if="form.recentlySuccessful"
                        class="text-sm text-gray-600 dark:text-gray-400"
                    >
                        Saved.
                    </p>
                </Transition>
            </div>
        </form>
    </section>
</template>



================================================
FILE: resources/js/Pages/Profile/Partials/UpdateProfileInformationForm.vue
================================================
<script setup>
import InputError from '@/Components/InputError.vue';
import InputLabel from '@/Components/InputLabel.vue';
import PrimaryButton from '@/Components/PrimaryButton.vue';
import TextInput from '@/Components/TextInput.vue';
import { Link, useForm, usePage } from '@inertiajs/vue3';

defineProps({
    mustVerifyEmail: {
        type: Boolean,
    },
    status: {
        type: String,
    },
});

const user = usePage().props.auth.user;

const form = useForm({
    name: user.name,
    email: user.email,
});
</script>

<template>
    <section>
        <header>
            <h2 class="text-lg font-medium text-gray-900 dark:text-gray-100">
                Profile Information
            </h2>

            <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">
                Update your account's profile information and email address.
            </p>
        </header>

        <form
            @submit.prevent="form.patch(route('profile.update'))"
            class="mt-6 space-y-6"
        >
            <div>
                <InputLabel for="name" value="Name" />

                <TextInput
                    id="name"
                    type="text"
                    class="mt-1 block w-full"
                    v-model="form.name"
                    required
                    autofocus
                    autocomplete="name"
                />

                <InputError class="mt-2" :message="form.errors.name" />
            </div>

            <div>
                <InputLabel for="email" value="Email" />

                <TextInput
                    id="email"
                    type="email"
                    class="mt-1 block w-full"
                    v-model="form.email"
                    required
                    autocomplete="username"
                />

                <InputError class="mt-2" :message="form.errors.email" />
            </div>

            <div v-if="mustVerifyEmail && user.email_verified_at === null">
                <p class="mt-2 text-sm text-gray-800 dark:text-gray-200">
                    Your email address is unverified.
                    <Link
                        :href="route('verification.send')"
                        method="post"
                        as="button"
                        class="rounded-md text-sm text-gray-600 underline hover:text-gray-900 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 dark:text-gray-400 dark:hover:text-gray-100 dark:focus:ring-offset-gray-800"
                    >
                        Click here to re-send the verification email.
                    </Link>
                </p>

                <div
                    v-show="status === 'verification-link-sent'"
                    class="mt-2 text-sm font-medium text-green-600 dark:text-green-400"
                >
                    A new verification link has been sent to your email address.
                </div>
            </div>

            <div class="flex items-center gap-4">
                <PrimaryButton :disabled="form.processing">Save</PrimaryButton>

                <Transition
                    enter-active-class="transition ease-in-out"
                    enter-from-class="opacity-0"
                    leave-active-class="transition ease-in-out"
                    leave-to-class="opacity-0"
                >
                    <p
                        v-if="form.recentlySuccessful"
                        class="text-sm text-gray-600 dark:text-gray-400"
                    >
                        Saved.
                    </p>
                </Transition>
            </div>
        </form>
    </section>
</template>



================================================
FILE: resources/js/Pages/Recipes/Form.vue
================================================
<template>
  <div class="min-h-screen bg-gray-100 py-6">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
        <div class="p-6 bg-white border-b border-gray-200">
          <div class="flex items-center justify-between mb-6">
            <h1 class="text-2xl font-semibold text-gray-900">
              {{ recipe?.data ? 'Edit Recipe' : 'Create Recipe' }}
            </h1>
          </div>

          <RecipeForm
            :form="form"
            :categories="categories"
            :ingredients="ingredients"
            :units="units"
            :is-editing="!!recipe?.data"
            @submit="handleSubmit"
            @cancel="handleCancel"
          />
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { useForm } from '@inertiajs/vue3'
import { router } from '@inertiajs/vue3'
import RecipeForm from '@/Components/recipes/RecipeForm.vue'

// Define props interface
const props = defineProps({
  recipe: {
    type: Object,
    default: null
  },
  categories: {
    type: Array,
    required: true
  },
  ingredients: {
    type: Array,
    required: true
  },
  units: {
    type: Array,
    required: true
  }
})

// Initialize form with useForm hook
const form = useForm({
  name: props.recipe?.data?.name ?? '',
  category: props.recipe?.data?.category ?? null,
  instructions: props.recipe?.data?.instructions ?? '',
  calories: props.recipe?.data?.calories ?? '',
  servings: props.recipe?.data?.servings ?? '',
  ingredients: props.recipe?.data?.ingredients?.map(ingredient => ({
    ingredient_id: ingredient.id,
    quantity: ingredient.quantity,
    unit_id: ingredient.unit.id,
  })) ?? []
})

// Handle form submission
const handleSubmit = () => {
  if (props.recipe) {
    // Update existing recipe
    form.put(`/recipes/${props.recipe.data.id}`, {
      onSuccess: () => {
        // Success handled by redirect from controller
      }
    })
  } else {
    // Create new recipe
    form.post('/recipes', {
      onSuccess: () => {
        // Success handled by redirect from controller
      }
    })
  }
}

// Handle cancel action - navigate to recipes list
const handleCancel = () => {
  router.visit('/recipes')
}
</script>



================================================
FILE: resources/js/Pages/Recipes/Index.vue
================================================
<template>
  <Head title="Przepisy" />

  <AuthenticatedLayout>
    <template #header>
      <div class="flex items-center justify-between">
        <div>
          <h1 class="text-2xl font-semibold text-gray-900 dark:text-white">
            Przepisy
          </h1>
          <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">
            ZarzƒÖdzaj swojƒÖ kolekcjƒÖ przepis√≥w
            <span v-if="recipes.meta.total > 0" class="ml-2">
              ({{ recipes.meta.total }} {{ recipes.meta.total === 1 ? 'przepis' : recipes.meta.total < 5 ? 'przepisy' : 'przepis√≥w' }})
            </span>
          </p>
        </div>
      </div>
    </template>

    <div class="mx-auto max-w-7xl">
      <div class="overflow-hidden sm:rounded-lg bg-white dark:bg-gray-800 shadow-sm">
        <div class="p-6">
          <div class="space-y-6">
            <!-- Toolbar with filters and search -->
            <RecipesToolbar
              v-model="filterState"
              :categories="categories"
              @search="handleSearch"
              @category-change="handleCategoryChange"
              @reset="handleReset"
            />

            <!-- Recipes table -->
            <RecipesTable
              :recipes="recipes.data"
              :sort="sortState"
              @sort-change="handleSortChange"
              @delete-requested="handleDeleteRequested"
            />

            <!-- Empty state when no recipes -->
            <div v-if="recipes.data.length === 0" class="py-12 text-center">
              <div class="mx-auto h-12 w-12 text-gray-400">
                <svg fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
                </svg>
              </div>
              <h3 class="mt-2 text-sm font-semibold text-gray-900 dark:text-white">
                Brak przepis√≥w
              </h3>
              <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">
                Rozpocznij od dodania pierwszego przepisu.
              </p>
            </div>

            <!-- Pagination -->
            <ServerPagination
              v-if="recipes.data.length > 0"
              :meta="recipes.meta"
              :links="recipes.links"
              @page-change="handlePageChange"
            />
          </div>
        </div>
      </div>
    </div>

    <!-- Delete confirmation modal -->
    <ConfirmDeleteModal
      :open="showDeleteModal"
      :recipe-name="selectedRecipe?.name || ''"
      @confirm="handleDeleteConfirm"
      @cancel="handleDeleteCancel"
    />
  </AuthenticatedLayout>
</template>

<script setup>
import { Head } from '@inertiajs/vue3';
import { ref, reactive, watch, computed } from 'vue';
import { router, usePage } from '@inertiajs/vue3';
import AuthenticatedLayout from '@/Layouts/AuthenticatedLayout.vue';
import RecipesToolbar from '@/Components/recipes/RecipesToolbar.vue';
import RecipesTable from '@/Components/recipes/RecipesTable.vue';
import ServerPagination from '@/Components/recipes/ServerPagination.vue';
import ConfirmDeleteModal from '@/Components/recipes/ConfirmDeleteModal.vue';
import { useLocalStorageStateSync } from '@/lib/useLocalStorageStateSync.js';

// Define props interface
const props = defineProps({
  recipes: {
    type: Object,
    required: true
  },
  filters: {
    type: Object,
    default: () => ({})
  },
  categories: {
    type: Array,
    required: true
  }
});

// Page data
const page = usePage();

// Filter state
const filterState = reactive({
  search: props.filters.search || '',
  category: props.filters.category || null
});

// Sort state
const sortState = reactive({
  field: props.filters.sort || 'created_at',
  direction: props.filters.direction || 'desc'
});

// Delete modal state
const showDeleteModal = ref(false);
const selectedRecipe = ref(null);

// Initialize localStorage sync for filters and sort
const { syncToStorage } = useLocalStorageStateSync();
syncToStorage('mm.recipes.filters', { filterState, sortState });

// Current page state
const currentPage = computed(() => props.recipes.meta.current_page);

// Debounced search handler
let searchTimeout = null;
const handleSearch = (searchValue) => {
  filterState.search = searchValue;

  if (searchTimeout) {
    clearTimeout(searchTimeout);
  }

  searchTimeout = setTimeout(() => {
    updateFilters({ page: 1 });
  }, 300);
};

// Category change handler
const handleCategoryChange = (categoryValue) => {
  filterState.category = categoryValue;
  updateFilters({ page: 1 });
};

// Reset filters handler
const handleReset = () => {
  filterState.search = '';
  filterState.category = null;
  sortState.field = 'created_at';
  sortState.direction = 'desc';
  updateFilters({ page: 1 });
};

// Sort change handler
const handleSortChange = (field) => {
  if (sortState.field === field) {
    sortState.direction = sortState.direction === 'asc' ? 'desc' : 'asc';
  } else {
    sortState.field = field;
    sortState.direction = 'asc';
  }
  updateFilters();
};

// Page change handler
const handlePageChange = (page) => {
  updateFilters({ page });
};

// Delete handlers
const handleDeleteRequested = (recipe) => {
  selectedRecipe.value = recipe;
  showDeleteModal.value = true;
};

const handleDeleteConfirm = () => {
  if (selectedRecipe.value) {
    router.delete(route('recipes.destroy', selectedRecipe.value.id), {
      preserveScroll: true,
      onSuccess: () => {
        showDeleteModal.value = false;
        selectedRecipe.value = null;
      }
    });
  }
};

const handleDeleteCancel = () => {
  showDeleteModal.value = false;
  selectedRecipe.value = null;
};

// Update filters and make API call
const updateFilters = (additional = {}) => {
  const params = {
    search: filterState.search || undefined,
    category: filterState.category || undefined,
    sort: sortState.field,
    direction: sortState.direction,
    page: currentPage.value,
    ...additional
  };

  // Remove undefined values
  Object.keys(params).forEach(key => {
    if (params[key] === undefined) {
      delete params[key];
    }
  });

  router.get(route('recipes.index'), params, {
    preserveState: true,
    preserveScroll: true
  });
};
</script>



================================================
FILE: resources/js/Pages/Recipes/Show.vue
================================================
<template>
  <Head :title="`Recipe: ${recipe.data.name}`" />

  <AuthenticatedLayout>
    <template #header>
      <!-- Breadcrumbs -->
      <nav class="flex items-center space-x-2 text-sm text-gray-600 mb-4">
        <Link href="/recipes" class="hover:text-gray-900">Recipes</Link>
        <span>/</span>
        <span class="text-gray-900">{{ recipe.data.name }}</span>
      </nav>

      <div class="flex items-center justify-between">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
          Recipe Details
        </h2>

        <!-- Action Bar -->
        <div class="flex items-center space-x-3">
          <!-- Back to List Button -->
          <Link
            href="/recipes"
            class="inline-flex items-center px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-700 text-sm font-medium rounded-md transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2"
          >
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"/>
            </svg>
            Back to Recipes
          </Link>

          <ActionBar
            :can-edit="canEdit"
            @edit="handleEdit"
            @delete-request="handleDeleteRequest"
          />
        </div>
      </div>
    </template>

    <div class="py-12">
      <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
        <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
          <div class="p-6 text-gray-900 space-y-8">

            <!-- Recipe Header -->
            <RecipeHeader
              :name="recipe?.data.name || ''"
              :category="recipe?.data.category || 'breakfast'"
            />

            <!-- Recipe Meta Badges -->
            <RecipeMetaBadges
              :calories="recipe?.data.calories || 0"
              :servings="recipe?.data.servings || 1"
            />

            <!-- Ingredients Grid -->
            <div class="space-y-4">
              <h2 class="text-2xl font-semibold text-gray-900">Ingredients</h2>
              <IngredientCardGrid :ingredients="recipe?.data.ingredients || []" />
            </div>

            <!-- Instructions Section -->
            <InstructionsSection :instructions="recipe?.data.instructions || ''" />

          </div>
        </div>
      </div>
    </div>

    <!-- Delete Confirmation Dialog -->
    <DeleteConfirmationDialog
      :open="showDeleteDialog"
      :recipe-name="recipe?.data.name || ''"
      :is-loading="deleteLoading"
      @confirm="handleDeleteConfirm"
      @cancel="handleDeleteCancel"
    />
  </AuthenticatedLayout>
</template>

<script setup>
import { ref } from 'vue';
import { Head, Link, router } from '@inertiajs/vue3';
import AuthenticatedLayout from '@/Layouts/AuthenticatedLayout.vue';
import ActionBar from '@/Components/recipes/ActionBar.vue';
import RecipeHeader from '@/Components/recipes/RecipeHeader.vue';
import RecipeMetaBadges from '@/Components/recipes/RecipeMetaBadges.vue';
import IngredientCardGrid from '@/Components/recipes/IngredientCardGrid.vue';
import InstructionsSection from '@/Components/recipes/InstructionsSection.vue';
import DeleteConfirmationDialog from '@/Components/recipes/DeleteConfirmationDialog.vue';
import { useDeleteRecipe } from '@/hooks/useDeleteRecipe';

// Props from Inertia
const props = defineProps({
  recipe: {
    type: Object,
    required: true,
  },
  canEdit: {
    type: Boolean,
    default: false,
  },
});

// State management
const showDeleteDialog = ref(false);
const { deleteRecipe, isLoading: deleteLoading } = useDeleteRecipe();

// Event handlers
function handleEdit() {
  router.visit(`/recipes/${props.recipe.data.id}/edit`);
}

function handleDeleteRequest() {
  showDeleteDialog.value = true;
}

function handleDeleteCancel() {
  showDeleteDialog.value = false;
}

async function handleDeleteConfirm() {
  try {
    await deleteRecipe(props.recipe.data.id);
    showDeleteDialog.value = false;
    // Redirect is handled by the hook
  } catch (error) {
    // Error handling is done in the hook
    console.error('Failed to delete recipe:', error);
  }
}
</script>



================================================
FILE: resources/js/types/meal-plan.ts
================================================
// Types for MealPlan components and API responses
export type MealPlanStatus = 'pending' | 'processing' | 'done' | 'error'

export interface StatusOption {
  value: MealPlanStatus
  label: string
}

export interface MealPlanListItem {
  id: number
  start_date: string // 'YYYY-MM-DD'
  end_date: string   // 'YYYY-MM-DD'
  status: MealPlanStatus
  created_at: string
  updated_at: string
  meals_count: number
  logs_count: number
  links: {
    self: string
  }
}

export interface PaginationMeta {
  current_page: number
  last_page: number
  per_page: number
  total: number
  from: number | null
  to: number | null
}

export interface PaginationLinks {
  first: string | null
  last: string | null
  prev: string | null
  next: string | null
}

export interface MealPlanCollection {
  data: MealPlanListItem[]
  meta: PaginationMeta
  links: PaginationLinks
}

export type SortDirection = 'asc' | 'desc'

export interface FiltersState {
  status?: MealPlanStatus | ''
  sort?: 'start_date' | 'end_date' | 'status' | 'created_at'
  direction?: SortDirection
  perPage?: number
}

export interface MealPlanCollectionProps {
  mealPlans: MealPlanCollection
  filters: {
    'filter.status'?: MealPlanStatus
    sort?: FiltersState['sort']
    direction?: SortDirection
    perPage?: number
  }
  statuses: StatusOption[]
}



================================================
FILE: resources/views/app.blade.php
================================================
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <title inertia>{{ config('app.name', 'Laravel') }}</title>

        <!-- Fonts -->
        <link rel="preconnect" href="https://fonts.bunny.net">
        <link href="https://fonts.bunny.net/css?family=figtree:400,500,600&display=swap" rel="stylesheet" />

        <!-- Scripts -->
        @routes
        @vite(['resources/js/app.js', "resources/js/Pages/{$page['component']}.vue"])
        @inertiaHead
    </head>
    <body class="font-sans antialiased">
        @inertia
    </body>
</html>



================================================
FILE: routes/auth.php
================================================
<?php

use App\Http\Controllers\Auth\AuthenticatedSessionController;
use App\Http\Controllers\Auth\ConfirmablePasswordController;
use App\Http\Controllers\Auth\EmailVerificationNotificationController;
use App\Http\Controllers\Auth\EmailVerificationPromptController;
use App\Http\Controllers\Auth\NewPasswordController;
use App\Http\Controllers\Auth\PasswordController;
use App\Http\Controllers\Auth\PasswordResetLinkController;
use App\Http\Controllers\Auth\RegisteredUserController;
use App\Http\Controllers\Auth\VerifyEmailController;
use Illuminate\Support\Facades\Route;

Route::middleware('guest')->group(function () {
    Route::get('register', [RegisteredUserController::class, 'create'])
        ->name('register');

    Route::post('register', [RegisteredUserController::class, 'store']);

    Route::get('login', [AuthenticatedSessionController::class, 'create'])
        ->name('login');

    Route::post('login', [AuthenticatedSessionController::class, 'store']);

    Route::get('forgot-password', [PasswordResetLinkController::class, 'create'])
        ->name('password.request');

    Route::post('forgot-password', [PasswordResetLinkController::class, 'store'])
        ->name('password.email');

    Route::get('reset-password/{token}', [NewPasswordController::class, 'create'])
        ->name('password.reset');

    Route::post('reset-password', [NewPasswordController::class, 'store'])
        ->name('password.store');
});

Route::middleware('auth')->group(function () {
    Route::get('verify-email', EmailVerificationPromptController::class)
        ->name('verification.notice');

    Route::get('verify-email/{id}/{hash}', VerifyEmailController::class)
        ->middleware(['signed', 'throttle:6,1'])
        ->name('verification.verify');

    Route::post('email/verification-notification', [EmailVerificationNotificationController::class, 'store'])
        ->middleware('throttle:6,1')
        ->name('verification.send');

    Route::get('confirm-password', [ConfirmablePasswordController::class, 'show'])
        ->name('password.confirm');

    Route::post('confirm-password', [ConfirmablePasswordController::class, 'store']);

    Route::put('password', [PasswordController::class, 'update'])->name('password.update');

    Route::post('logout', [AuthenticatedSessionController::class, 'destroy'])
        ->name('logout');
});



================================================
FILE: routes/console.php
================================================
<?php

use Illuminate\Foundation\Inspiring;
use Illuminate\Support\Facades\Artisan;

Artisan::command('inspire', function () {
    $this->comment(Inspiring::quote());
})->purpose('Display an inspiring quote');



================================================
FILE: routes/web.php
================================================
<?php

use App\Http\Controllers\FamilyMemberController;
use App\Http\Controllers\MealPlanController;
use App\Http\Controllers\ProfileController;
use App\Http\Controllers\RecipeController;
use Illuminate\Foundation\Application;
use Illuminate\Support\Facades\Route;
use Inertia\Inertia;

Route::get('/', function () {
    return Inertia::render('Welcome', [
        'canLogin' => Route::has('login'),
        'canRegister' => Route::has('register'),
        'laravelVersion' => Application::VERSION,
        'phpVersion' => PHP_VERSION,
    ]);
});

Route::get('/dashboard', function () {
    return Inertia::render('Dashboard');
})->middleware(['auth', 'verified'])->name('dashboard');

Route::middleware(['auth', 'verified'])->group(function () {
    Route::resource('family-members', FamilyMemberController::class)
        ->except(['show'])
        ->names('family-members');

    Route::resource('recipes', RecipeController::class);

    Route::resource('meal-plans', MealPlanController::class)
        ->only(['index', 'show', 'store', 'update', 'destroy']);

    // Additional meal plan routes
    Route::get('/meal-plans/{meal_plan}/pdf', [MealPlanController::class, 'downloadPdf'])
        ->name('meal-plans.pdf');
});

Route::middleware('auth')->group(function () {
    Route::get('/profile', [ProfileController::class, 'edit'])->name('profile.edit');
    Route::patch('/profile', [ProfileController::class, 'update'])->name('profile.update');
    Route::delete('/profile', [ProfileController::class, 'destroy'])->name('profile.destroy');
});

require __DIR__.'/auth.php';



================================================
FILE: tests/TestCase.php
================================================
<?php

namespace Tests;

use Illuminate\Foundation\Testing\TestCase as BaseTestCase;

abstract class TestCase extends BaseTestCase
{
    //
}



================================================
FILE: tests/Feature/ExampleTest.php
================================================
<?php

namespace Tests\Feature;

// use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ExampleTest extends TestCase
{
    /**
     * A basic test example.
     */
    public function test_the_application_returns_a_successful_response(): void
    {
        $response = $this->get('/');

        $response->assertStatus(200);
    }
}



================================================
FILE: tests/Feature/FamilyMemberTest.php
================================================
<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Models\FamilyMember;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class FamilyMemberTest extends TestCase
{
    use RefreshDatabase;
    use WithFaker;

    private User $user;

    private User $otherUser;

    protected function setUp(): void
    {
        parent::setUp();

        $this->user = User::factory()->create();
        $this->otherUser = User::factory()->create();
    }

    public function test_user_can_view_family_members_index(): void
    {
        FamilyMember::factory()->count(3)->create(['user_id' => $this->user->id]);
        FamilyMember::factory()->count(2)->create(['user_id' => $this->otherUser->id]);

        $response = $this->actingAs($this->user)
            ->get(route('family-members.index'));

        $response->assertStatus(200);
        $response->assertInertia(
            fn ($page) => $page->component('FamilyMembers/Index')
                ->has('familyMembers.data', 3)
        );
    }

    public function test_user_can_view_create_form(): void
    {
        $response = $this->actingAs($this->user)
            ->get(route('family-members.create'));

        $response->assertStatus(200);
        $response->assertInertia(
            fn ($page) => $page->component('FamilyMembers/Create')
                ->has('genders')
                ->where('genders', ['male', 'female'])
        );
    }

    public function test_user_can_store_family_member(): void
    {
        $data = [
            'first_name' => 'John',
            'birth_date' => '1990-01-01',
            'gender' => 'male',
        ];

        $response = $this->actingAs($this->user)
            ->post(route('family-members.store'), $data);

        $response->assertRedirect(route('family-members.index'));
        $response->assertSessionHas('success', 'Family member created successfully.');

        $this->assertDatabaseHas('family_members', [
            'user_id' => $this->user->id,
            'first_name' => 'John',
            'birth_date' => '1990-01-01',
            'gender' => 'male',
        ]);
    }

    public function test_user_can_view_edit_form(): void
    {
        $familyMember = FamilyMember::factory()->create(['user_id' => $this->user->id]);

        $response = $this->actingAs($this->user)
            ->get(route('family-members.edit', $familyMember));

        $response->assertStatus(200);
        $response->assertInertia(
            fn ($page) => $page->component('FamilyMembers/Edit')
                ->has('familyMember')
                ->has('genders')
                ->where('familyMember.id', $familyMember->id)
        );
    }

    public function test_user_can_update_family_member(): void
    {
        $familyMember = FamilyMember::factory()->create(['user_id' => $this->user->id]);

        $data = [
            'first_name' => 'Jane',
            'birth_date' => '1995-05-05',
            'gender' => 'female',
        ];

        $response = $this->actingAs($this->user)
            ->put(route('family-members.update', $familyMember), $data);

        $response->assertRedirect(route('family-members.index'));
        $response->assertSessionHas('success', 'Family member updated successfully.');

        $this->assertDatabaseHas('family_members', [
            'id' => $familyMember->id,
            'first_name' => 'Jane',
            'birth_date' => '1995-05-05',
            'gender' => 'female',
        ]);
    }

    public function test_user_can_delete_family_member(): void
    {
        $familyMember = FamilyMember::factory()->create(['user_id' => $this->user->id]);

        $response = $this->actingAs($this->user)
            ->delete(route('family-members.destroy', $familyMember));

        $response->assertRedirect(route('family-members.index'));
        $response->assertSessionHas('success', 'Family member deleted successfully.');

        $this->assertDatabaseMissing('family_members', [
            'id' => $familyMember->id,
        ]);
    }

    public function test_validation_rules_are_applied(): void
    {
        $response = $this->actingAs($this->user)
            ->post(route('family-members.store'), []);

        $response->assertSessionHasErrors(['first_name', 'birth_date', 'gender']);
    }

    public function test_birth_date_must_be_before_today(): void
    {
        $data = [
            'first_name' => 'John',
            'birth_date' => now()->addDay()->format('Y-m-d'),
            'gender' => 'male',
        ];

        $response = $this->actingAs($this->user)
            ->post(route('family-members.store'), $data);

        $response->assertSessionHasErrors(['birth_date']);
    }

    public function test_invalid_gender_is_rejected(): void
    {
        $data = [
            'first_name' => 'John',
            'birth_date' => '1990-01-01',
            'gender' => 'invalid',
        ];

        $response = $this->actingAs($this->user)
            ->post(route('family-members.store'), $data);

        $response->assertSessionHasErrors(['gender']);
    }

    public function test_user_cannot_edit_other_users_family_member(): void
    {
        $familyMember = FamilyMember::factory()->create(['user_id' => $this->otherUser->id]);

        $response = $this->actingAs($this->user)
            ->get(route('family-members.edit', $familyMember));

        $response->assertStatus(403);
    }

    public function test_user_cannot_update_other_users_family_member(): void
    {
        $familyMember = FamilyMember::factory()->create(['user_id' => $this->otherUser->id]);

        $data = [
            'first_name' => 'Hacker',
            'birth_date' => '1990-01-01',
            'gender' => 'male',
        ];

        $response = $this->actingAs($this->user)
            ->put(route('family-members.update', $familyMember), $data);

        $response->assertStatus(403);
    }

    public function test_user_cannot_delete_other_users_family_member(): void
    {
        $familyMember = FamilyMember::factory()->create(['user_id' => $this->otherUser->id]);

        $response = $this->actingAs($this->user)
            ->delete(route('family-members.destroy', $familyMember));

        $response->assertStatus(403);
    }

    public function test_guest_cannot_access_family_members(): void
    {
        $response = $this->get(route('family-members.index'));
        $response->assertRedirect(route('login'));

        $response = $this->get(route('family-members.create'));
        $response->assertRedirect(route('login'));

        $familyMember = FamilyMember::factory()->create();

        $response = $this->get(route('family-members.edit', $familyMember));
        $response->assertRedirect(route('login'));
    }
}



================================================
FILE: tests/Feature/MealPlanControllerTest.php
================================================
<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Jobs\GenerateMealPlanJob;
use App\Models\MealPlan;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Queue;
use Illuminate\Support\Facades\Storage;
use Tests\TestCase;

class MealPlanControllerTest extends TestCase
{
    use RefreshDatabase;
    use WithFaker;

    protected User $user;

    protected User $otherUser;

    protected function setUp(): void
    {
        parent::setUp();

        $this->user = User::factory()->create();
        $this->otherUser = User::factory()->create();
    }

    public function test_authenticated_user_can_view_meal_plan_index(): void
    {
        MealPlan::factory()->count(3)->for($this->user)->create();
        MealPlan::factory()->count(2)->for($this->otherUser)->create();

        $response = $this->actingAs($this->user)->get(route('meal-plans.index'));

        $response->assertStatus(200);
        $response->assertInertia(
            fn ($page) => $page->component('MealPlans/Index', false)
                ->has('mealPlans.data', 3) // Only user's meal plans
        );
    }

    public function test_guest_cannot_access_meal_plans(): void
    {
        $response = $this->get(route('meal-plans.index'));

        $response->assertRedirect(route('login'));
    }

    public function test_index_can_filter_by_status(): void
    {
        MealPlan::factory()->pending()->for($this->user)->create();
        MealPlan::factory()->done()->count(2)->for($this->user)->create();

        $response = $this->actingAs($this->user)
            ->get(route('meal-plans.index', ['filter' => ['status' => 'done']]));

        $response->assertStatus(200);
        $response->assertInertia(
            fn ($page) => $page->has('mealPlans.data', 2)
        );
    }

    public function test_user_can_view_own_meal_plan(): void
    {
        $mealPlan = MealPlan::factory()->for($this->user)->create();

        $response = $this->actingAs($this->user)->get(route('meal-plans.show', $mealPlan));

        $response->assertStatus(200);
        $response->assertInertia(
            fn ($page) => $page->component('MealPlans/Show', false)
                ->has('mealPlan')
                ->where('mealPlan.id', $mealPlan->id)
        );
    }

    public function test_user_cannot_view_other_users_meal_plan(): void
    {
        $mealPlan = MealPlan::factory()->for($this->otherUser)->create();

        $response = $this->actingAs($this->user)->get(route('meal-plans.show', $mealPlan));

        $response->assertStatus(403);
    }

    public function test_user_can_generate_meal_plan(): void
    {
        Queue::fake();

        $mealPlanData = [
            'start_date' => now()->addDays(7)->format('Y-m-d'),
        ];

        $response = $this->actingAs($this->user)->postJson(route('meal-plans.store'), $mealPlanData);

        $response->assertStatus(201);
        $response->assertJsonStructure([
            'message',
            'data' => [
                'id',
                'start_date',
                'end_date',
                'status',
                'links' => ['self'],
            ],
        ]);

        $this->assertDatabaseHas('meal_plans', [
            'user_id' => $this->user->id,
            'start_date' => $mealPlanData['start_date'],
            'status' => 'pending',
        ]);

        Queue::assertPushed(GenerateMealPlanJob::class, function ($job) {
            return $job->mealPlan->user_id === $this->user->id && ! $job->regenerate;
        });
    }

    public function test_meal_plan_generation_requires_valid_start_date(): void
    {
        $response = $this->actingAs($this->user)->postJson(route('meal-plans.store'), [
            'start_date' => now()->subDay()->format('Y-m-d'), // Yesterday
        ]);

        $response->assertStatus(422);
        $response->assertJsonValidationErrors(['start_date']);
    }

    public function test_meal_plan_generation_prevents_duplicate_start_dates(): void
    {
        $startDate = now()->addDays(7)->format('Y-m-d');

        MealPlan::factory()->for($this->user)->create(['start_date' => $startDate]);

        $response = $this->actingAs($this->user)->postJson(route('meal-plans.store'), [
            'start_date' => $startDate,
        ]);

        $response->assertStatus(422);
        $response->assertJsonValidationErrors(['start_date']);
    }

    public function test_meal_plan_generation_respects_rate_limiting(): void
    {
        $startDate = now()->addDays(7)->format('Y-m-d');

        // Make 5 requests (rate limit)
        for ($i = 1; $i <= 5; $i++) {
            $this->actingAs($this->user)->postJson(route('meal-plans.store'), [
                'start_date' => now()->addDays($i)->format('Y-m-d'),
            ]);
        }

        // 6th request should be rate limited
        $response = $this->actingAs($this->user)->postJson(route('meal-plans.store'), [
            'start_date' => now()->addDays(10)->format('Y-m-d'),
        ]);

        $response->assertStatus(422);
        $response->assertJsonValidationErrors(['rate_limit']);
    }

    public function test_user_can_regenerate_completed_meal_plan(): void
    {
        Queue::fake();

        $mealPlan = MealPlan::factory()->done()->for($this->user)->create();

        $response = $this->actingAs($this->user)->putJson(route('meal-plans.update', $mealPlan), [
            'regenerate' => true,
        ]);

        $response->assertStatus(202);
        $response->assertJsonStructure([
            'message',
            'data' => ['id', 'status'],
        ]);

        $this->assertDatabaseHas('meal_plans', [
            'id' => $mealPlan->id,
            'status' => 'pending',
        ]);

        Queue::assertPushed(GenerateMealPlanJob::class, function ($job) use ($mealPlan) {
            return $job->mealPlan->id === $mealPlan->id && $job->regenerate;
        });
    }

    public function test_user_can_regenerate_failed_meal_plan(): void
    {
        Queue::fake();

        $mealPlan = MealPlan::factory()->error()->for($this->user)->create();

        $response = $this->actingAs($this->user)->putJson(route('meal-plans.update', $mealPlan), [
            'regenerate' => true,
        ]);

        $response->assertStatus(202);
        Queue::assertPushed(GenerateMealPlanJob::class);
    }

    public function test_user_cannot_regenerate_processing_meal_plan(): void
    {
        $mealPlan = MealPlan::factory()->processing()->for($this->user)->create();

        $response = $this->actingAs($this->user)->putJson(route('meal-plans.update', $mealPlan), [
            'regenerate' => true,
        ]);

        $response->assertStatus(422);
        $response->assertJsonValidationErrors(['status']);
    }

    public function test_user_cannot_regenerate_pending_meal_plan(): void
    {
        $mealPlan = MealPlan::factory()->pending()->for($this->user)->create();

        $response = $this->actingAs($this->user)->putJson(route('meal-plans.update', $mealPlan), [
            'regenerate' => true,
        ]);

        $response->assertStatus(422);
        $response->assertJsonValidationErrors(['status']);
    }

    public function test_regeneration_requires_regenerate_flag(): void
    {
        $mealPlan = MealPlan::factory()->done()->for($this->user)->create();

        $response = $this->actingAs($this->user)->putJson(route('meal-plans.update', $mealPlan), []);

        $response->assertStatus(422);
        $response->assertJsonValidationErrors(['regenerate']);
    }

    public function test_user_cannot_regenerate_other_users_meal_plan(): void
    {
        $mealPlan = MealPlan::factory()->done()->for($this->otherUser)->create();

        $response = $this->actingAs($this->user)->putJson(route('meal-plans.update', $mealPlan), [
            'regenerate' => true,
        ]);

        $response->assertStatus(403);
    }

    public function test_user_can_delete_own_meal_plan(): void
    {
        Storage::fake('local');

        $mealPlan = MealPlan::factory()
            ->withPdf()
            ->for($this->user)
            ->create();

        // Create a fake PDF file
        Storage::put($mealPlan->pdf_path, 'fake pdf content');

        $response = $this->actingAs($this->user)->deleteJson(route('meal-plans.destroy', $mealPlan));

        $response->assertStatus(204);

        $this->assertDatabaseMissing('meal_plans', ['id' => $mealPlan->id]);
        Storage::assertMissing($mealPlan->pdf_path);
    }

    public function test_user_cannot_delete_processing_meal_plan(): void
    {
        $mealPlan = MealPlan::factory()->processing()->for($this->user)->create();

        $response = $this->actingAs($this->user)->deleteJson(route('meal-plans.destroy', $mealPlan));

        $response->assertStatus(403);
        $this->assertDatabaseHas('meal_plans', ['id' => $mealPlan->id]);
    }

    public function test_user_cannot_delete_other_users_meal_plan(): void
    {
        $mealPlan = MealPlan::factory()->for($this->otherUser)->create();

        $response = $this->actingAs($this->user)->deleteJson(route('meal-plans.destroy', $mealPlan));

        $response->assertStatus(403);
        $this->assertDatabaseHas('meal_plans', ['id' => $mealPlan->id]);
    }

    public function test_api_responses_are_json_when_expected(): void
    {
        $mealPlan = MealPlan::factory()->for($this->user)->create();

        $response = $this->actingAs($this->user)
            ->withHeaders(['Accept' => 'application/json'])
            ->get(route('meal-plans.index'));

        $response->assertStatus(200);
        $response->assertJsonStructure([
            'data' => ['*' => ['id', 'start_date', 'end_date', 'status']],
            'meta',
            'links',
        ]);

        $response = $this->actingAs($this->user)
            ->withHeaders(['Accept' => 'application/json'])
            ->get(route('meal-plans.show', $mealPlan));

        $response->assertStatus(200);
        $response->assertJsonStructure([
            'data' => ['id', 'start_date', 'end_date', 'status', 'links'],
        ]);
    }
}



================================================
FILE: tests/Feature/ProfileTest.php
================================================
<?php

namespace Tests\Feature;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ProfileTest extends TestCase
{
    use RefreshDatabase;

    public function test_profile_page_is_displayed(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->get('/profile');

        $response->assertOk();
    }

    public function test_profile_information_can_be_updated(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->patch('/profile', [
                'name' => 'Test User',
                'email' => 'test@example.com',
            ]);

        $response
            ->assertSessionHasNoErrors()
            ->assertRedirect('/profile');

        $user->refresh();

        $this->assertSame('Test User', $user->name);
        $this->assertSame('test@example.com', $user->email);
        $this->assertNull($user->email_verified_at);
    }

    public function test_email_verification_status_is_unchanged_when_the_email_address_is_unchanged(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->patch('/profile', [
                'name' => 'Test User',
                'email' => $user->email,
            ]);

        $response
            ->assertSessionHasNoErrors()
            ->assertRedirect('/profile');

        $this->assertNotNull($user->refresh()->email_verified_at);
    }

    public function test_user_can_delete_their_account(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->delete('/profile', [
                'password' => 'password',
            ]);

        $response
            ->assertSessionHasNoErrors()
            ->assertRedirect('/');

        $this->assertGuest();
        $this->assertNull($user->fresh());
    }

    public function test_correct_password_must_be_provided_to_delete_account(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->from('/profile')
            ->delete('/profile', [
                'password' => 'wrong-password',
            ]);

        $response
            ->assertSessionHasErrors('password')
            ->assertRedirect('/profile');

        $this->assertNotNull($user->fresh());
    }
}



================================================
FILE: tests/Feature/RecipeControllerTest.php
================================================
<?php

declare(strict_types=1);

namespace Tests\Feature;

use App\Models\Recipe;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class RecipeControllerTest extends TestCase
{
    use RefreshDatabase;
    use WithFaker;

    protected User $user;

    protected User $otherUser;

    protected function setUp(): void
    {
        parent::setUp();

        $this->user = User::factory()->create();
        $this->otherUser = User::factory()->create();
    }

    public function test_authenticated_user_can_view_recipe_index(): void
    {
        Recipe::factory()->count(3)->for($this->user)->create();
        Recipe::factory()->count(2)->for($this->otherUser)->create();

        $response = $this->actingAs($this->user)->get(route('recipes.index'));

        $response->assertStatus(200);
        $response->assertInertia(
            fn ($page) => $page->component('Recipes/Index')
                ->has('recipes.data', 3) // Only user's recipes
        );
    }

    public function test_guest_cannot_access_recipes(): void
    {
        $response = $this->get(route('recipes.index'));

        $response->assertRedirect(route('login'));
    }

    public function test_user_can_view_own_recipe(): void
    {
        $recipe = Recipe::factory()->for($this->user)->create();

        $response = $this->actingAs($this->user)->get(route('recipes.show', $recipe));

        $response->assertStatus(200);
        $response->assertInertia(
            fn ($page) => $page->component('Recipes/Show')
                ->where('recipe.id', $recipe->id)
        );
    }

    public function test_user_cannot_view_other_users_recipe(): void
    {
        $recipe = Recipe::factory()->for($this->otherUser)->create();

        $response = $this->actingAs($this->user)->get(route('recipes.show', $recipe));

        $response->assertStatus(403);
    }

    public function test_user_can_create_recipe(): void
    {
        $recipeData = [
            'name' => 'Test Recipe',
            'category' => 'breakfast',
            'instructions' => 'Test instructions for the recipe.',
            'calories' => 350,
            'servings' => 2,
        ];

        $response = $this->actingAs($this->user)->post(route('recipes.store'), $recipeData);

        $response->assertRedirect(route('recipes.index'));
        $response->assertSessionHas('success', 'Recipe created successfully.');

        $this->assertDatabaseHas('recipes', [
            'name' => 'Test Recipe',
            'user_id' => $this->user->id,
            'category' => 'breakfast',
        ]);
    }

    public function test_recipe_creation_requires_validation(): void
    {
        $response = $this->actingAs($this->user)->post(route('recipes.store'), []);

        $response->assertSessionHasErrors(['name', 'category', 'instructions', 'calories', 'servings']);
    }

    public function test_recipe_creation_validates_category(): void
    {
        $recipeData = [
            'name' => 'Test Recipe',
            'category' => 'invalid_category',
            'instructions' => 'Test instructions',
            'calories' => 350,
            'servings' => 2,
        ];

        $response = $this->actingAs($this->user)->post(route('recipes.store'), $recipeData);

        $response->assertSessionHasErrors(['category']);
    }

    public function test_user_can_update_own_recipe(): void
    {
        $recipe = Recipe::factory()->for($this->user)->create();

        $updateData = [
            'name' => 'Updated Recipe Name',
            'category' => 'dinner',
            'instructions' => 'Updated instructions',
            'calories' => 500,
            'servings' => 4,
        ];

        $response = $this->actingAs($this->user)->put(route('recipes.update', $recipe), $updateData);

        $response->assertRedirect(route('recipes.show', $recipe));
        $response->assertSessionHas('success', 'Recipe updated successfully.');

        $this->assertDatabaseHas('recipes', [
            'id' => $recipe->id,
            'name' => 'Updated Recipe Name',
            'category' => 'dinner',
        ]);
    }

    public function test_user_cannot_update_other_users_recipe(): void
    {
        $recipe = Recipe::factory()->for($this->otherUser)->create();

        $updateData = [
            'name' => 'Hacked Recipe',
            'category' => 'dinner',
            'instructions' => 'Hacked instructions',
            'calories' => 500,
            'servings' => 4,
        ];

        $response = $this->actingAs($this->user)->put(route('recipes.update', $recipe), $updateData);

        $response->assertStatus(403);
    }

    public function test_user_can_delete_own_recipe(): void
    {
        $recipe = Recipe::factory()->for($this->user)->create();

        $response = $this->actingAs($this->user)->delete(route('recipes.destroy', $recipe));

        $response->assertRedirect(route('recipes.index'));
        $response->assertSessionHas('success', 'Recipe deleted successfully.');

        $this->assertSoftDeleted('recipes', ['id' => $recipe->id]);
    }

    public function test_user_cannot_delete_other_users_recipe(): void
    {
        $recipe = Recipe::factory()->for($this->otherUser)->create();

        $response = $this->actingAs($this->user)->delete(route('recipes.destroy', $recipe));

        $response->assertStatus(403);
        $this->assertDatabaseHas('recipes', ['id' => $recipe->id, 'deleted_at' => null]);
    }

    public function test_recipes_index_can_be_filtered_by_search(): void
    {
        Recipe::factory()->for($this->user)->create(['name' => 'Chocolate Cake']);
        Recipe::factory()->for($this->user)->create(['name' => 'Vanilla Ice Cream']);
        Recipe::factory()->for($this->user)->create(['name' => 'Strawberry Smoothie']);

        $response = $this->actingAs($this->user)->get(route('recipes.index', ['search' => 'chocolate']));

        $response->assertStatus(200);
        $response->assertInertia(
            fn ($page) => $page->has('recipes.data', 1)
        );
    }

    public function test_recipes_index_can_be_filtered_by_category(): void
    {
        Recipe::factory()->for($this->user)->breakfast()->count(2)->create();
        Recipe::factory()->for($this->user)->dinner()->count(3)->create();

        $response = $this->actingAs($this->user)->get(route('recipes.index', ['category' => 'breakfast']));

        $response->assertStatus(200);
        $response->assertInertia(
            fn ($page) => $page->has('recipes.data', 2)
        );
    }

    public function test_recipes_index_can_be_sorted(): void
    {
        Recipe::factory()->for($this->user)->create(['name' => 'Z Recipe']);
        Recipe::factory()->for($this->user)->create(['name' => 'A Recipe']);

        $response = $this->actingAs($this->user)->get(route('recipes.index', [
            'sort' => 'name',
            'direction' => 'asc',
        ]));

        $response->assertStatus(200);
        $response->assertInertia(
            fn ($page) => $page->where('recipes.data.0.name', 'A Recipe')
        );
    }
}



================================================
FILE: tests/Feature/Auth/AuthenticationTest.php
================================================
<?php

namespace Tests\Feature\Auth;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class AuthenticationTest extends TestCase
{
    use RefreshDatabase;

    public function test_login_screen_can_be_rendered(): void
    {
        $response = $this->get('/login');

        $response->assertStatus(200);
    }

    public function test_users_can_authenticate_using_the_login_screen(): void
    {
        $user = User::factory()->create();

        $response = $this->post('/login', [
            'email' => $user->email,
            'password' => 'password',
        ]);

        $this->assertAuthenticated();
        $response->assertRedirect(route('dashboard', absolute: false));
    }

    public function test_users_can_not_authenticate_with_invalid_password(): void
    {
        $user = User::factory()->create();

        $this->post('/login', [
            'email' => $user->email,
            'password' => 'wrong-password',
        ]);

        $this->assertGuest();
    }

    public function test_users_can_logout(): void
    {
        $user = User::factory()->create();

        $response = $this->actingAs($user)->post('/logout');

        $this->assertGuest();
        $response->assertRedirect('/');
    }
}



================================================
FILE: tests/Feature/Auth/EmailVerificationTest.php
================================================
<?php

namespace Tests\Feature\Auth;

use App\Models\User;
use Illuminate\Auth\Events\Verified;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Event;
use Illuminate\Support\Facades\URL;
use Tests\TestCase;

class EmailVerificationTest extends TestCase
{
    use RefreshDatabase;

    public function test_email_verification_screen_can_be_rendered(): void
    {
        $user = User::factory()->unverified()->create();

        $response = $this->actingAs($user)->get('/verify-email');

        $response->assertStatus(200);
    }

    public function test_email_can_be_verified(): void
    {
        $user = User::factory()->unverified()->create();

        Event::fake();

        $verificationUrl = URL::temporarySignedRoute(
            'verification.verify',
            now()->addMinutes(60),
            ['id' => $user->id, 'hash' => sha1($user->email)]
        );

        $response = $this->actingAs($user)->get($verificationUrl);

        Event::assertDispatched(Verified::class);
        $this->assertTrue($user->fresh()->hasVerifiedEmail());
        $response->assertRedirect(route('dashboard', absolute: false).'?verified=1');
    }

    public function test_email_is_not_verified_with_invalid_hash(): void
    {
        $user = User::factory()->unverified()->create();

        $verificationUrl = URL::temporarySignedRoute(
            'verification.verify',
            now()->addMinutes(60),
            ['id' => $user->id, 'hash' => sha1('wrong-email')]
        );

        $this->actingAs($user)->get($verificationUrl);

        $this->assertFalse($user->fresh()->hasVerifiedEmail());
    }
}



================================================
FILE: tests/Feature/Auth/PasswordConfirmationTest.php
================================================
<?php

namespace Tests\Feature\Auth;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class PasswordConfirmationTest extends TestCase
{
    use RefreshDatabase;

    public function test_confirm_password_screen_can_be_rendered(): void
    {
        $user = User::factory()->create();

        $response = $this->actingAs($user)->get('/confirm-password');

        $response->assertStatus(200);
    }

    public function test_password_can_be_confirmed(): void
    {
        $user = User::factory()->create();

        $response = $this->actingAs($user)->post('/confirm-password', [
            'password' => 'password',
        ]);

        $response->assertRedirect();
        $response->assertSessionHasNoErrors();
    }

    public function test_password_is_not_confirmed_with_invalid_password(): void
    {
        $user = User::factory()->create();

        $response = $this->actingAs($user)->post('/confirm-password', [
            'password' => 'wrong-password',
        ]);

        $response->assertSessionHasErrors();
    }
}



================================================
FILE: tests/Feature/Auth/PasswordResetTest.php
================================================
<?php

namespace Tests\Feature\Auth;

use App\Models\User;
use Illuminate\Auth\Notifications\ResetPassword;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Notification;
use Tests\TestCase;

class PasswordResetTest extends TestCase
{
    use RefreshDatabase;

    public function test_reset_password_link_screen_can_be_rendered(): void
    {
        $response = $this->get('/forgot-password');

        $response->assertStatus(200);
    }

    public function test_reset_password_link_can_be_requested(): void
    {
        Notification::fake();

        $user = User::factory()->create();

        $this->post('/forgot-password', ['email' => $user->email]);

        Notification::assertSentTo($user, ResetPassword::class);
    }

    public function test_reset_password_screen_can_be_rendered(): void
    {
        Notification::fake();

        $user = User::factory()->create();

        $this->post('/forgot-password', ['email' => $user->email]);

        Notification::assertSentTo($user, ResetPassword::class, function ($notification) {
            $response = $this->get('/reset-password/'.$notification->token);

            $response->assertStatus(200);

            return true;
        });
    }

    public function test_password_can_be_reset_with_valid_token(): void
    {
        Notification::fake();

        $user = User::factory()->create();

        $this->post('/forgot-password', ['email' => $user->email]);

        Notification::assertSentTo($user, ResetPassword::class, function ($notification) use ($user) {
            $response = $this->post('/reset-password', [
                'token' => $notification->token,
                'email' => $user->email,
                'password' => 'password',
                'password_confirmation' => 'password',
            ]);

            $response
                ->assertSessionHasNoErrors()
                ->assertRedirect(route('login'));

            return true;
        });
    }
}



================================================
FILE: tests/Feature/Auth/PasswordUpdateTest.php
================================================
<?php

namespace Tests\Feature\Auth;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Hash;
use Tests\TestCase;

class PasswordUpdateTest extends TestCase
{
    use RefreshDatabase;

    public function test_password_can_be_updated(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->from('/profile')
            ->put('/password', [
                'current_password' => 'password',
                'password' => 'new-password',
                'password_confirmation' => 'new-password',
            ]);

        $response
            ->assertSessionHasNoErrors()
            ->assertRedirect('/profile');

        $this->assertTrue(Hash::check('new-password', $user->refresh()->password));
    }

    public function test_correct_password_must_be_provided_to_update_password(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->from('/profile')
            ->put('/password', [
                'current_password' => 'wrong-password',
                'password' => 'new-password',
                'password_confirmation' => 'new-password',
            ]);

        $response
            ->assertSessionHasErrors('current_password')
            ->assertRedirect('/profile');
    }
}



================================================
FILE: tests/Feature/Auth/RegistrationTest.php
================================================
<?php

namespace Tests\Feature\Auth;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class RegistrationTest extends TestCase
{
    use RefreshDatabase;

    public function test_registration_screen_can_be_rendered(): void
    {
        $response = $this->get('/register');

        $response->assertStatus(200);
    }

    public function test_new_users_can_register(): void
    {
        $response = $this->post('/register', [
            'name' => 'Test User',
            'email' => 'test@example.com',
            'password' => 'password',
            'password_confirmation' => 'password',
        ]);

        $this->assertAuthenticated();
        $response->assertRedirect(route('dashboard', absolute: false));
    }
}



================================================
FILE: tests/Unit/ExampleTest.php
================================================
<?php

namespace Tests\Unit;

use PHPUnit\Framework\TestCase;

class ExampleTest extends TestCase
{
    /**
     * A basic test example.
     */
    public function test_that_true_is_true(): void
    {
        $this->assertTrue(true);
    }
}



================================================
FILE: tests/Unit/MealPlanPolicyTest.php
================================================
<?php

declare(strict_types=1);

namespace Tests\Unit;

use App\Models\MealPlan;
use App\Models\User;
use App\Policies\MealPlanPolicy;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class MealPlanPolicyTest extends TestCase
{
    use RefreshDatabase;

    protected MealPlanPolicy $policy;

    protected User $user;

    protected User $otherUser;

    protected MealPlan $mealPlan;

    protected function setUp(): void
    {
        parent::setUp();

        $this->policy = new MealPlanPolicy;
        $this->user = User::factory()->create();
        $this->otherUser = User::factory()->create();
        $this->mealPlan = MealPlan::factory()->for($this->user)->create();
    }

    public function test_view_any_allows_authenticated_users(): void
    {
        $this->assertTrue($this->policy->viewAny($this->user));
        $this->assertTrue($this->policy->viewAny($this->otherUser));
    }

    public function test_view_allows_owner(): void
    {
        $this->assertTrue($this->policy->view($this->user, $this->mealPlan));
    }

    public function test_view_denies_non_owner(): void
    {
        $this->assertFalse($this->policy->view($this->otherUser, $this->mealPlan));
    }

    public function test_create_allows_authenticated_users(): void
    {
        $this->assertTrue($this->policy->create($this->user));
        $this->assertTrue($this->policy->create($this->otherUser));
    }

    public function test_update_allows_owner_when_not_processing(): void
    {
        $this->mealPlan->update(['status' => 'pending']);
        $this->assertTrue($this->policy->update($this->user, $this->mealPlan));

        $this->mealPlan->update(['status' => 'done']);
        $this->assertTrue($this->policy->update($this->user, $this->mealPlan));

        $this->mealPlan->update(['status' => 'error']);
        $this->assertTrue($this->policy->update($this->user, $this->mealPlan));
    }

    public function test_update_allows_owner_when_processing(): void
    {
        $this->mealPlan->update(['status' => 'processing']);
        // Policy now allows update for owners - status check moved to request validation
        $this->assertTrue($this->policy->update($this->user, $this->mealPlan));
    }

    public function test_update_denies_non_owner(): void
    {
        $this->mealPlan->update(['status' => 'pending']);
        $this->assertFalse($this->policy->update($this->otherUser, $this->mealPlan));
    }

    public function test_delete_allows_owner_when_not_processing(): void
    {
        $this->mealPlan->update(['status' => 'pending']);
        $this->assertTrue($this->policy->delete($this->user, $this->mealPlan));

        $this->mealPlan->update(['status' => 'done']);
        $this->assertTrue($this->policy->delete($this->user, $this->mealPlan));

        $this->mealPlan->update(['status' => 'error']);
        $this->assertTrue($this->policy->delete($this->user, $this->mealPlan));
    }

    public function test_delete_denies_owner_when_processing(): void
    {
        $this->mealPlan->update(['status' => 'processing']);
        $this->assertFalse($this->policy->delete($this->user, $this->mealPlan));
    }

    public function test_delete_denies_non_owner(): void
    {
        $this->mealPlan->update(['status' => 'pending']);
        $this->assertFalse($this->policy->delete($this->otherUser, $this->mealPlan));
    }

    public function test_restore_allows_owner(): void
    {
        $this->assertTrue($this->policy->restore($this->user, $this->mealPlan));
    }

    public function test_restore_denies_non_owner(): void
    {
        $this->assertFalse($this->policy->restore($this->otherUser, $this->mealPlan));
    }

    public function test_force_delete_allows_owner_when_not_processing(): void
    {
        $this->mealPlan->update(['status' => 'pending']);
        $this->assertTrue($this->policy->forceDelete($this->user, $this->mealPlan));

        $this->mealPlan->update(['status' => 'done']);
        $this->assertTrue($this->policy->forceDelete($this->user, $this->mealPlan));

        $this->mealPlan->update(['status' => 'error']);
        $this->assertTrue($this->policy->forceDelete($this->user, $this->mealPlan));
    }

    public function test_force_delete_denies_owner_when_processing(): void
    {
        $this->mealPlan->update(['status' => 'processing']);
        $this->assertFalse($this->policy->forceDelete($this->user, $this->mealPlan));
    }

    public function test_force_delete_denies_non_owner(): void
    {
        $this->mealPlan->update(['status' => 'pending']);
        $this->assertFalse($this->policy->forceDelete($this->otherUser, $this->mealPlan));
    }
}



================================================
FILE: tests/Unit/MealPlanRequestValidationTest.php
================================================
<?php

declare(strict_types=1);

namespace Tests\Unit;

use App\Http\Requests\GenerateMealPlanRequest;
use App\Http\Requests\RegenerateMealPlanRequest;
use App\Models\MealPlan;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\Facades\Validator;
use Tests\TestCase;

class MealPlanRequestValidationTest extends TestCase
{
    use RefreshDatabase;

    protected User $user;

    protected function setUp(): void
    {
        parent::setUp();

        $this->user = User::factory()->create();
        RateLimiter::clear('generate-meal-plan:'.$this->user->id);
        RateLimiter::clear('regenerate-meal-plan:'.$this->user->id);
    }

    public function test_generate_meal_plan_request_validates_start_date(): void
    {
        $request = new GenerateMealPlanRequest;
        $rules = $request->rules();

        // Valid date (today)
        $validator = Validator::make(['start_date' => now()->format('Y-m-d')], $rules);
        $this->assertTrue($validator->passes());

        // Valid date (future)
        $validator = Validator::make(['start_date' => now()->addDay()->format('Y-m-d')], $rules);
        $this->assertTrue($validator->passes());

        // Invalid date (past)
        $validator = Validator::make(['start_date' => now()->subDay()->format('Y-m-d')], $rules);
        $this->assertFalse($validator->passes());
        $this->assertArrayHasKey('start_date', $validator->errors()->toArray());

        // Invalid format
        $validator = Validator::make(['start_date' => 'invalid-date'], $rules);
        $this->assertFalse($validator->passes());
        $this->assertArrayHasKey('start_date', $validator->errors()->toArray());

        // Missing start_date
        $validator = Validator::make([], $rules);
        $this->assertFalse($validator->passes());
        $this->assertArrayHasKey('start_date', $validator->errors()->toArray());
    }

    public function test_generate_meal_plan_request_validates_regenerate_flag(): void
    {
        $request = new GenerateMealPlanRequest;
        $rules = $request->rules();

        // Valid boolean values
        $validator = Validator::make([
            'start_date' => now()->format('Y-m-d'),
            'regenerate' => true,
        ], $rules);
        $this->assertTrue($validator->passes());

        $validator = Validator::make([
            'start_date' => now()->format('Y-m-d'),
            'regenerate' => false,
        ], $rules);
        $this->assertTrue($validator->passes());

        // String representations
        $validator = Validator::make([
            'start_date' => now()->format('Y-m-d'),
            'regenerate' => '1',
        ], $rules);
        $this->assertTrue($validator->passes());

        $validator = Validator::make([
            'start_date' => now()->format('Y-m-d'),
            'regenerate' => '0',
        ], $rules);
        $this->assertTrue($validator->passes());

        // Invalid value
        $validator = Validator::make([
            'start_date' => now()->format('Y-m-d'),
            'regenerate' => 'invalid',
        ], $rules);
        $this->assertFalse($validator->passes());
        $this->assertArrayHasKey('regenerate', $validator->errors()->toArray());
    }

    public function test_generate_meal_plan_request_checks_unique_start_date(): void
    {
        $startDate = now()->addDays(7)->format('Y-m-d');

        // Create existing meal plan
        MealPlan::factory()->for($this->user)->create(['start_date' => $startDate]);

        $request = new GenerateMealPlanRequest;
        $request->setUserResolver(function () {
            return $this->user;
        });

        $validator = Validator::make(['start_date' => $startDate], $request->rules());

        // Call withValidator which checks the unique constraint
        $request->withValidator($validator);

        $this->assertFalse($validator->passes());
        $this->assertArrayHasKey('start_date', $validator->errors()->toArray());
        $this->assertStringContainsString('already have a meal plan', $validator->errors()->first('start_date'));
    }

    public function test_generate_meal_plan_request_enforces_rate_limiting(): void
    {
        $request = new GenerateMealPlanRequest;
        $request->setUserResolver(function () {
            return $this->user;
        });

        // Hit rate limit 5 times
        for ($i = 0; $i < 5; $i++) {
            RateLimiter::hit('generate-meal-plan:'.$this->user->id, 3600);
        }

        $validator = Validator::make(['start_date' => now()->format('Y-m-d')], $request->rules());

        $this->expectException(\Illuminate\Validation\ValidationException::class);
        $this->expectExceptionMessage('Too many meal plan generation attempts');
        $request->withValidator($validator);
    }

    public function test_regenerate_meal_plan_request_validates_regenerate_flag(): void
    {
        $request = new RegenerateMealPlanRequest;
        $rules = $request->rules();

        // Valid: regenerate is true
        $validator = Validator::make(['regenerate' => true], $rules);
        $this->assertTrue($validator->passes());

        // Invalid: regenerate is false
        $validator = Validator::make(['regenerate' => false], $rules);
        $this->assertFalse($validator->passes());
        $this->assertArrayHasKey('regenerate', $validator->errors()->toArray());

        // Invalid: missing regenerate
        $validator = Validator::make([], $rules);
        $this->assertFalse($validator->passes());
        $this->assertArrayHasKey('regenerate', $validator->errors()->toArray());
    }

    public function test_regenerate_meal_plan_request_validates_force_flag(): void
    {
        $request = new RegenerateMealPlanRequest;
        $rules = $request->rules();

        // Valid: force is true
        $validator = Validator::make([
            'regenerate' => true,
            'force' => true,
        ], $rules);
        $this->assertTrue($validator->passes());

        // Valid: force is false
        $validator = Validator::make([
            'regenerate' => true,
            'force' => false,
        ], $rules);
        $this->assertTrue($validator->passes());

        // Valid: force is missing (nullable)
        $validator = Validator::make(['regenerate' => true], $rules);
        $this->assertTrue($validator->passes());

        // Invalid: force is string
        $validator = Validator::make([
            'regenerate' => true,
            'force' => 'invalid',
        ], $rules);
        $this->assertFalse($validator->passes());
        $this->assertArrayHasKey('force', $validator->errors()->toArray());
    }

    public function test_regenerate_meal_plan_request_checks_meal_plan_status(): void
    {
        $mealPlan = MealPlan::factory()->processing()->for($this->user)->create();

        $request = new RegenerateMealPlanRequest;
        $request->setUserResolver(function () {
            return $this->user;
        });
        $request->setRouteResolver(function () use ($mealPlan) {
            return new class($mealPlan)
            {
                public function __construct(private MealPlan $mealPlan) {}

                public function parameter(string $key)
                {
                    return $this->mealPlan;
                }
            };
        });

        $validator = Validator::make(['regenerate' => true], $request->rules());
        $request->withValidator($validator);

        $this->assertFalse($validator->passes());
        $this->assertArrayHasKey('status', $validator->errors()->toArray());
        $this->assertStringContainsString('Cannot regenerate meal plan while it is being processed', $validator->errors()->first('status'));
    }

    public function test_regenerate_meal_plan_request_allows_done_status(): void
    {
        $mealPlan = MealPlan::factory()->done()->for($this->user)->create();

        $request = new RegenerateMealPlanRequest;
        $request->setUserResolver(function () {
            return $this->user;
        });
        $request->setRouteResolver(function () use ($mealPlan) {
            return new class($mealPlan)
            {
                public function __construct(private MealPlan $mealPlan) {}

                public function parameter(string $key)
                {
                    return $this->mealPlan;
                }
            };
        });

        $validator = Validator::make(['regenerate' => true], $request->rules());
        $request->withValidator($validator);

        $this->assertTrue($validator->passes());
    }

    public function test_regenerate_meal_plan_request_allows_error_status(): void
    {
        $mealPlan = MealPlan::factory()->error()->for($this->user)->create();

        $request = new RegenerateMealPlanRequest;
        $request->setUserResolver(function () {
            return $this->user;
        });
        $request->setRouteResolver(function () use ($mealPlan) {
            return new class($mealPlan)
            {
                public function __construct(private MealPlan $mealPlan) {}

                public function parameter(string $key)
                {
                    return $this->mealPlan;
                }
            };
        });

        $validator = Validator::make(['regenerate' => true], $request->rules());
        $request->withValidator($validator);

        $this->assertTrue($validator->passes());
    }
}



================================================
FILE: tests/Unit/RecipePolicyTest.php
================================================
<?php

declare(strict_types=1);

namespace Tests\Unit;

use App\Models\Recipe;
use App\Models\User;
use App\Policies\RecipePolicy;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class RecipePolicyTest extends TestCase
{
    use RefreshDatabase;

    protected RecipePolicy $policy;

    protected User $user;

    protected User $otherUser;

    protected Recipe $recipe;

    protected function setUp(): void
    {
        parent::setUp();

        $this->policy = new RecipePolicy;
        $this->user = User::factory()->create();
        $this->otherUser = User::factory()->create();
        $this->recipe = Recipe::factory()->for($this->user)->create();
    }

    public function test_user_can_view_any_recipes(): void
    {
        $this->assertTrue($this->policy->viewAny($this->user));
    }

    public function test_user_can_view_own_recipe(): void
    {
        $this->assertTrue($this->policy->view($this->user, $this->recipe));
    }

    public function test_user_cannot_view_other_users_recipe(): void
    {
        $this->assertFalse($this->policy->view($this->otherUser, $this->recipe));
    }

    public function test_user_can_create_recipes(): void
    {
        $this->assertTrue($this->policy->create($this->user));
    }

    public function test_user_can_update_own_recipe(): void
    {
        $this->assertTrue($this->policy->update($this->user, $this->recipe));
    }

    public function test_user_cannot_update_other_users_recipe(): void
    {
        $this->assertFalse($this->policy->update($this->otherUser, $this->recipe));
    }

    public function test_user_can_delete_own_recipe(): void
    {
        $this->assertTrue($this->policy->delete($this->user, $this->recipe));
    }

    public function test_user_cannot_delete_other_users_recipe(): void
    {
        $this->assertFalse($this->policy->delete($this->otherUser, $this->recipe));
    }

    public function test_user_can_restore_own_recipe(): void
    {
        $this->assertTrue($this->policy->restore($this->user, $this->recipe));
    }

    public function test_user_cannot_restore_other_users_recipe(): void
    {
        $this->assertFalse($this->policy->restore($this->otherUser, $this->recipe));
    }

    public function test_user_can_force_delete_own_recipe(): void
    {
        $this->assertTrue($this->policy->forceDelete($this->user, $this->recipe));
    }

    public function test_user_cannot_force_delete_other_users_recipe(): void
    {
        $this->assertFalse($this->policy->forceDelete($this->otherUser, $this->recipe));
    }
}



================================================
FILE: tests/Unit/RecipeRequestValidationTest.php
================================================
<?php

declare(strict_types=1);

namespace Tests\Unit;

use App\Http\Requests\StoreRecipeRequest;
use App\Http\Requests\UpdateRecipeRequest;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Validator;
use Tests\TestCase;

class RecipeRequestValidationTest extends TestCase
{
    use RefreshDatabase;

    public function test_store_recipe_request_passes_with_valid_data(): void
    {
        $data = [
            'name' => 'Test Recipe',
            'category' => 'breakfast',
            'instructions' => 'Mix all ingredients and cook.',
            'calories' => 350,
            'servings' => 2,
        ];

        $request = new StoreRecipeRequest;
        $validator = Validator::make($data, $request->rules());

        $this->assertTrue($validator->passes());
    }

    public function test_store_recipe_request_fails_without_required_fields(): void
    {
        $data = [];

        $request = new StoreRecipeRequest;
        $validator = Validator::make($data, $request->rules());

        $this->assertTrue($validator->fails());
        $this->assertArrayHasKey('name', $validator->errors()->toArray());
        $this->assertArrayHasKey('category', $validator->errors()->toArray());
        $this->assertArrayHasKey('instructions', $validator->errors()->toArray());
        $this->assertArrayHasKey('calories', $validator->errors()->toArray());
        $this->assertArrayHasKey('servings', $validator->errors()->toArray());
    }

    public function test_store_recipe_request_validates_category(): void
    {
        $data = [
            'name' => 'Test Recipe',
            'category' => 'invalid_category',
            'instructions' => 'Mix all ingredients.',
            'calories' => 350,
            'servings' => 2,
        ];

        $request = new StoreRecipeRequest;
        $validator = Validator::make($data, $request->rules());

        $this->assertTrue($validator->fails());
        $this->assertArrayHasKey('category', $validator->errors()->toArray());
    }

    public function test_store_recipe_request_validates_positive_calories(): void
    {
        $data = [
            'name' => 'Test Recipe',
            'category' => 'breakfast',
            'instructions' => 'Mix all ingredients.',
            'calories' => -10,
            'servings' => 2,
        ];

        $request = new StoreRecipeRequest;
        $validator = Validator::make($data, $request->rules());

        $this->assertTrue($validator->fails());
        $this->assertArrayHasKey('calories', $validator->errors()->toArray());
    }

    public function test_store_recipe_request_validates_positive_servings(): void
    {
        $data = [
            'name' => 'Test Recipe',
            'category' => 'breakfast',
            'instructions' => 'Mix all ingredients.',
            'calories' => 350,
            'servings' => 0,
        ];

        $request = new StoreRecipeRequest;
        $validator = Validator::make($data, $request->rules());

        $this->assertTrue($validator->fails());
        $this->assertArrayHasKey('servings', $validator->errors()->toArray());
    }

    public function test_store_recipe_request_validates_max_name_length(): void
    {
        $data = [
            'name' => str_repeat('a', 256), // 256 characters, exceeds max of 255
            'category' => 'breakfast',
            'instructions' => 'Mix all ingredients.',
            'calories' => 350,
            'servings' => 2,
        ];

        $request = new StoreRecipeRequest;
        $validator = Validator::make($data, $request->rules());

        $this->assertTrue($validator->fails());
        $this->assertArrayHasKey('name', $validator->errors()->toArray());
    }

    public function test_update_recipe_request_passes_with_partial_data(): void
    {
        $data = [
            'name' => 'Updated Recipe Name',
        ];

        $request = new UpdateRecipeRequest;
        $validator = Validator::make($data, $request->rules());

        $this->assertTrue($validator->passes());
    }

    public function test_update_recipe_request_validates_category_when_provided(): void
    {
        $data = [
            'category' => 'invalid_category',
        ];

        $request = new UpdateRecipeRequest;
        $validator = Validator::make($data, $request->rules());

        $this->assertTrue($validator->fails());
        $this->assertArrayHasKey('category', $validator->errors()->toArray());
    }

    public function test_update_recipe_request_validates_calories_when_provided(): void
    {
        $data = [
            'calories' => -50,
        ];

        $request = new UpdateRecipeRequest;
        $validator = Validator::make($data, $request->rules());

        $this->assertTrue($validator->fails());
        $this->assertArrayHasKey('calories', $validator->errors()->toArray());
    }

    public function test_valid_categories_are_accepted(): void
    {
        $validCategories = ['breakfast', 'supper', 'dinner'];

        foreach ($validCategories as $category) {
            $data = [
                'name' => 'Test Recipe',
                'category' => $category,
                'instructions' => 'Mix all ingredients.',
                'calories' => 350,
                'servings' => 2,
            ];

            $request = new StoreRecipeRequest;
            $validator = Validator::make($data, $request->rules());

            $this->assertTrue($validator->passes(), "Category '{$category}' should be valid");
        }
    }
}



================================================
FILE: .ai/api/family-members-implementation-plan.md
================================================
# Plan implementacji modu≈Çu Cz≈Çonkowie Rodziny (US-004)

## Cel
Zaimplementowaƒá kompletnƒÖ obs≈Çugƒô CRUD dla modelu `FamilyMember`, dziƒôki kt√≥rej zalogowany u≈ºytkownik bƒôdzie m√≥g≈Ç:
1. dodawaƒá nowych cz≈Çonk√≥w rodziny,
2. przeglƒÖdaƒá listƒô oraz szczeg√≥≈Çy cz≈Çonk√≥w,
3. edytowaƒá istniejƒÖce dane,
4. usuwaƒá wybrane rekordy.

## Zakres prac backendowych

### 1. Routing
```php
// routes/web.php
Route::middleware(['auth', 'verified'])->group(function () {
    Route::resource('family-members', FamilyMemberController::class)
        ->except(['show'])      // widok szczeg√≥≈Ç√≥w nie jest wymagany na MVP
        ->names('family-members');
});
```
* Pozostawiamy REST-owe nazewnictwo, co u≈Çatwi implementacjƒô test√≥w oraz klienta Inertia.js.

### 2. Kontroler `FamilyMemberController`
Metody:
| Metoda    | Odpowiedzialno≈õƒá  | Szczeg√≥≈Çy                                                                           |
| --------- | ----------------- | ----------------------------------------------------------------------------------- |
| `index`   | Lista cz≈Çonk√≥w    | Paginowana lista z filtrowaniem (opcjonalnie)                                       |
| `create`  | Formularz dodania | Zwraca pusty model + dane referencyjne (np. allowed genders)                        |
| `store`   | Zapis nowego      | Walidacja przez `FamilyMemberRequest`; przypisanie `user_id` aktualnego u≈ºytkownika |
| `edit`    | Formularz edycji  | Autoryzacja przez `Policy`                                                          |
| `update`  | Aktualizacja      | Walidacja + autoryzacja                                                             |
| `destroy` | Usuniƒôcie         | Soft-delete niewymagany ‚Äì na razie hard delete + autoryzacja                        |

Wszystkie metody zwracajƒÖ `Inertia::render()` lub odpowied≈∫ JSON (w zale≈ºno≈õci od call-stacku). Najpierw implementujemy wersjƒô Inertia.

### 3. Form Request `FamilyMemberRequest`
```php
public function rules(): array
{
    $id = $this->route('family_member')?->id;

    return [
        'first_name' => ['required', 'string', 'max:255'],
        'birth_date' => ['required', 'date', 'before:today'],
        'gender'     => ['required', 'in:male,female,other'],
    ];
}
```
* Zapewnia sp√≥jno≈õƒá walidacji pomiƒôdzy `store` i `update`.
* Obs≈Çuga komunikat√≥w w resources/lang.

### 4. Polityka `FamilyMemberPolicy`
| Akcja              | Regu≈Ça                                                                            |
| ------------------ | --------------------------------------------------------------------------------- |
| `viewAny`          | U≈ºytkownik widzi wy≈ÇƒÖcznie swoje rekordy (w kontrolerze filtrujemy po `user_id`). |
| `create`           | Zalogowany u≈ºytkownik zawsze mo≈ºe dodawaƒá.                                        |
| `update`, `delete` | `user_id === auth()->id()`                                                        |

Rejestracja w `AuthServiceProvider`.

### 5. Model
Model `FamilyMember` ju≈º istnieje i posiada:
* `protected $fillable` ‚úÖ
* `protected $casts` ‚úÖ
* Relacjƒô `user()` ‚úÖ

Do rozwa≈ºenia:
* dodaƒá `HasFactory` dla test√≥w,
* stosowaƒá `Enum` dla p≈Çci (PHP 8.2 backed enum + cast).

### 6. Migracja
Je≈õli nie istnieje, tworzymy:
```php
Schema::create('family_members', function (Blueprint $table) {
    $table->id();
    $table->foreignId('user_id')->constrained()->cascadeOnDelete();
    $table->string('first_name');
    $table->date('birth_date');
    $table->string('gender', 20);
    $table->timestamps();
});
```

### 7. Testy
1. **Feature-tests** (`tests/Feature/FamilyMemberTest.php`)
   * `it_stores_family_member`
   * `it_updates_family_member`
   * `it_deletes_family_member`
   * `it_validates_required_fields`
2. **Policy-tests** (je≈ºeli korzystamy z Larastan, wystarczƒÖ feature-tests z policy).
3. **FormRequest-tests** ‚Äì pokryte w feature.

### 8. Bezpiecze≈Ñstwo & Jako≈õƒá
* U≈ºycie `@can`/`Gate::authorize` w kontrolerze.
* Mass-assignment chroniony przez `$fillable`.
* U≈ºycie CSRF + Auth middleware.
* Larastan (level max) i Pint w CI.

### 9. Potencjalne usprawnienia (po MVP)
* Soft deletes (`SoftDeletes`) + mo≈ºliwo≈õƒá przywracania.
* Enum `Gender` + translation layer.
* Import cz≈Çonk√≥w przez CSV.
* Dodatkowe pola (wzrost, waga) do dok≈Çadniejszego wyliczania kalorii.



================================================
FILE: .ai/api/meal-plan-implementation-plan.md
================================================
# MealPlanController ‚Äì Implementation Plan

## Overview
The `MealPlanController` manages 7-day meal-plan life-cycle for an authenticated user.

Responsibilities:
1. CRUD-like endpoints (index, show, store ‚Äì generate, update ‚Äì regenerate, destroy).
2. Delegates heavy business logic (random recipe pick, scaling ingredients, PDF generation, etc.) to dedicated Services & Jobs.
3. Authorises every action with `MealPlanPolicy`.
4. Returns Inertia pages (browser) **and** JSON (tests/API) via Laravel Resources.

Route definition (already registered in `routes/web.php`):
```php
Route::middleware(['auth', 'verified'])->group(function () {
    Route::resource('meal-plans', MealPlanController::class)
        ->only(['index', 'show', 'store', 'update', 'destroy']);
});
```

## Request Specification
| Action  | Method & URI                     | FormRequest (DTO)           | Key Fields (validation rules)                                  |
| ------- | -------------------------------- | --------------------------- | -------------------------------------------------------------- |
| index   | `GET /meal-plans`                | ‚Äî                           | `page` *(int)*, `filter[status]` *(enum)*, `perPage` *(5-100)* |
| show    | `GET /meal-plans/{meal_plan}`    | ‚Äî *(route-model binding)*   | ‚Äî                                                              |
| store   | `POST /meal-plans`               | `GenerateMealPlanRequest`   | `start_date:date                                               | after_or_equal:today`, `regenerate:boolean` *(default false)* |
| update  | `PUT /meal-plans/{meal_plan}`    | `RegenerateMealPlanRequest` | `regenerate:boolean                                            | required                                                      | accepted`, `force:boolean | nullable` |
| destroy | `DELETE /meal-plans/{meal_plan}` | ‚Äî                           | ‚Äî                                                              |

### DTO / FormRequest
* **GenerateMealPlanRequest** ‚Äì validates initial generation.
* **RegenerateMealPlanRequest** ‚Äì allows refreshing an existing plan (**status must be done or error**) and optional `force` flag to bypass 5/h rate-limit.

Both FormRequests:
* Authorise via `MealPlanPolicy` (`create` or `update`).
* Inject `user()` id automatically.

### Serialization
* **MealPlanResource** ‚Äì single plan with relationships:
  * meals (with recipe & ingredients) ordered by `meal_date`.
  * logs (latest first).
* **MealPlanCollection** ‚Äì paginated list used in `index`.
* Lazy-loads to keep queries minimal; eager-load counts for performance.

## Response Examples
```jsonc
// 201 Created (store)
{
  "data": {
    "id": 42,
    "start_date": "2025-09-01",
    "end_date": "2025-09-07",
    "status": "pending",
    "links": { "self": "/meal-plans/42" }
  }
}

// 202 Accepted (update ‚Äì regeneration queued)
{
  "message": "Meal plan regeneration started.",
  "data": { "id": 42, "status": "processing" }
}
```

## Controller Internal Flow
1. **index**
   1. Authorise `viewAny`.
   2. Apply filters/sorts, eager-load minimal fields.
   3. Return Inertia `MealPlans/Index.vue` with `MealPlanCollection` (for tests JSON if request expectsJson()).

2. **show**
   1. Authorise `view`.
   2. Load relations (`meals.recipe`, `logs`).
   3. Return Inertia `MealPlans/Show.vue` with `MealPlanResource`.

3. **store** (generate)
   1. Validate via `GenerateMealPlanRequest`.
   2. Authorise in FormRequest (`create`).
   3. Persist meal_plan record with `status=pending` + calculated `end_date = start_date->addDays(6)`.
   4. Dispatch **GenerateMealPlanJob** which uses **MealPlanGeneratorService**.
   5. Return `MealPlanResource` (HTTP 201) ‚Äì light payload.

4. **update** (regenerate)
   1. Validate via `RegenerateMealPlanRequest`.
   2. Authorise (`update`).
   3. Guard: cannot regenerate while `status=processing` *(409 Conflict)*.
   4. Update `status` to `pending`, clear `generation_meta`.
   5. Dispatch **GenerateMealPlanJob** with `regenerate=true`.
   6. Respond `202 Accepted`.

5. **destroy**
   1. Authorise `delete` (policy forbids when `status=processing`).
   2. Delete PDF from storage if exists (`Storage::delete`).
   3. Cascade delete meals & logs via database FK `ON DELETE CASCADE` or model events.
   4. Return `204 No Content`.

## Security & Authorisation
* **Authentication** ‚Äì middleware `auth`, `verified`.
* **Authorisation** ‚Äì `MealPlanPolicy` actions.
* **Rate-limit** ‚Äì specific `GenerateMealPlanRequest` (5 per hour) using Laravel‚Äôs RateLimiter.
* **CSRF** ‚Äì default Laravel for web; Sanctum for SPA.
* **Data Integrity** ‚Äì use FormRequests & database constraints (unique `user_id,start_date`).
* **Job Queue** ‚Äì run heavy generation async to prevent request timeouts.

## Error Scenarios
| HTTP | When                                  | Message key                     |
| ---- | ------------------------------------- | ------------------------------- |
| 400  | Validation fails                      | `errors` array from FormRequest |
| 401  | Not authenticated                     | ‚Äî                               |
| 403  | Policy denies (view/update/delete)    | `Forbidden`                     |
| 404  | Meal plan id not found / not owned    | ‚Äî                               |
| 409  | Cannot regenerate ‚Äë status processing | `meal_plan_processing`          |
| 422  | Unique `start_date` collision         | `start_date_taken`              |
| 429  | Rate limit exceeded (store/update)    | `Too many requests`             |
| 500  | Service/Job throws unhandled error    | logged via Sentry               |

## Implementation Steps
1. **Model**: ensure relationships & casts in `MealPlan`, implement `scopeOwnedBy($user)`.
2. **FormRequests**: `GenerateMealPlanRequest`, `RegenerateMealPlanRequest` (rules + authorise + rate-limit).
3. **Resources**: `MealPlanResource`, `MealPlanCollection`.
4. **Policy**: verify `delete` rule denies when `status=processing`.
5. **Service**: `MealPlanGeneratorService` (idempotent, no recipe duplicates) & `GenerateMealPlanJob`.
6. **Controller**: scaffold with methods above, handle Inertia/JSON duality.
7. **Routes**: ensure grouped middleware, add rate-limit to `store`, `update` if needed.
8. **Testing**: Feature tests for each endpoint (happy path + each error scenario).
9. **Docs**: update API reference & Inertia page contracts.
10. **Code Style & Static Analysis**: run Pint & Larastan.




================================================
FILE: .ai/api/recipe-implementation-plan.md
================================================
# RecipeController Implementation Plan

## Overview

Implementacja kontrolera `RecipeController` jako resource controller dla zarzƒÖdzania przepisami w aplikacji Menu Maker. Kontroler obs≈Çuguje pe≈Çny CRUD cycle dla przepis√≥w nale≈ºƒÖcych do zalogowanego u≈ºytkownika z relacjami N-N do sk≈Çadnik√≥w.

**Resource Routes:**
- `GET /recipes` - lista przepis√≥w u≈ºytkownika
- `GET /recipes/{recipe}` - szczeg√≥≈Çy przepisu
- `POST /recipes` - tworzenie nowego przepisu
- `PUT/PATCH /recipes/{recipe}` - aktualizacja przepisu
- `DELETE /recipes/{recipe}` - usuniƒôcie przepisu

**Model Relations:**
- `Recipe` belongsTo `User` (owner)
- `Recipe` belongsToMany `Ingredient` (via `recipe_ingredients` pivot)

## Request

### Route Parameters
- `{recipe}` - ID przepisu (route model binding)

### Request Classes
1. **StoreRecipeRequest**
   ```php
   'name' => 'required|string|max:255',
   'category' => 'required|in:breakfast,supper,dinner',
   'instructions' => 'required|string',
   'calories' => 'required|numeric|min:0',
   'servings' => 'required|integer|min:1',
   'ingredients' => 'sometimes|array',
   'ingredients.*.ingredient_id' => 'required|exists:ingredients,id',
   'ingredients.*.quantity' => 'required|numeric|min:0.01',
   'ingredients.*.unit_id' => 'required|exists:units,id'
   ```

2. **UpdateRecipeRequest**
   - Identyczne regu≈Çy walidacji jak `StoreRecipeRequest`
   - Wszystkie pola opcjonalne podczas `PATCH`

### Query Parameters (index)
- `search` - wyszukiwanie po nazwie/instrukcjach
- `category` - filtrowanie po kategorii
- `per_page` - liczba element√≥w na stronƒô (default: 15)
- `sort` - sortowanie (name, created_at, calories)
- `direction` - kierunek sortowania (asc, desc)

## Response

### Resource Classes
1. **RecipeResource** (pojedynczy przepis)
   ```php
   'id' => $this->id,
   'name' => $this->name,
   'category' => $this->category,
   'instructions' => $this->instructions,
   'calories' => $this->calories,
   'servings' => $this->servings,
   'created_at' => $this->created_at,
   'updated_at' => $this->updated_at,
   'ingredients' => RecipeIngredientResource::collection($this->whenLoaded('recipeIngredients'))
   ```

2. **RecipeIngredientResource** (sk≈Çadnik w przepisie)
   ```php
   'ingredient_id' => $this->ingredient_id,
   'ingredient_name' => $this->ingredient->name,
   'quantity' => $this->quantity,
   'unit_id' => $this->unit_id,
   'unit_code' => $this->unit->code
   ```

### Response Formats
- **index**: `RecipeResource::collection()` + pagination
- **show**: `RecipeResource` z loaded relations
- **store/update**: `RecipeResource` ze statusem 201/200
- **destroy**: status 204 (No Content)

## Flow

### 1. Index Method
```php
public function index(Request $request): Response
{
    $recipes = Recipe::where('user_id', auth()->id())
        ->when($request->search, fn($q) => $q->where('name', 'like', "%{$request->search}%"))
        ->when($request->category, fn($q) => $q->where('category', $request->category))
        ->orderBy($request->sort ?? 'created_at', $request->direction ?? 'desc')
        ->paginate($request->per_page ?? 15);

    return Inertia::render('Recipes/Index', [
        'recipes' => RecipeResource::collection($recipes),
        'filters' => $request->only(['search', 'category']),
        'categories' => ['breakfast', 'suppr', 'dinner']
    ]);
}
```

### 2. Show Method
```php
public function show(Recipe $recipe): Response
{
    $this->authorize('view', $recipe);

    $recipe->load(['recipeIngredients.ingredient', 'recipeIngredients.unit']);

    return Inertia::render('Recipes/Show', [
        'recipe' => new RecipeResource($recipe)
    ]);
}
```

### 3. Store Method
```php
public function store(StoreRecipeRequest $request): RedirectResponse
{
    DB::transaction(function () use ($request) {
        $recipe = Recipe::create([
            ...$request->validated(),
            'user_id' => auth()->id()
        ]);

        if ($request->has('ingredients')) {
            $this->syncRecipeIngredients($recipe, $request->ingredients);
        }

        return $recipe;
    });

    return redirect()->route('recipes.index')
        ->with('success', 'Recipe created successfully.');
}
```

### 4. Update Method
```php
public function update(UpdateRecipeRequest $request, Recipe $recipe): RedirectResponse
{
    $this->authorize('update', $recipe);

    DB::transaction(function () use ($request, $recipe) {
        $recipe->update($request->validated());

        if ($request->has('ingredients')) {
            $this->syncRecipeIngredients($recipe, $request->ingredients);
        }
    });

    return redirect()->route('recipes.show', $recipe)
        ->with('success', 'Recipe updated successfully.');
}
```

### 5. Destroy Method
```php
public function destroy(Recipe $recipe): RedirectResponse
{
    $this->authorize('delete', $recipe);

    $recipe->delete(); // Soft delete recommended

    return redirect()->route('recipes.index')
        ->with('success', 'Recipe deleted successfully.');
}
```

### Helper Methods
```php
private function syncRecipeIngredients(Recipe $recipe, array $ingredients): void
{
    $pivotData = collect($ingredients)->mapWithKeys(function ($ingredient) {
        return [$ingredient['ingredient_id'] => [
            'quantity' => $ingredient['quantity'],
            'unit_id' => $ingredient['unit_id']
        ]];
    });

    $recipe->ingredients()->sync($pivotData);
}
```

## Security

### Authorization (RecipePolicy)
```php
class RecipePolicy
{
    public function viewAny(User $user): bool
    {
        return true; // User can view their own recipes
    }

    public function view(User $user, Recipe $recipe): bool
    {
        return $user->id === $recipe->user_id;
    }

    public function create(User $user): bool
    {
        return true; // Any authenticated user can create
    }

    public function update(User $user, Recipe $recipe): bool
    {
        return $user->id === $recipe->user_id;
    }

    public function delete(User $user, Recipe $recipe): bool
    {
        return $user->id === $recipe->user_id;
    }
}
```

### Middleware Stack
- `auth` - wymagane uwierzytelnienie
- `verified` - weryfikacja email
- Route model binding z automatic policy checks

### Data Protection
- **Mass Assignment**: fillable fields w modelu Recipe
- **XSS Protection**: automatyczne escapowanie w Vue templates
- **CSRF Protection**: automatyczna ochrona Inertia.js
- **SQL Injection**: Eloquent ORM queries
- **File Uploads**: brak w tym kontrolerze (przysz≈Çe zdjƒôcia przepis√≥w)

## Errors

### Validation Errors (422)
- Nieprawid≈Çowe dane w FormRequest
- Automatyczne przekierowanie z b≈Çƒôdami walidacji
- Frontend wy≈õwietla b≈Çƒôdy pod polami formularza

### Authorization Errors (403)
- Pr√≥ba dostƒôpu do cudzego przepisu
- Automatyczne przekierowanie na 403 page

### Not Found (404)
- NieistniejƒÖcy recipe ID
- Route model binding automatycznie rzuca ModelNotFoundException

### Server Errors (500)
- Database transaction failures
- Unexpected exceptions
- Logowanie do Laravel logs + Sentry (production)

### Business Logic Errors
- Pr√≥ba przypisania nieistniejƒÖcego sk≈Çadnika
- Nieprawid≈Çowe jednostki miary
- Duplikaty sk≈Çadnik√≥w w przepisie (validation level)

## Steps

### 1. Model Setup
- [x] Recipe model z relationships
- [x] Recipe migration with proper indexes
- [ ] Model factories for testing
- [ ] Soft deletes configuration

### 2. Request Classes
- [ ] Create `StoreRecipeRequest`
- [ ] Create `UpdateRecipeRequest`
- [ ] Implement custom validation rules
- [ ] Add authorization methods

### 3. Policy Implementation
- [ ] Create `RecipePolicy`
- [ ] Register policy in `AuthServiceProvider`
- [ ] Test authorization scenarios

### 4. Resource Classes
- [ ] Create `RecipeResource`
- [ ] Create `RecipeIngredientResource`
- [ ] Optimize eager loading
- [ ] Add conditional fields

### 5. Controller Implementation
- [ ] Implement `index` method with filtering/search
- [ ] Implement `show` method with relationships
- [ ] Implement `store` method with transaction
- [ ] Implement `update` method with ingredient sync
- [ ] Implement `destroy` method with policy check
- [ ] Add helper methods for ingredient management

### 6. Route Registration
- [ ] Register resource routes
- [ ] Add route model binding
- [ ] Configure middleware stack
- [ ] Set up route caching

### 7. Frontend Integration
- [ ] Create Vue components (Index, Show, Form)
- [ ] Implement Inertia.js pages
- [ ] Add form validation on frontend
- [ ] Implement search and filtering UI
- [ ] Add loading states and error handling

### 8. Testing
- [ ] Feature tests for all CRUD operations
- [ ] Policy authorization tests
- [ ] Form request validation tests
- [ ] Integration tests with ingredients
- [ ] Performance tests for large datasets

### 9. Performance Optimization
- [ ] Database indexes on commonly queried fields
- [ ] Eager loading optimization
- [ ] Query caching for static data
- [ ] Pagination optimization
- [ ] API response caching (Redis)

### 10. Documentation
- [ ] API documentation
- [ ] Frontend component documentation
- [ ] Database relationships documentation
- [ ] Deployment considerations



================================================
FILE: .ai/core/api-plan.md
================================================
# Backend API Plan ‚Äî Menu Maker

## 1. Encje, relacje, walidacja

| Encja (tabela)       | Kluczowe pola                                              | Relacje                                               | Regu≈Çy walidacji (g≈Ç√≥wne)                                                           |
| -------------------- | ---------------------------------------------------------- | ----------------------------------------------------- | ----------------------------------------------------------------------------------- |
| `users`              | `name`, `email`, `password`                                | 1-N `family_members`, 1-N `recipes`, 1-N `meal_plans` | `name:string                                                                        | max:255`, `email:email                                                                                     | unique`, `password:string                   | min:8`      |
| `family_members`     | `first_name`, `birth_date`, `gender`                       | N-1 `users`                                           | `first_name:string                                                                  | max:255`, `birth_date:date                                                                                 | before:today`, `gender:in:male,female`      |
| `units`              | `code`, `conversion_factor_to_base`                        | 1-N `recipe_ingredients`                              | `code:string                                                                        | max:10                                                                                                     | unique`, `conversion_factor_to_base:numeric | min:0.0001` |
| `ingredients`        | `name`                                                     | N-N `recipes` (via `recipe_ingredients`)              | `name:string                                                                        | max:255                                                                                                    | unique`                                     |
| `recipes`            | `name`, `category`, `instructions`, `calories`, `servings` | N-1 `users`, N-N `ingredients`, 1-N `meals`           | `name:string                                                                        | max:255`, `category:in:breakfast,supper,dinner`, `instructions:string`, `calories:numeric                   | min:0`, `servings:integer                   | min:1`      |
| `recipe_ingredients` | `quantity`, `unit_id`                                      | N-1 `recipes`, N-1 `ingredients`, N-1 `units`         | `quantity:numeric                                                                   | min:0.01`, unikalno≈õƒá (`recipe_id`,`ingredient_id`)                                                        |
| `meal_plans`         | `start_date`, `end_date`, `status`, `generation_meta`      | N-1 `users`, 1-N `meals`, 1-N `logs_meal_plan`        | `start_date:date`, `end_date:date                                                   | after:start_date`, sprawdzenie 7-dniowego zakresu (rule custom), `status:in:pending,processing,done,error` |
| `meals`              | `meal_date`, `meal_category`                               | N-1 `meal_plans`, N-1 `recipes`                       | `meal_date:date`, `meal_category:in:breakfast,supper,dinner` + date w zakresie planu |
| `logs_meal_plan`     | `started_at`, `finished_at`, `status`                      | N-1 `meal_plans`                                      | `started_at:date`, `status:in:pending,processing,done,error`                        |

---

## 2. Laravel-owy plan backendu

### A. Resource Controllers

| Controller                            | Encja / tabela       | Metody                                                                             |
| ------------------------------------- | -------------------- | ---------------------------------------------------------------------------------- |
| `FamilyMemberController`              | `family_members`     | `index`, `store`, `update`, `destroy`                                              |
| `UnitController`                      | `units`              | `index`, `store`, `update`, `destroy`                                              |
| `IngredientController`                | `ingredients`        | `index`, `store`, `update`, `destroy`                                              |
| `RecipeController`                    | `recipes`            | `index`, `show`, `store`, `update`, `destroy`                                      |
| `RecipeIngredientController` (nested) | `recipe_ingredients` | `store`, `update`, `destroy`                                                       |
| `MealPlanController`                  | `meal_plans`         | `index`, `show`, `store`(generate), `update`(regenerate), `destroy`, `downloadPdf` |
| `MealController` (nested)             | `meals`              | `index`, `destroy`                                                                 |

> Uwagi:
> * Generowanie i regeneracja jad≈Çospisu wykorzystuje `store` / `update` z dedykowanymi akcjami serwisowymi.
> * Pobieranie PDF realizuje akcja `downloadPdf` (GET).

### B. Trasy (`routes/web.php`)

```php
Route::middleware(['auth', 'verified'])->group(function () {
    // Family Members
    Route::resource('family-members', FamilyMemberController::class)->except(['create', 'edit', 'show']);

    // Units (tylko admin)
    Route::resource('units', UnitController::class)->middleware('can:manage-units')->except(['create', 'edit', 'show']);

    // Ingredients
    Route::resource('ingredients', IngredientController::class)->except(['create', 'edit', 'show']);

    // Recipes
    Route::resource('recipes', RecipeController::class);
    Route::resource('recipes.ingredients', RecipeIngredientController::class)->shallow()->only(['store', 'update', 'destroy']);

    // Meal Plans
    Route::resource('meal-plans', MealPlanController::class)->only(['index', 'show', 'store', 'update', 'destroy']);
    Route::get('meal-plans/{meal_plan}/pdf', [MealPlanController::class, 'downloadPdf'])->name('meal-plans.pdf');

    // Meals (podglƒÖd / usuwanie konkretnego posi≈Çku)
    Route::resource('meal-plans.meals', MealController::class)->shallow()->only(['index', 'destroy']);
});
```

### C. FormRequest classes

| Klasa                           | U≈ºywana w                           | Regu≈Çy walidacji (skr√≥t)                                   |
| ------------------------------- | ----------------------------------- | ---------------------------------------------------------- |
| `StoreFamilyMemberRequest`      | `FamilyMemberController@store`      | `first_name`, `birth_date`, `gender`                       |
| `UpdateFamilyMemberRequest`     | `FamilyMemberController@update`     | jak wy≈ºej                                                  |
| `StoreUnitRequest`              | `UnitController@store`              | `code`, `conversion_factor_to_base`                        |
| `StoreIngredientRequest`        | `IngredientController@store`        | `name`                                                     |
| `StoreRecipeRequest`            | `RecipeController@store`            | `name`, `category`, `instructions`, `calories`, `servings` |
| `UpdateRecipeRequest`           | `RecipeController@update`           | jw.                                                        |
| `StoreRecipeIngredientRequest`  | `RecipeIngredientController@store`  | `ingredient_id`, `quantity`, `unit_id`                     |
| `UpdateRecipeIngredientRequest` | `RecipeIngredientController@update` | jw.                                                        |
| `GenerateMealPlanRequest`       | `MealPlanController@store`          | `start_date:date`, opcjonalnie `regenerate:boolean`        |

### D. Policies / Gates

| Policy               | Akcje                                     | Regu≈Ça                                  |
| -------------------- | ----------------------------------------- | --------------------------------------- |
| `RecipePolicy`       | `view`, `create`, `update`, `delete`      | U≈ºytkownik = owner przepisu             |
| `MealPlanPolicy`     | `view`, `update`, `delete`, `downloadPdf` | Owner + status!=processing dla `delete` |
| `FamilyMemberPolicy` | `viewAny`, `create`, `update`, `delete`   | Owner u≈ºytkownik                        |
| `IngredientPolicy`   | `manage`                                  | Tylko admin                             |
| `UnitPolicy`         | `manage`                                  | Tylko admin                             |

### E. Inertia Pages (Vue components)

| Komponent                 | Renderowany przez                   |
| ------------------------- | ----------------------------------- |
| `FamilyMembers/Index.vue` | `FamilyMemberController@index`      |
| `Recipes/Index.vue`       | `RecipeController@index`            |
| `Recipes/Show.vue`        | `RecipeController@show`             |
| `Recipes/Form.vue`        | `RecipeController@store` & `update` |
| `Ingredients/Index.vue`   | `IngredientController@index`        |
| `MealPlans/Index.vue`     | `MealPlanController@index`          |
| `MealPlans/Show.vue`      | `MealPlanController@show`           |
| `MealPlans/Generate.vue`  | `MealPlanController@store`          |
| `Units/Index.vue`         | `UnitController@index`              |

### F. Dodatkowa logika biznesowa

| Typ      | Nazwa                                               | Cel                                                       |
| -------- | --------------------------------------------------- | --------------------------------------------------------- |
| Service  | `MealPlanGeneratorService`                          | Losowy wyb√≥r przepis√≥w, brak powt√≥rze≈Ñ, 7 dni √ó 3 posi≈Çki |
| Service  | `IngredientScalingService`                          | Skalowanie ilo≈õci wg kalorii, porcji i profilu rodziny    |
| Service  | `ShoppingListService`                               | Sumowanie i konwersja jednostek (g‚Üíkg, ml‚Üíl)              |
| Service  | `PdfExportService`                                  | Generacja pojedynczego PDF z jad≈Çospisem i listƒÖ zakup√≥w  |
| Job      | `GenerateMealPlanJob`                               | Kolejkowanie procesu generowania jad≈Çospisu               |
| Job      | `GeneratePdfJob`                                    | Kolejkowanie renderu PDF                                  |
| Event    | `MealPlanGenerationStarted` / `Finished` / `Failed` | Monitoring postƒôpu                                        |
| Listener | `UpdateMealPlanStatusListener`                      | Aktualizacja kolumny `status` + `generation_meta`         |

---

## 3. Bezpiecze≈Ñstwo i wydajno≈õƒá

1. **Uwierzytelnianie**: Laravel Sanctum (SPA tokens) + session cookies; trasy `auth` middleware.
2. **Autoryzacja**: Policies + Gates; dodatkowo middleware `can:*` przy trasach admina.
3. **CSRF**: Domy≈õlna ochrona Laravel + Inertia.
4. **Rate limiting / throttling**: `RateLimiter::for('api', 60 req / 1 min)` oraz per-route limit dla generacji PDF (np. 5/h).
5. **Caching**:
   * Redis jako `cache` i `queue` driver.
   * Cache listy jednostek i sk≈Çadnik√≥w (`rememberForever`).
   * Cache wynik√≥w pe≈Çnotekstowego wyszukiwania przepis√≥w (tag `recipes`).
6. **Kolejki**: Redis + `database` fallback; Jobs dla ciƒô≈ºkich zada≈Ñ (AI, PDF).
7. **XSS / bezpiecze≈Ñstwo danych**: Escapowanie w Vue (domy≈õlne), `v-html` unikaƒá; sanitizacja danych wej≈õciowych.
8. **SQL Injection**: Eloquent ORM, parametryzowane zapytania.
9. **Backup i czyszczenie danych**: `prune` command usuwajƒÖcy stare pliki PDF.
10. **Monitoring**: Events + Laravel Telescope w ≈õrodowisku dev; Sentry produkcyjnie.



================================================
FILE: .ai/core/db-plan.md
================================================
# Database Schema ‚Äî Menu Maker

## 1. Tables

### 1.1 `users`
Already provided by Laravel default migration (`0001_01_01_000000_create_users_table.php`).

| Column            | Type              | Constraints/Notes  |
| ----------------- | ----------------- | ------------------ |
| id                | BIGINT UNSIGNED   | PK, auto-increment |
| name              | VARCHAR(255)      | NOT NULL           |
| email             | VARCHAR(255)      | NOT NULL, UNIQUE   |
| email_verified_at | TIMESTAMP NULL    | ‚Äî                  |
| password          | VARCHAR(255)      | NOT NULL           |
| remember_token    | VARCHAR(100) NULL | ‚Äî                  |
| created_at        | TIMESTAMP         | ‚Äî                  |
| updated_at        | TIMESTAMP         | ‚Äî                  |

---



### 1.2 `family_members`
| Column     | Type                          | Constraints/Notes         |
| ---------- | ----------------------------- | ------------------------- |
| id         | BIGINT UNSIGNED               | PK, auto-increment        |
| user_id    | BIGINT UNSIGNED               | FK ‚Üí `users.id`, NOT NULL |
| first_name | VARCHAR(255)                  | NOT NULL                  |
| birth_date | DATE                          | ‚Äî                         |
| gender     | ENUM('male','female')         | NOT NULL                  |
| created_at | TIMESTAMP                     | ‚Äî                         |
| updated_at | TIMESTAMP                     | ‚Äî                         |

---

### 1.3 `units`
| Column                    | Type            | Constraints/Notes                           |
| ------------------------- | --------------- | ------------------------------------------- |
| id                        | BIGINT UNSIGNED | PK, auto-increment                          |
| code                      | VARCHAR(10)     | NOT NULL, UNIQUE (e.g. g, kg, ml, l, pcs)   |
| conversion_factor_to_base | DECIMAL(10,4)   | NOT NULL ‚Äî factor relative to the base unit |
| created_at                | TIMESTAMP       | ‚Äî                                           |
| updated_at                | TIMESTAMP       | ‚Äî                                           |

---

### 1.4 `ingredients`
| Column     | Type            | Constraints/Notes  |
| ---------- | --------------- | ------------------ |
| id         | BIGINT UNSIGNED | PK, auto-increment |
| name       | VARCHAR(255)    | NOT NULL           |
| created_at | TIMESTAMP       | ‚Äî                  |
| updated_at | TIMESTAMP       | ‚Äî                  |

---

### 1.5 `recipes`
| Column       | Type                               | Constraints/Notes         |
| ------------ | ---------------------------------- | ------------------------- |
| id           | BIGINT UNSIGNED                    | PK, auto-increment        |
| user_id      | BIGINT UNSIGNED                    | FK ‚Üí `users.id`, NOT NULL |
| name         | VARCHAR(255)                       | NOT NULL                  |
| category     | ENUM('breakfast','supper','dinner')| NOT NULL                  |
| instructions | TEXT                               | NOT NULL                  |
| calories     | DECIMAL(10,2)                      | NOT NULL ‚Äî total kcal     |
| servings     | INT UNSIGNED                       | NOT NULL                  |
| created_at   | TIMESTAMP                          | ‚Äî                         |
| updated_at   | TIMESTAMP                          | ‚Äî                         |

---

### 1.6 `recipe_ingredients`
| Column        | Type            | Constraints/Notes               |
| ------------- | --------------- | ------------------------------- |
| id            | BIGINT UNSIGNED | PK, auto-increment              |
| recipe_id     | BIGINT UNSIGNED | FK ‚Üí `recipes.id`, NOT NULL     |
| ingredient_id | BIGINT UNSIGNED | FK ‚Üí `ingredients.id`, NOT NULL |
| quantity      | DECIMAL(10,2)   | NOT NULL                        |
| unit_id       | BIGINT UNSIGNED | FK ‚Üí `units.id`, NOT NULL       |
| created_at    | TIMESTAMP       | ‚Äî                               |
| updated_at    | TIMESTAMP       | ‚Äî                               |

UNIQUE(recipe_id, ingredient_id)

---

### 1.7 `meal_plans`
| Column          | Type                                                          | Constraints/Notes                                        |
| --------------- | ------------------------------------------------------------- | -------------------------------------------------------- |
| id              | BIGINT UNSIGNED                                               | PK, auto-increment                                       |
| user_id         | BIGINT UNSIGNED                                               | FK ‚Üí `users.id`, NOT NULL                                |
| start_date      | DATE                                                          | NOT NULL                                                 |
| end_date        | DATE                                                          | NOT NULL, CHECK (end_date = start_date + INTERVAL 6 DAY) |
| status          | ENUM('pending','processing','done','error') DEFAULT 'pending' | NOT NULL, indexed                                        |
| generation_meta | JSON NULL                                                     | Stores `started_at`, `finished_at`, etc.                 |
| pdf_path        | VARCHAR(255) NULL                                             | Relative storage path                                    |
| pdf_size        | BIGINT UNSIGNED NULL                                          | Size in bytes                                            |
| created_at      | TIMESTAMP                                                     | ‚Äî                                                        |
| updated_at      | TIMESTAMP                                                     | ‚Äî                                                        |

UNIQUE(user_id, start_date)

---

### 1.8 `meals`
| Column        | Type                               | Constraints/Notes                                                       |
| ------------- | ---------------------------------- | ----------------------------------------------------------------------- |
| id            | BIGINT UNSIGNED                    | PK, auto-increment                                                      |
| meal_plan_id  | BIGINT UNSIGNED                    | FK ‚Üí `meal_plans.id`, NOT NULL                                          |
| recipe_id     | BIGINT UNSIGNED                    | FK ‚Üí `recipes.id`, NOT NULL                                             |
| meal_date     | DATE                               | NOT NULL (between start_date & end_date, enforced in application logic) |
| meal_category | ENUM('breakfast','supper','dinner')| NOT NULL                                                                |
| created_at    | TIMESTAMP                          | ‚Äî                                                                       |
| updated_at    | TIMESTAMP                          | ‚Äî                                                                       |

---

### 1.9 `logs_meal_plan`
| Column       | Type                                        | Constraints/Notes              |
| ------------ | ------------------------------------------- | ------------------------------ |
| id           | BIGINT UNSIGNED                             | PK, auto-increment             |
| meal_plan_id | BIGINT UNSIGNED                             | FK ‚Üí `meal_plans.id`, NOT NULL |
| started_at   | DATETIME                                    | NOT NULL                       |
| finished_at  | DATETIME NULL                               | ‚Äî                              |
| status       | ENUM('pending','processing','done','error') | NOT NULL                       |
| created_at   | TIMESTAMP                                   | ‚Äî                              |

---

### 1.10 `password_resets`
Laravel provides `password_reset_tokens`; include for completeness if not yet migrated.
| Column     | Type         | Constraints/Notes |
| ---------- | ------------ | ----------------- |
| email      | VARCHAR(255) | PK                |
| token      | VARCHAR(255) | NOT NULL          |
| created_at | TIMESTAMP    | NOT NULL          |


### 1.11 Laravel default support tables
`cache` and `jobs` tables remain as generated by default migrations.

---

## 2. Relationships

1. **`users` 1--N `family_members`**.
2. **`users` 1--N `recipes`**.
3. **`recipes` N--N `ingredients`** via `recipe_ingredients`.
4. **`users` 1--N `meal_plans`**.
5. **`meal_plans` 1--N `meals`**.
6. **`recipes` 1--N `meals`** (each meal references one recipe).
7. **`units` 1--N `recipe_ingredients`**.
8. **`meal_plans` 1--N `logs_meal_plan`**.

All foreign keys use `ON DELETE CASCADE` to ensure full cleanup when a parent record is removed (e.g., deleting a user cascades through meals, meal_plans, etc.).

---

## 3. Indexes

* `users.email` ‚Äî UNIQUE
* `family_members.user_id` ‚Äî BTREE
* `units.code` ‚Äî UNIQUE
* `ingredients.name` ‚Äî BTREE index + FULLTEXT index (`FULLTEXT (name)`)
* `recipes.name` ‚Äî BTREE index + FULLTEXT index (`FULLTEXT (name)`)
* `recipe_ingredients.recipe_id, ingredient_id` ‚Äî UNIQUE composite + separate BTREE on each FK
* `meal_plans`:
  * `UNIQUE (user_id, start_date)`
  * BTREE on `status`
* `meals`:
  * BTREE on `(meal_plan_id, meal_date, meal_category)`
* `logs_meal_plan.meal_plan_id` ‚Äî BTREE

---

## 4. Additional Notes

1. All timestamps are stored in the `Europe/Warsaw` timezone without UTC conversion, matching application logic.
2. `generation_meta` in `meal_plans` keeps auxiliary data (e.g., AI parameters, progress) without fragmenting the schema; if query-ability of `started_at` / `finished_at` becomes critical, consider separate columns plus indexed views.
3. `CHECK (end_date = start_date + INTERVAL 6 DAY)` ensures every meal plan covers exactly seven consecutive days; MySQL 8.0 allows check constraints.
4. The schema is normalized to 3NF; no soft-delete columns are used as per requirements.
5. PDF files are stored in the filesystem; only metadata (`pdf_path`, `pdf_size`) resides in the database.
6. All enumerations are fixed; if future extensibility is required, convert enums to lookup tables.



================================================
FILE: .ai/core/mvp.md
================================================
# Aplikacja - Menu Maker (MVP)

### G≈Ç√≥wny problem
Dostosowywanie dostƒôpnych w sieci i w ksiƒÖ≈ºkach kucharskich przepsi√≥w kulinarnych do potrzeb rodziny jest problematyczne. Problemem jest r√≥wnie≈º uk≈Çadanie odpowiednich jad≈Çospis√≥w na ca≈Çy tydzie≈Ñ. Aplikacja wykorzystuje AI oraz dane o ilo≈õci os√≥b w rodzinie do proponowania jad≈Çospis√≥w na ca≈Çy tydzie≈Ñ wraz z dopasowanymi przepisami.

### Najmniejszy zestaw funkcjonalno≈õci
- Zapisywanie, odczytywanie, przeglƒÖdanie i usuwanie przepis√≥w w formie tekstowej
- Prosty system kont u≈ºytkownik√≥w do powiƒÖzania u≈ºytkownika z w≈Çasnymi przepisami
- Strona profilu u≈ºytkownika s≈Çu≈ºƒÖca do zapisywania ilo≈õci os√≥b w rodzinie wraz z wiekiem i p≈ÇciƒÖ
- Integracja z AI umo≈ºliwiajƒÖcƒÖ dostowanie przepisu do rodziny
- Integracja z AI umo≈ºliwiajƒÖca tworzenie jad≈Çospisu dla rodziny wraz z dopasowanymi przepisami oraz listy zakupowanej na podstawie jad≈Çospisu

### Co NIE wchodzi w zakres MVP
- Import przepis√≥w z adresu URL
- Bogata obs≈Çuga multimedi√≥w (np. zdjƒôƒá przepis√≥w)
- Udostƒôpnianie przepis√≥w dla innych u≈ºytkownik√≥w
- Funkcje spo≈Çeczno≈õciowe

### Kryteria sukcesu
- 90% u≈ºytkownik√≥w posiada wype≈ÇnionƒÖ sekcjƒô ilo≈õci os√≥b w swoim profilu
- 75% u≈ºytkownik√≥w generuje jeden jad≈Çospis w tygodniu



================================================
FILE: .ai/core/prd.md
================================================
# Dokument wymaga≈Ñ produktu (PRD) - Menu Maker

## 1. PrzeglƒÖd produktu
Menu Maker to aplikacja webowa wspierajƒÖca rodziny w planowaniu posi≈Çk√≥w na ca≈Çy tydzie≈Ñ. Umo≈ºliwia u≈ºytkownikom zapisywanie w≈Çasnych przepis√≥w kulinarnych, automatyczne generowanie tygodniowego jad≈Çospisu dopasowanego do profilu rodziny. System wykorzystuje sztucznƒÖ inteligencjƒô do skalowania ilo≈õci sk≈Çadnik√≥w na podstawie kaloryczno≈õci przepisu, liczby porcji i danych o cz≈Çonkach rodziny. Wynikiem generacji jest pojedynczy plik PDF zawierajƒÖcy jad≈Çospis oraz skonsolidowanƒÖ listƒô zakup√≥w.

## 2. Problem u≈ºytkownika
Rodziny czƒôsto posiadajƒÖ ograniczony czas na planowanie posi≈Çk√≥w oraz trudno≈õci w dostosowywaniu przepis√≥w do liczby domownik√≥w i ich indywidualnych potrzeb kalorycznych. Rƒôczne obliczenia sk≈Çadnik√≥w i tworzenie listy zakup√≥w sƒÖ czasoch≈Çonne, podatne na b≈Çƒôdy i prowadzƒÖ do nadmiarowych zakup√≥w. U≈ºytkownicy potrzebujƒÖ narzƒôdzia, kt√≥re zautomatyzuje proces planowania, upro≈õci zakupy i zredukuje marnotrawstwo ≈ºywno≈õci.

## 3. Wymagania funkcjonalne
1. Konto u≈ºytkownika oparte na adresie e-mail:
   - Rejestracja, logowanie, wylogowanie.
   - Reset has≈Ça poprzez e-mail.
2. Profil rodziny:
   - Dodawanie, edycja danych cz≈Çonk√≥w (imiƒô, data urodzenia, p≈Çeƒá).
3. ZarzƒÖdzanie przepisami (CRUD):
   - Pola obowiƒÖzkowe: nazwa, kategoria (≈õniadanie/obiad/kolacja), lista sk≈Çadnik√≥w (nazwa, jednostka g|kg|ml|l|szt., ilo≈õƒá), spos√≥b przygotowania, kaloryczno≈õƒá ca≈Çkowita, liczba porcji.
4. Generowanie tygodniowego jad≈Çospisu (7 dni √ó 3 posi≈Çki):
   - Losowy dob√≥r przepis√≥w bez powt√≥rze≈Ñ w obrƒôbie tygodnia.
   - Nieograniczona liczba regeneracji jad≈Çospisu.
5. Skalowanie ilo≈õci sk≈Çadnik√≥w przez AI:
   - Obliczenia bazujƒÖce na kaloriach przepisu, liczbie porcji i profilu rodziny.
6. Lista zakup√≥w:
   - Sumowanie sk≈Çadnik√≥w, konwersja >1000 g ‚Üí kg oraz >1000 ml ‚Üí l, zaokrƒÖglenie do 2 miejsc po przecinku.
   - Sortowanie alfabetyczne pozycji.
7. Eksport PDF:
   - Jeden dokument: najpierw tabela jad≈Çospisu (dzie≈Ñ, kategoria, nazwa, sk≈Çadniki, przygotowanie), nastƒôpnie lista zakup√≥w.
8.  Testy funkcjonalne pokrywajƒÖce kluczowe ≈õcie≈ºki (rejestracja, logowanie, CRUD przepis√≥w, generowanie jad≈Çospisu).

## 4. Granice produktu
- Brak importu przepis√≥w z URL.
- Brak obs≈Çugi multimedi√≥w (zdjƒôcia, filmy).
- Brak udostƒôpniania przepis√≥w innym u≈ºytkownikom.
- Brak funkcji spo≈Çeczno≈õciowych i kopii zapasowych.
- Hosting i szczeg√≥≈Çy infrastruktury poza zakresem MVP.
- Brak edycji wygenerowanego jad≈Çospisu lub listy zakup√≥w.

## 5. Historyjki u≈ºytkownik√≥w

| ID     | Tytu≈Ç                      | Opis                                                                                                                                       | Kryteria akceptacji                                                                                                                                                                                              |
| ------ | -------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| US-001 | Rejestracja konta          | Jako nowy u≈ºytkownik chcƒô zarejestrowaƒá konto przy u≈ºyciu adresu e-mail, aby m√≥c korzystaƒá z aplikacji.                                    | 1. Formularz rejestracji wymaga unikalnego adresu e-mail i has≈Ça. 2. Po wys≈Çaniu formularza konto jest tworzone i u≈ºytkownik jest automatycznie zalogowany. 3. Nieprawid≈Çowe dane wy≈õwietlajƒÖ komunikaty b≈Çƒôd√≥w. |
| US-002 | Logowanie                  | Jako u≈ºytkownik chcƒô zalogowaƒá siƒô przy u≈ºyciu e-maila i has≈Ça, aby uzyskaƒá dostƒôp do swojego konta.                                       | 1. Uwierzytelnienie przy poprawnych danych. 2. B≈Çƒôdne dane zwracajƒÖ czytelny b≈ÇƒÖd. 3. Sesja wygasa po 24 h braku aktywno≈õci.                                                                                     |
| US-003 | Reset has≈Ça                | Jako u≈ºytkownik chcƒô zresetowaƒá has≈Ço przez e-mail, je≈õli je zapomnƒô.                                                                      | 1. System wysy≈Ça wiadomo≈õƒá z linkiem resetujƒÖcym. 2. Link jest wa≈ºny 1 h. 3. Po zmianie has≈Ça u≈ºytkownik mo≈ºe siƒô zalogowaƒá nowym has≈Çem.                                                                        |
| US-004 | Dodawanie cz≈Çonk√≥w rodziny | Jako rodzic chcƒô dodaƒá cz≈Çonk√≥w rodziny (imiƒô, data urodzenia, p≈Çeƒá), aby przepisy by≈Çy skalowane do naszych potrzeb.                      | 1. Formularz waliduje wymagane pola. 2. Dodani cz≈Çonkowie sƒÖ widoczni w profilu. 3. Dane mo≈ºna edytowaƒá lub usuwaƒá.                                                                                              |
| US-005 | Dodawanie przepisu         | Jako u≈ºytkownik chcƒô zapisaƒá nowy przepis z pe≈Çnymi detalami, aby m√≥c go wykorzystaƒá p√≥≈∫niej.                                              | 1. Wszystkie wymagane pola sƒÖ walidowane. 2. Po zapisaniu przepis widnieje w li≈õcie przepis√≥w. 3. Brak duplikat√≥w sk≈Çadnik√≥w nie blokuje zapisu.                                                                 |
| US-006 | PrzeglƒÖd i edycja przepisu | Jako u≈ºytkownik chcƒô podejrzeƒá szczeg√≥≈Çy przepisu i w razie potrzeby je edytowaƒá.                                                          | 1. Widok szczeg√≥≈Ç√≥w wy≈õwietla wszystkie pola przepisu. 2. Edycja aktualizuje dane i widok. 3. Usuniƒôcie przepisu wymaga potwierdzenia.                                                                           |
| US-008 | Generowanie jad≈Çospisu     | Jako u≈ºytkownik chcƒô jednym klikniƒôciem wygenerowaƒá tygodniowy jad≈Çospis bez powt√≥rze≈Ñ przepis√≥w.                                          | 1. System wybiera losowo przepisy wed≈Çug kategorii. 2. Generacja trwa <10 s. 3. Wynik pojawia siƒô w interfejsie z opcjƒÖ pobrania PDF.                                                                            |
| US-009 | Regeneracja jad≈Çospisu     | Jako u≈ºytkownik chcƒô m√≥c wielokrotnie regenerowaƒá jad≈Çospis, je≈õli wynik mi nie odpowiada.                                                 | 1. Ka≈ºde klikniƒôcie "Regeneruj" tworzy nowy zestaw przepis√≥w. 2. Brak limitu regeneracji. 3. Poprzednie wersje nie sƒÖ zapisywane.                                                                                |
| US-010 | Pobranie PDF               | Jako u≈ºytkownik chcƒô pobraƒá jeden plik PDF zawierajƒÖcy jad≈Çospis i listƒô zakup√≥w, aby mieƒá go offline.                                     | 1. PDF zawiera najpierw tabelƒô jad≈Çospisu, potem listƒô zakup√≥w. 2. PDF otwiera siƒô poprawnie w przeglƒÖdarce. 3. Dane w PDF odpowiadajƒÖ ostatniej wygenerowanej wersji.                                           |
| US-011 | Automatyczna lista zakup√≥w | Jako u≈ºytkownik chcƒô mieƒá automatycznie zsumowanƒÖ listƒô zakup√≥w z konwersjƒÖ jednostek, aby szybko zrobiƒá zakupy.                           | 1. Ilo≈õci sƒÖ sumowane wed≈Çug sk≈Çadnik√≥w. 2. Konwersja jednostek g‚Üîkg i ml‚Üîl >1000 odbywa siƒô poprawnie. 3. ZaokrƒÖglenie wynosi 2 miejsca po przecinku.                                                           |
| US-012 | Skalowanie sk≈Çadnik√≥w      | Jako u≈ºytkownik chcƒô, aby aplikacja automatycznie dostosowa≈Ça ilo≈õci sk≈Çadnik√≥w do mojej rodziny, aby posi≈Çki by≈Çy odpowiednio porcjowane. | 1. Ilo≈õci sƒÖ obliczone na podstawie kaloryczno≈õci przepisu i profilu rodziny. 2. Wyniki sƒÖ prezentowane w przepisach i li≈õcie zakup√≥w.                                                                           |

## 6. Metryki sukcesu
- 90 % aktywnych u≈ºytkownik√≥w ma wype≈Çniony profil rodziny w ciƒÖgu 7 dni od rejestracji.
- 75 % u≈ºytkownik√≥w generuje co najmniej jeden jad≈Çospis tygodniowo.
- ≈öredni czas generowania jad≈Çospisu <1 min.
- 0 krytycznych b≈Çƒôd√≥w w podstawowych ≈õcie≈ºkach podczas test√≥w akceptacyjnych.
- MVP wdro≈ºone i dostƒôpne publicznie w ciƒÖgu 1 miesiƒÖca od rozpoczƒôcia prac.



================================================
FILE: .ai/core/tech-stack.md
================================================
# Tech Stack

## Backend
- **PHP** (^8.2) - Server-side programming language
- **Laravel** (^12.0) - PHP web application framework
- **Inertia.js Laravel** (^2.0) - Server-side adapter for SPA-like experience
- **MySQL** - Relational database management system
- **Redis** - In-memory data structure store for caching and queues

## Frontend
- **Node.js** (22) - JavaScript runtime for building and development tools
- **Vue.js** (^3.4.0) - Progressive JavaScript framework
- **Inertia.js Vue3** (^2.0.0) - Client-side adapter for SPA-like experience
- **TailwindCSS** (^3.2.1) - Utility-first CSS framework
- **Shadcn-vue** (^2.2.0) - Vue component library

## Tools
- **Laravel Pint** (^1.13) - Code style fixer
- **Laravel Sail** (^1.41) - Docker development environment
- **Larastan** (^3.6) - Static analysis tool for Laravel
- **PHPUnit** (^11.5.3) - Testing framework

## Komunikacja z AI
- **Openrouter.ai** - dostƒôp do wielu modeli

## CI/CD i Hosting:
- **Github Actions** do tworzenia pipeline‚Äô√≥w CI/CD
- **DigitalOcean** do hostowania aplikacji za po≈õrednictwem obrazu docker



================================================
FILE: .ai/core/ui-plan.md
================================================
# Architektura UI dla Menu Maker

## 1. PrzeglƒÖd struktury UI

Menu Maker to jednojƒôzyczna (PL) aplikacja SPA oparta o Laravel + Vue 3 + Inertia.js. Interfejs sk≈Çada siƒô z:

‚Ä¢ Lewostronnego, responsywnego sidebara jako g≈Ç√≥wnej nawigacji.
‚Ä¢ Nag≈Ç√≥wka z szybkim dostƒôpem do profilu i wylogowania.
‚Ä¢ Zestawu widok√≥w odpowiadajƒÖcych kluczowym funkcjom: dashboard, przepisy, jad≈Çospisy, cz≈Çonkowie rodziny, uwierzytelnienie.
‚Ä¢ Wsp√≥lnych komponent√≥w (toasty, modale, pagination, filtry), zapewniajƒÖcych sp√≥jne UX, dostƒôpno≈õƒá WCAG AA i bezpiecze≈Ñstwo (CSRF, polityki dostƒôpu).

## 2. Lista widok√≥w

### 2.1 Dashboard
- **≈öcie≈ºka:** `/`
- **Cel:** Szybki przeglƒÖd stanu konta i skr√≥ty do kluczowych akcji.
- **Kluczowe informacje:** liczba przepis√≥w, liczba jad≈Çospis√≥w, ostatni wygenerowany PDF.
- **Kluczowe komponenty:** `StatCard` √ó 2, `QuickActionButton` (‚ÄûDodaj przepis‚Äù, ‚ÄûWygeneruj jad≈Çospis‚Äù), `Toast`.
- **UX/Accessibility/Security:** karty w 2-kolumnowej siatce (1 kolumna < lg); przyciski majƒÖ aria-label, focus-ring; akcja generacji wymaga potwierdzenia modalem.

### 2.2 Przepisy ‚Äì lista
- **≈öcie≈ºka:** `/recipes`
- **Cel:** PrzeglƒÖd zapisanych przepis√≥w, filtrowanie i paginacja.
- **Kluczowe informacje:** nazwa, kategoria (badge kolor), kaloryczno≈õƒá, liczba porcji, akcje (podglƒÖd, edycja, usu≈Ñ).
- **Kluczowe komponenty:** `CategoryFilterDropdown`, `SearchInput`, `ServerPagination`, `RecipeRow`, `LocalStorageStateSync`.
- **UX/A11y/Security:** sortowanie domy≈õlnie alfabetyczne, ustawienia filtr√≥w zapamiƒôtywane w `localStorage`; akcja usuniƒôcia wymaga modalu z potwierdzeniem i policy `delete`.

### 2.3 Przepisy ‚Äì szczeg√≥≈Çy
- **≈öcie≈ºka:** `/recipes/:id`
- **Cel:** Wy≈õwietlenie pe≈Çnych detali przepisu.
- **Kluczowe informacje:** nazwa, kategoria, lista sk≈Çadnik√≥w (grid-karty), instrukcje, metadane kaloryczne/porcje.
- **Kluczowe komponenty:** `IngredientCardGrid`, `RecipeMetaBadge`, `ActionBar` (Edytuj / Usu≈Ñ).
- **UX/A11y/Security:** responsywna siatka sk≈Çadnik√≥w (1-3 kol.); policy `view` + `delete`; brak edycji inline.

### 2.4 Przepisy ‚Äì formularz (Dodaj/Edytuj)
- **≈öcie≈ºki:** `/recipes/new`, `/recipes/:id/edit`
- **Cel:** Tworzenie lub aktualizacja przepisu.
- **Kluczowe informacje:** wszystkie pola wymagane przez API.
- **Kluczowe komponenty:** `RecipeForm`, `IngredientSelector`, `ValidationErrorList`.
- **UX/A11y/Security:** pojedyncza strona, klient otrzymuje regu≈Çy walidacji z FormRequest przez Inertia; CSRF token; focus-first invalid field.

### 2.5 Jad≈Çospisy ‚Äì lista
- **≈öcie≈ºka:** `/meal-plans`
- **Cel:** Historia wszystkich wygenerowanych jad≈Çospis√≥w.
- **Kluczowe informacje:** zakres dat, status, liczba posi≈Çk√≥w, akcje (podglƒÖd, pobierz PDF, regeneruj, usu≈Ñ).
- **Kluczowe komponenty:** `DateRangeFilter`, `StatusTag`, `ServerPagination`, `ActionDropdown`.
- **UX/A11y/Security:** filtry zapisywane w localStorage; policy `view`/`delete`; operacje regeneruj/usu≈Ñ poprzedza `ConfirmDialog`.

### 2.6 Jad≈Çospis ‚Äì szczeg√≥≈Çy
- **≈öcie≈ºka:** `/meal-plans/:id`
- **Cel:** Tabela 7 √ó 3 z przypisanymi przepisami, akcje dodatkowe.
- **Kluczowe informacje:** kom√≥rki dnia/kategorii, link do przepisu, status generacji, przycisk pobrania PDF.
- **Kluczowe komponenty:** `MealPlanGrid`, `CategoryColorLegend`, `ProgressPoller`, `DownloadButton`.
- **UX/A11y/Security:** polling co 3 s statusu; PDF download przy status="done"; przycisk disabled podczas limitu.

### 2.7 Cz≈Çonkowie rodziny
- **≈öcie≈ºka:** `/family-members`
- **Cel:** CRUD cz≈Çonk√≥w rodziny.
- **Kluczowe informacje:** imiƒô, data urodzenia, p≈Çeƒá.
- **Kluczowe komponenty:** `FamilyMemberTable`, `InlineEditDialog`, `ConfirmDialog`.
- **UX/A11y/Security:** walidacja daty < today; policy owner; brak paginacji (typowo < 10 rekord√≥w).

### 2.8 Uwierzytelnienie
- **≈öcie≈ºki:** `/login`, `/register`, `/forgot-password`, `/reset-password/:token`
- **Cel:** ZarzƒÖdzanie dostƒôpem do aplikacji.
- **Kluczowe informacje:** formularze e-mail/has≈Ço, feedback b≈Çƒôd√≥w.
- **Kluczowe komponenty:** `AuthForm`, `PasswordStrengthMeter` (register), `Toast`.
- **UX/A11y/Security:** pola z `autocomplete`; CSRF; rate-limit 5 pr√≥b/min; aria-labels.

### 2.9 Strony b≈Çƒôd√≥w
- **≈öcie≈ºki:** `/*` 404, `/error` 500
- **Cel:** Informowanie o b≈Çƒôdach.
- **Kluczowe komponenty:** `ErrorIllustration`, `ReturnHomeButton`.

## 3. Mapa podr√≥≈ºy u≈ºytkownika

1. **Rejestracja / Logowanie** ‚Üí `/register`/`/login`
2. **Dashboard** ‚Üí przeglƒÖd statystyk i przycisk ‚ÄûDodaj przepis‚Äù.
3. **Dodanie przepisu**
   ‚Äë klik ‚ÄûDodaj przepis‚Äù ‚Üí `/recipes/new` ‚Üí zapis ‚Üí redirect `/recipes/:id`.
4. (Opcjonalnie) **Dodanie kilku kolejnych przepis√≥w** przez `/recipes` + `+`.
5. **Generacja jad≈Çospisu**
   ‚Äë klik na ‚ÄûWygeneruj jad≈Çospis‚Äù (dashboard) ‚Üí modal potwierdzenia ‚Üí POST `/meal-plans` (status=pending) ‚Üí redirect `/meal-plans/:id`.
   ‚Äë Komponent `ProgressPoller` od≈õwie≈ºa status; po "done" aktywuje ‚ÄûPobierz PDF‚Äù.
6. **Pobranie PDF** ‚Üí klik ‚Üí GET `/meal-plans/{id}/pdf` (download).
7. **PrzeglƒÖd historii jad≈Çospis√≥w** ‚Üí `/meal-plans` ‚Üí filtr dat ‚Üí detale.
8. **ZarzƒÖdzanie rodzinƒÖ** ‚Üí `/family-members` ‚Üí CRUD.
9. **Wylogowanie** ‚Üí klik w avatar w nag≈Ç√≥wku.

## 4. Uk≈Çad i struktura nawigacji

```
Sidebar (fixed)
‚îú‚îÄ‚îÄ Dashboard
‚îú‚îÄ‚îÄ Przepisy
‚îÇ   ‚îú‚îÄ‚îÄ Lista
‚îÇ   ‚îî‚îÄ‚îÄ Formularz / Detal (bez pozycji w menu)
‚îú‚îÄ‚îÄ Jad≈Çospisy
‚îÇ   ‚îú‚îÄ‚îÄ Lista
‚îÇ   ‚îî‚îÄ‚îÄ Detal (bez pozycji w menu)
‚îî‚îÄ‚îÄ Cz≈Çonkowie rodziny

Header (sticky)
‚îî‚îÄ‚îÄ Avatar dropdown (profil, wyloguj)
```

‚Ä¢ Sidebar pokazuje ikony+etykiety ‚â• 1024 px, tylko ikony < 1024 px, hamburger < 640 px.
‚Ä¢ Active route pod≈õwietlona; aria-current="page".
‚Ä¢ Breadcrumbs na widokach detalu/formularza dla dodatkowej orientacji.

## 5. Kluczowe komponenty (wielokrotnego u≈ºycia)

| Komponent               | Opis                                    | UX/A11y                                          |
| ----------------------- | --------------------------------------- | ------------------------------------------------ |
| `Sidebar`               | Nawigacja g≈Ç√≥wna z auto-collapse        | aria-label="G≈Ç√≥wna nawigacja"; rola="navigation" |
| `StatCard`              | Kafelek z liczbƒÖ + ikonƒÖ                | kontrast ‚â• 4.5:1                                 |
| `QuickActionButton`     | Du≈ºe CTA na dashboard                   | focus-ring, aria-pressed                         |
| `CategoryBadge`         | Kolorowy badge kategorii przepisu       | opis kolor√≥w w legendzie                         |
| `ServerPagination`      | Numery + strza≈Çki, auto-scroll top      | aria-label="Paginacja"                           |
| `ConfirmDialog`         | Modal potwierdzajƒÖcy                    | rola="dialog", fokus w pƒôtli                     |
| `Toast`                 | Globalne komunikaty (shadcn‚Äêvue)        | timeout 5 s; role="status"                       |
| `ProgressPoller`        | Polling statusu z API                   | cleanup on unmount                               |
| `LocalStorageStateSync` | Hook do zapisu/odczytu filtr√≥w/sortowa≈Ñ | obs≈Çuga JSON parse errors                        |
| `FormField`             | Uniwersalny input z label + error       | aria-describedby                                 |

## 6. Mapowanie historyjek u≈ºytkownika ‚Üí widoki / elementy UI

| ID     | Widok(i)                                                               | Elementy UI                                         |
| ------ | ---------------------------------------------------------------------- | --------------------------------------------------- |
| US-001 | `/register`                                                            | `AuthForm`, `Toast`                                 |
| US-002 | `/login`                                                               | `AuthForm`, `Toast`                                 |
| US-003 | `/forgot-password` `/reset-password`                                   | `AuthForm`                                          |
| US-004 | `/family-members`                                                      | `FamilyMemberTable`, `ConfirmDialog`                |
| US-005 | `/recipes/new`                                                         | `RecipeForm`                                        |
| US-006 | `/recipes/:id` `/recipes/:id/edit`                                     | `IngredientCardGrid`, `RecipeForm`                  |
| US-008 | `/meal-plans/:id`                                                      | `ConfirmDialog`, `ProgressPoller`, `DownloadButton` |
| US-009 | `/meal-plans/:id` (Regeneruj), `/meal-plans` (Lista)                   | `ConfirmDialog`                                     |
| US-010 | `/meal-plans/:id`                                                      | `DownloadButton`                                    |
| US-011 | `/meal-plans/:id` (PDF)                                                | renderowane w back-end, UI zapewnia link            |
| US-012 | Back-end ‚Äì brak bezpo≈õredniego UI, wyniki widoczne w `/meal-plans/:id` |

## 7. Rozwa≈ºone przypadki brzegowe i b≈Çƒôdy

‚Ä¢ Brak przepis√≥w ‚Üí pusta-state z linkiem ‚ÄûDodaj przepis‚Äù.
‚Ä¢ Brak jad≈Çospis√≥w ‚Üí pusta-state z CTA generacji.
‚Ä¢ Przerwane generowanie (status="error") ‚Üí toast b≈Çƒôdu + przycisk ‚ÄûPon√≥w‚Äù.
‚Ä¢ Endpoint 4xx/5xx ‚Üí globalny interceptor toast√≥w.
‚Ä¢ Niewa≈ºny token resetu has≈Ça ‚Üí redirect do `/forgot-password` z komunikatem.
‚Ä¢ Rate-limit PDF ‚Üí przycisk disabled przez timer frontend + komunikat API.
‚Ä¢ Nieautoryzowany dostƒôp ‚Üí redirect `/login` z flash `You need to log in`.

---

Architektura UI spe≈Çnia wymagania PRD, wykorzystuje punkty ko≈Ñcowe API zgodnie z planem i uwzglƒôdnia notatki z sesji, zapewniajƒÖc sp√≥jne do≈õwiadczenie u≈ºytkownika, podstawowƒÖ dostƒôpno≈õƒá WCAG oraz bezpiecze≈Ñstwo.



================================================
FILE: .ai/ui/edit-recipe-view-implementation-plan.md
================================================
# Plan implementacji widoku: Formularz Przepisu (Dodaj/Edytuj)

## 1. PrzeglƒÖd
Celem tego widoku jest umo≈ºliwienie u≈ºytkownikom tworzenia nowych przepis√≥w oraz edytowania ju≈º istniejƒÖcych. Widok bƒôdzie zawiera≈Ç formularz z polami na podstawowe dane przepisu (nazwa, kategoria, instrukcje, etc.) oraz dynamiczny interfejs do zarzƒÖdzania listƒÖ sk≈Çadnik√≥w. Widok bƒôdzie obs≈Çugiwa≈Ç dwa tryby: tworzenia (pusty formularz) i edycji (formularz wype≈Çniony danymi istniejƒÖcego przepisu).

## 2. Routing widoku
Widok bƒôdzie dostƒôpny pod nastƒôpujƒÖcymi ≈õcie≈ºkami:
-   **Tworzenie nowego przepisu:** `/recipes/create`
-   **Edycja istniejƒÖcego przepisu:** `/recipes/{id}/edit`

Obie ≈õcie≈ºki bƒôdƒÖ renderowaƒá ten sam komponent Vue, kt√≥ry dostosuje swoje dzia≈Çanie w zale≈ºno≈õci od obecno≈õci danych przepisu przekazanych przez kontroler.

## 3. Struktura komponent√≥w
Hierarchia komponent√≥w zosta≈Ça zaprojektowana w celu maksymalizacji reu≈ºywalno≈õci i separacji odpowiedzialno≈õci.

```mermaid
graph TD
    A[Pages/Recipes/Form.vue] --> B(RecipeForm.vue)
    B --> C[Input (Nazwa)]
    B --> D[Select (Kategoria)]
    B --> E[Textarea (Instrukcje)]
    B --> F[Input (Kalorie)]
    B --> G[Input (Porcje)]
    B --> H(IngredientManager.vue)
    B --> I[Button (Zapisz)]
    B --> J[Button (Anuluj)]

    subgraph IngredientManager.vue
        direction TB
        K(IngredientRow.vue)
        P[Button (Dodaj sk≈Çadnik)]
        K ~~~ P
    end

    subgraph IngredientRow.vue
        direction LR
        L[Combobox (Sk≈Çadnik)]
        M[Input (Ilo≈õƒá)]
        N[Select (Jednostka)]
        O[Button (Usu≈Ñ)]
        L --> M --> N --> O
    end

    H --> K
```

## 4. Szczeg√≥≈Çy komponent√≥w

### `Pages/Recipes/Form.vue`
-   **Opis:** G≈Ç√≥wny komponent strony, renderowany przez Inertia. Jego zadaniem jest inicjalizacja hooka `useForm` na podstawie props√≥w otrzymanych z backendu (`recipe`, `categories`, `ingredients`, `units`) i przekazanie obiektu `form` do komponentu `RecipeForm.vue`.
-   **G≈Ç√≥wne elementy:** Komponent `RecipeForm`.
-   **Obs≈Çugiwane interakcje:** Przekazuje logikƒô zapisu i anulowania do `RecipeForm`.
-   **Typy:** `RecipeResource`, `Category[]`, `IngredientResource[]`, `UnitResource[]`.
-   **Propsy:**
    -   `recipe: RecipeResource | null`
    -   `categories: { value: string, label: string }[]`
    -   `ingredients: IngredientResource[]`
    -   `units: UnitResource[]`

### `RecipeForm.vue`
-   **Opis:** Sercem widoku, zawiera wszystkie elementy UI formularza. Otrzymuje obiekt `form` z `useForm` i zarzƒÖdza jego stanem poprzez interakcje u≈ºytkownika. Wy≈õwietla b≈Çƒôdy walidacji.
-   **G≈Ç√≥wne elementy:** Komponenty `Input`, `Select`, `Textarea` z biblioteki `shadcn-vue`, komponent `IngredientManager.vue`.
-   **Obs≈Çugiwane interakcje:**
    -   `@submit`: Wywo≈Çuje metodƒô `post` lub `put` na obiekcie `form`.
    -   `@cancel`: Powoduje powr√≥t do poprzedniej strony.
-   **Obs≈Çugiwana walidacja:** Wy≈õwietla komunikaty o b≈Çƒôdach przy polach `name`, `category`, `instructions`, `calories`, `servings` oraz przekazuje b≈Çƒôdy dotyczƒÖce sk≈Çadnik√≥w do `IngredientManager`.
-   **Typy:** `RecipeFormViewModel`.
-   **Propsy:**
    -   `form: Object` (obiekt zwr√≥cony przez `useForm` z Inertia).

### `IngredientManager.vue`
-   **Opis:** Komponent do zarzƒÖdzania dynamicznƒÖ listƒÖ sk≈Çadnik√≥w. Renderuje listƒô komponent√≥w `IngredientRow` i przycisk "Dodaj sk≈Çadnik".
-   **G≈Ç√≥wne elementy:** `v-for` iterujƒÖcy po `IngredientRow`, przycisk "Dodaj sk≈Çadnik".
-   **Obs≈Çugiwane interakcje:**
    -   Dodawanie nowego sk≈Çadnika do tablicy `form.ingredients`.
    -   Usuwanie sk≈Çadnika z tablicy `form.ingredients`.
-   **Typy:** `IngredientViewModel[]`, `IngredientResource[]`, `UnitResource[]`.
-   **Propsy:**
    -   `ingredients`: `IngredientViewModel[]` (fragment obiektu `form`).
    -   `availableIngredients`: `IngredientResource[]`.
    -   `availableUnits`: `UnitResource[]`.
    -   `errors`: `Object` (b≈Çƒôdy walidacji dla sk≈Çadnik√≥w, np. `ingredients.0.quantity`).

### `IngredientRow.vue`
-   **Opis:** Reprezentuje pojedynczy wiersz na li≈õcie sk≈Çadnik√≥w. Umo≈ºliwia wyb√≥r sk≈Çadnika, podanie jego ilo≈õci i jednostki oraz usuniƒôcie ca≈Çego wiersza.
-   **G≈Ç√≥wne elementy:** `Combobox`, `Input`, `Select`, `Button` z `shadcn-vue`.
-   **Obs≈Çugiwane interakcje:**
    -   Aktualizacja danych pojedynczego sk≈Çadnika w tablicy.
    -   Usuniƒôcie wiersza (emituje zdarzenie do `IngredientManager`).
-   **Obs≈Çugiwana walidacja:** Wy≈õwietla b≈ÇƒÖd przy konkretnym polu w wierszu.
-   **Typy:** `IngredientViewModel`, `IngredientResource[]`, `UnitResource[]`.
-   **Propsy:**
    -   `ingredient`: `IngredientViewModel`.
    -   `index`: `number`.
    -   `availableIngredients`: `IngredientResource[]`.
    -   `availableUnits`: `UnitResource[]`.

## 5. Typy
Do poprawnej implementacji widoku wymagane sƒÖ nastƒôpujƒÖce typy i modele widoku:

```typescript
// --- Typy danych z API (Props) ---

// Zas√≥b reprezentujƒÖcy dostƒôpny sk≈Çadnik do wyboru
interface IngredientResource {
  id: number;
  name: string;
}

// Zas√≥b reprezentujƒÖcy dostƒôpnƒÖ jednostkƒô do wyboru
interface UnitResource {
  id: number;
  code: string; // np. 'g', 'kg', 'ml', 'l', 'szt.'
}

// G≈Ç√≥wny zas√≥b przepisu, przekazywany w trybie edycji
interface RecipeResource {
  id: number;
  name: string;
  category: 'breakfast' | 'supper' | 'dinner';
  instructions: string;
  calories: number;
  servings: number;
  ingredients: { // Sk≈Çadniki przypisane do przepisu
    id: number; // To jest ID sk≈Çadnika (ingredient_id)
    name: string;
    pivot: {
      quantity: number;
      unit_id: number;
    }
  }[];
}

// --- Typy ViewModel (ZarzƒÖdzanie stanem w formularzu) ---

// Model widoku dla pojedynczego sk≈Çadnika w formularzu
interface IngredientViewModel {
  ingredient_id: number | null;
  quantity: number | string;
  unit_id: number | null;
}

// G≈Ç√≥wny model widoku dla ca≈Çego formularza przepisu
interface RecipeFormViewModel {
  name: string;
  category: 'breakfast' | 'supper' | 'dinner' | null;
  instructions: string;
  calories: number | string;
  servings: number | string;
  ingredients: IngredientViewModel[];
}
```

## 6. ZarzƒÖdzanie stanem
ZarzƒÖdzanie stanem formularza bƒôdzie realizowane za pomocƒÖ hooka `useForm` z biblioteki `@inertiajs/vue3`. Zapewnia on reaktywny obiekt `form`, kt√≥ry przechowuje dane, stan przetwarzania (`form.processing`), b≈Çƒôdy walidacji (`form.errors`) oraz metody do wysy≈Çania danych (`post`, `put`).

**Inicjalizacja:**
```javascript
import { useForm } from '@inertiajs/vue3';

const props = defineProps<{
  recipe: RecipeResource | null;
  // ... inne propsy
}>();

const form = useForm<RecipeFormViewModel>({
  name: props.recipe?.name ?? '',
  category: props.recipe?.category ?? null,
  instructions: props.recipe?.instructions ?? '',
  calories: props.recipe?.calories ?? '',
  servings: props.recipe?.servings ?? '',
  ingredients: props.recipe?.ingredients.map(ing => ({
    ingredient_id: ing.id,
    quantity: ing.pivot.quantity,
    unit_id: ing.pivot.unit_id,
  })) ?? [],
});
```
Nie ma potrzeby tworzenia dodatkowych, niestandardowych hook√≥w.

## 7. Integracja API
Integracja z API odbywa siƒô poprzez metody dostarczone przez hook `useForm`.

-   **Tworzenie przepisu (CREATE):**
    -   **Endpoint:** `POST /recipes`
    -   **Akcja:** `form.post('/recipes')`
    -   **Typ ≈ºƒÖdania:** `RecipeFormViewModel`
    -   **Typ odpowiedzi (sukces):** Przekierowanie na stronƒô listy przepis√≥w (`/recipes`).
    -   **Typ odpowiedzi (b≈ÇƒÖd):** Ten sam widok z obiektem b≈Çƒôd√≥w.

-   **Aktualizacja przepisu (UPDATE):**
    -   **Endpoint:** `PUT /recipes/{id}`
    -   **Akcja:** `form.put(`/recipes/${props.recipe.id}`)`
    -   **Typ ≈ºƒÖdania:** `RecipeFormViewModel`
    -   **Typ odpowiedzi (sukces):** Przekierowanie na stronƒô szczeg√≥≈Ç√≥w przepisu (`/recipes/{id}`).
    -   **Typ odpowiedzi (b≈ÇƒÖd):** Ten sam widok z obiektem b≈Çƒôd√≥w.

## 8. Interakcje u≈ºytkownika
-   **Wprowadzanie danych:** U≈ºytkownik wype≈Çnia pola formularza. Zmiany sƒÖ automatycznie synchronizowane z obiektem `form` dziƒôki `v-model`.
-   **Dodawanie sk≈Çadnika:** Klikniƒôcie przycisku "Dodaj sk≈Çadnik" powoduje dodanie nowego, pustego obiektu `IngredientViewModel` do tablicy `form.ingredients`.
-   **Usuwanie sk≈Çadnika:** Klikniƒôcie przycisku "Usu≈Ñ" przy danym wierszu usuwa odpowiedni obiekt z tablicy `form.ingredients` na podstawie jego indeksu.
-   **Zapis formularza:** Klikniƒôcie przycisku "Zapisz" uruchamia odpowiedniƒÖ metodƒô (`post` lub `put`). Przycisk jest nieaktywny (`disabled`) w trakcie przetwarzania ≈ºƒÖdania (`form.processing`).
-   **Anulowanie:** Klikniƒôcie "Anuluj" powoduje powr√≥t do poprzedniej strony za pomocƒÖ `window.history.back()` lub linku Inertia.

## 9. Warunki i walidacja
Walidacja jest przeprowadzana na backendzie, a frontend jest odpowiedzialny za wy≈õwietlanie zwr√≥conych b≈Çƒôd√≥w. Komunikaty o b≈Çƒôdach bƒôdƒÖ dostƒôpne w obiekcie `form.errors`.

-   **`name`**: Wymagane, tekst, max 255 znak√≥w. B≈ÇƒÖd wy≈õwietlany pod polem input.
-   **`category`**: Wymagane, musi byƒá jednƒÖ z dostƒôpnych opcji. B≈ÇƒÖd wy≈õwietlany pod polem select.
-   **`instructions`**: Wymagane, tekst. B≈ÇƒÖd wy≈õwietlany pod polem textarea.
-   **`calories`**: Wymagane, numeryczne, min 0. B≈ÇƒÖd wy≈õwietlany pod polem input.
-   **`servings`**: Wymagane, ca≈Çkowite, min 1. B≈ÇƒÖd wy≈õwietlany pod polem input.
-   **`ingredients`**: Tablica musi byƒá obecna.
-   **`ingredients.*.ingredient_id`**: Wymagane. B≈ÇƒÖd wy≈õwietlany przy odpowiednim wierszu sk≈Çadnika.
-   **`ingredients.*.quantity`**: Wymagane, numeryczne, min 0.01. B≈ÇƒÖd wy≈õwietlany przy odpowiednim wierszu sk≈Çadnika.
-   **`ingredients.*.unit_id`**: Wymagane. B≈ÇƒÖd wy≈õwietlany przy odpowiednim wierszu sk≈Çadnika.

Stan interfejsu (np. czerwona ramka wok√≥≈Ç pola) bƒôdzie dynamicznie zmieniany w zale≈ºno≈õci od obecno≈õci b≈Çƒôdu dla danego pola w `form.errors`.

## 10. Obs≈Çuga b≈Çƒôd√≥w
-   **B≈Çƒôdy walidacji (HTTP 422):** Obs≈Çugiwane automatycznie przez Inertia. B≈Çƒôdy sƒÖ przypisywane do `form.errors`, a komponenty UI reagujƒÖ na te zmiany, wy≈õwietlajƒÖc komunikaty.
-   **B≈Çƒôdy serwera (HTTP 5xx):** Nale≈ºy zaimplementowaƒá globalnƒÖ obs≈Çugƒô b≈Çƒôd√≥w (np. w `app.js` z u≈ºyciem `Inertia.on('error', ...)`), aby wy≈õwietliƒá u≈ºytkownikowi og√≥lnƒÖ notyfikacjƒô (np. "WystƒÖpi≈Ç nieoczekiwany b≈ÇƒÖd. Spr√≥buj ponownie p√≥≈∫niej.") za pomocƒÖ biblioteki takiej jak `vue-sonner`.
-   **B≈Çƒôdy autoryzacji (HTTP 403):** Inertia domy≈õlnie wy≈õwietli stronƒô b≈Çƒôdu 403. To zachowanie jest wystarczajƒÖce.

## 11. Kroki implementacji
1.  **Utworzenie plik√≥w komponent√≥w:** Stworzyƒá puste pliki `.vue` dla `Pages/Recipes/Form.vue`, `RecipeForm.vue`, `IngredientManager.vue` i `IngredientRow.vue`.
2.  **Implementacja `Pages/Recipes/Form.vue`:** Zdefiniowaƒá propsy i zainicjowaƒá hook `useForm`, mapujƒÖc dane z `props.recipe` w trybie edycji.
3.  **Implementacja `RecipeForm.vue`:** Zbudowaƒá layout formularza u≈ºywajƒÖc komponent√≥w `shadcn-vue`. Dodaƒá `v-model` do p√≥l, aby po≈ÇƒÖczyƒá je z obiektem `form`. Dodaƒá obs≈Çugƒô wy≈õwietlania b≈Çƒôd√≥w z `form.errors`.
4.  **Implementacja `IngredientManager.vue` i `IngredientRow.vue`:** Zaimplementowaƒá logikƒô dynamicznego dodawania i usuwania sk≈Çadnik√≥w. U≈ºyƒá `v-for` do renderowania wierszy. Przekazaƒá `availableIngredients` i `availableUnits` jako propsy.
5.  **Logika zapisu i anulowania:** Dodaƒá metody obs≈ÇugujƒÖce zdarzenie `@submit` na formularzu, kt√≥re wywo≈ÇajƒÖ `form.post` lub `form.put`. Dodaƒá przycisk "Anuluj".
6.  **Stylowanie i dopracowanie UI:** Upewniƒá siƒô, ≈ºe formularz jest responsywny i zgodny z resztƒÖ aplikacji.
7.  **Testowanie manualne:** Przetestowaƒá oba scenariusze (tworzenie i edycja), walidacjƒô oraz obs≈Çugƒô b≈Çƒôd√≥w.



================================================
FILE: .ai/ui/family-members-view-implementation-plan.md
================================================
# Plan implementacji widoku ‚ÄûCz≈Çonkowie rodziny‚Äù

## 1. PrzeglƒÖd
Widok umo≈ºliwia zalogowanemu u≈ºytkownikowi pe≈Çne zarzƒÖdzanie cz≈Çonkami swojej rodziny (CRUD). Lista cz≈Çonk√≥w wy≈õwietlana jest w tabeli z mo≈ºliwo≈õciƒÖ dodawania nowych os√≥b, edycji w trybie inline oraz usuwania z potwierdzeniem. Celem widoku jest dostarczenie prostego, intuicyjnego i szybkiego interfejsu do aktualizacji danych, kt√≥re bƒôdƒÖ nastƒôpnie wykorzystywane do skalowania przepis√≥w oraz generowania jad≈Çospis√≥w.

## 2. Routing widoku
| Metoda | ≈öcie≈ºka                | Kontroler / Akcja                | Opis                 |
| ------ | ---------------------- | -------------------------------- | -------------------- |
| GET    | `/family-members`      | `FamilyMemberController@index`   | Lista cz≈Çonk√≥w       |
| POST   | `/family-members`      | `FamilyMemberController@store`   | Dodanie cz≈Çonka      |
| PUT    | `/family-members/{id}` | `FamilyMemberController@update`  | Aktualizacja cz≈Çonka |
| DELETE | `/family-members/{id}` | `FamilyMemberController@destroy` | Usuniƒôcie cz≈Çonka    |

Frontend: Inertia page `FamilyMembers/Index.vue` renderowana w powy≈ºszym GET-route.

## 3. Struktura komponent√≥w
```
FamilyMembers/Index.vue
‚îî‚îÄ‚îÄ FamilyMemberTable.vue
    ‚îú‚îÄ‚îÄ InlineEditDialog.vue
    ‚îî‚îÄ‚îÄ ConfirmDialog.vue
```

## 4. Szczeg√≥≈Çy komponent√≥w
### FamilyMembers/Index.vue
- **Opis:** G≈Ç√≥wny widok; pobiera dane z API, zarzƒÖdza stanem listy i wywo≈Çuje mutacje (add, update, delete).
- **G≈Ç√≥wne elementy:** nag≈Ç√≥wek strony, przycisk ‚ÄûDodaj‚Äù, komponent `FamilyMemberTable`.
- **Obs≈Çugiwane interakcje:**
  ‚Ä¢ klik ‚ÄûDodaj‚Äù ‚Üí otwiera pusty `InlineEditDialog`
  ‚Ä¢ przekazane zdarzenia `saved`, `deleted` z tabeli ‚Üí aktualizacja lokalnego stanu
- **Walidacja:** proxy do `InlineEditDialog`.
- **Propsy:** brak ‚Äî jest widokiem strony.
- **Typy:** `FamilyMember[]`, `FamilyMemberFormState`.

### FamilyMemberTable.vue
- **Opis:** Renderuje tabelƒô imiƒô | data urodzenia | p≈Çeƒá | akcje.
- **G≈Ç√≥wne elementy:** `table > tr > td`, przyciski edycji i usuniƒôcia w kolumnie Akcje.
- **Obs≈Çugiwane interakcje:**
  ‚Ä¢ klik ‚ÄûEdytuj‚Äù ‚Üí otwiera `InlineEditDialog` z danymi rekordu
  ‚Ä¢ klik ‚ÄûUsu≈Ñ‚Äù ‚Üí otwiera `ConfirmDialog`
  ‚Ä¢ emituje: `saved(member)`, `deleted(id)`
- **Walidacja:** ‚Äì.
- **Propsy:**
  ```ts
  interface Props {
    members: FamilyMember[];
  }
  ```
- **Typy zale≈ºne:** `FamilyMember`.

### InlineEditDialog.vue
- **Opis:** Modal formularza tworzenia/edycji. Reu≈ºywany; gdy `member` = null ‚áí create.
- **G≈Ç√≥wne elementy:** `Dialog`, `Form`, `InputText` (imiƒô), `DatePicker` (data ur.), `Select` (p≈Çeƒá), przyciski ‚ÄûZapisz‚Äù / ‚ÄûAnuluj‚Äù.
- **Obs≈Çugiwane interakcje:**
  ‚Ä¢ submit ‚Üí walidacja ‚Üí wywo≈Çanie API (`POST`/`PUT`)
  ‚Ä¢ emituje `saved(member)` po sukcesie
- **Walidacja (frontend + API):**
  ‚Ä¢ first_name: wymagane, max 255 znak√≥w
  ‚Ä¢ birth_date: data < dzi≈õ
  ‚Ä¢ gender: male / female
- **Propsy:**
  ```ts
  interface Props {
    member?: FamilyMember | null;
    open: boolean;
  }
  ```
- **Typy zale≈ºne:** `FamilyMember`, `FamilyMemberPayload`.

### ConfirmDialog.vue
- **Opis:** ProstokƒÖtny dialog potwierdzajƒÖcy usuniƒôcie.
- **G≈Ç√≥wne elementy:** tekst ostrzegawczy, przyciski ‚ÄûUsu≈Ñ‚Äù / ‚ÄûAnuluj‚Äù.
- **Obs≈Çugiwane interakcje:**
  ‚Ä¢ potwierdzenie ‚Üí wywo≈Çanie API `DELETE`
  ‚Ä¢ emituje `deleted(id)` po sukcesie
- **Walidacja:** ‚Äì.
- **Propsy:**
  ```ts
  interface Props {
    memberId: number;
    memberName: string;
    open: boolean;
  }
  ```

## 5. Typy
```ts
type Gender = 'male' | 'female';

interface FamilyMember {
  id: number;
  first_name: string;
  birth_date: string; // ISO, yyyy-MM-dd
  gender: Gender;
  created_at: string;
  updated_at: string;
}

interface FamilyMemberPayload {
  first_name: string;
  birth_date: string; // yyyy-MM-dd
  gender: Gender;
}

interface FamilyMemberFormState extends FamilyMemberPayload {
  errors: Partial<Record<keyof FamilyMemberPayload, string>>;
}
```

## 6. ZarzƒÖdzanie stanem
- Lokalny stan w `FamilyMembers/Index.vue` przy u≈ºyciu `ref`/`reactive`.
- Operacje CRUD aktualizujƒÖ listƒô optymistycznie, rollback przy b≈Çƒôdzie.
- Brak konieczno≈õci global store (lista dotyczy tylko tego widoku).

## 7. Integracja API
- Biblioteka: `@inertiajs/vue3` + `@vueuse/integrations/useAxios`.
- `GET /family-members`
  ‚Ä¢ Response: `Paginated<FamilyMember>` ‚Üí wy≈õwietlenie tabeli, obs≈Çuga paginacji (backend zwraca 15 rek./str.).
- `POST /family-members`
  ‚Ä¢ Body: `FamilyMemberPayload`
  ‚Ä¢ Sukces: `201` + `FamilyMember`.
- `PUT /family-members/{id}`
  ‚Ä¢ Body: `FamilyMemberPayload`
  ‚Ä¢ Sukces: `200` + zaktualizowany `FamilyMember`.
- `DELETE /family-members/{id}`
  ‚Ä¢ Sukces: `204`.

## 8. Interakcje u≈ºytkownika
1. Wej≈õcie na `/family-members` ‚Üí tabela wczytuje dane.
2. Klik ‚ÄûDodaj‚Äù ‚Üí modal formularza, walidacja, zapis ‚Üí rekord pojawia siƒô w tabeli na g√≥rze.
3. Klik ‚ÄûEdytuj‚Äù przy rekordzie ‚Üí modal z danymi, zapis ‚Üí aktualizacja wiersza.
4. Klik ‚ÄûUsu≈Ñ‚Äù ‚Üí dialog potwierdzenia, po akceptacji wiersz znika.
5. Paginacja (je≈õli >15 rekord√≥w) ‚Üí pobranie kolejnej strony.

## 9. Warunki i walidacja
- Imiƒô niepuste, ‚â§255 znak√≥w.
- Data urodzenia < bie≈ºƒÖca data (kontrola w komponencie, `DatePicker` oraz weryfikacja b≈Çƒôd√≥w API `422`).
- P≈Çeƒá z listy sta≈Çej.
- Duplikaty imienia dozwolone (brak requ.).

## 10. Obs≈Çuga b≈Çƒôd√≥w
- B≈Çƒôdy walidacji (`422`): wy≈õwietlenie przy polach w `InlineEditDialog`.
- B≈ÇƒÖd `403|404`: toast ‚ÄûBrak dostƒôpu‚Äù / ‚ÄûNie znaleziono‚Äù.
- B≈Çƒôdy sieci/500: toast og√≥lny + rollback optymistycznego UI.
- Retry automatyczny przy timeout (axios retry 1√ó).

## 11. Kroki implementacji
1. Utworzenie pliku `FamilyMembers/Index.vue` z podstawowym layoutem i pobieraniem danych.
2. Stworzenie komponentu `FamilyMemberTable.vue` z tabelƒÖ i paginacjƒÖ.
3. Implementacja `InlineEditDialog.vue` z formularzem i walidacjƒÖ (VeeValidate z Yup).
4. Implementacja `ConfirmDialog.vue`.
5. Integracja CRUD z API (axios helper z Inertia headers).
6. Dodanie komunikat√≥w toast (Shadcn-vue `useToast`).
7. Testy jednostkowe komponent√≥w (Vitest) ‚Äì walidacja i emitowane zdarzenia.
8. Testy e2e (Cypress) ‚Äì dodanie, edycja, usuniƒôcie rekordu.
9. Review kodu: Pint, ESLint, Larastan (backend).
10. Deploy na ≈õrodowisko staging, test manualny flow CRUD.




================================================
FILE: .ai/ui/meal-plans-view-implementation-plan.md
================================================
# Plan implementacji widoku Jad≈Çospisy ‚Äì lista

## 1. PrzeglƒÖd
Widok historii wszystkich wygenerowanych jad≈Çospis√≥w u≈ºytkownika. Umo≈ºliwia przeglƒÖdanie listy z paginacjƒÖ, filtrowanie po statusie, sortowanie po wybranych polach oraz akcje na rekordach: podglƒÖd szczeg√≥≈Ç√≥w, pobranie PDF (gdy gotowy), regeneracja oraz usuniƒôcie.

## 2. Routing widoku
- ≈öcie≈ºka: `/meal-plans`
- Inertia Page: `resources/js/Pages/MealPlans/Index.vue`
- Wymagane middleware: `auth`, `verified`

## 3. Struktura komponent√≥w
- `MealPlansIndexPage`
  - `FiltersBar`
    - `StatusFilter`
    - `PerPageSelect`
  - `MealPlanTable`
    - `SortableTableHeader`
    - `MealPlanRow` (√óN)
      - `StatusTag`
      - `ActionDropdown`
        - `ConfirmDialog` (lazy mount)
  - `ServerPagination`
  - `Toast` (global)

## 4. Szczeg√≥≈Çy komponent√≥w
### MealPlansIndexPage
- Opis: G≈Ç√≥wna strona listy. Odbiera props z Inertia (`mealPlans`, `filters`, `statuses`). ZarzƒÖdza stanem filtr√≥w i synchronizacjƒÖ query params.
- G≈Ç√≥wne elementy: nag≈Ç√≥wek strony, `FiltersBar`, `MealPlanTable`, `ServerPagination`.
- Obs≈Çugiwane interakcje:
  - Zmiana statusu filtra ‚Üí GET z `filter[status]` i zachowanie scroll/replace.
  - Zmiana `perPage` ‚Üí GET z `perPage`.
  - Klik w paginacjƒô ‚Üí GET z `page`.
  - Klik w sort nag≈Ç√≥wka ‚Üí GET z `sort` i `direction`.
- Obs≈Çugiwana walidacja (UI):
  - Walidacja warto≈õci filtra statusu do listy `['pending','processing','done','error']` (z prop `statuses`).
  - Walidacja pola `perPage` do zakresu [5, 100].
- Typy: `MealPlanCollectionProps`, `MealPlanListItem`, `PaginationMeta`, `PaginationLinks`, `FiltersState`, `SortDirection`, `StatusOption`.
- Propsy: `{ mealPlans: MealPlanCollection, filters: { 'filter.status'?: string, sort?: string, direction?: SortDirection, perPage?: number }, statuses: StatusOption[] }`.

### FiltersBar
- Opis: Pasek filtr√≥w nad tabelƒÖ.
- G≈Ç√≥wne elementy: `StatusFilter`, `PerPageSelect`, opcjonalnie licznik wynik√≥w.
- Obs≈Çugiwane interakcje: zmiana statusu, zmiana `perPage`.
- Walidacja: jak wy≈ºej.
- Typy: `FiltersState`, `StatusOption`.
- Propsy: `{ value: FiltersState, statuses: StatusOption[] }` + emit `update:value`.

### StatusFilter
- Opis: Select (shadcn-vue) z opcjami status√≥w.
- G≈Ç√≥wne elementy: `<Select>`, `<SelectItem>`.
- Interakcje: wyb√≥r statusu lub ‚ÄûWszystkie‚Äù.
- Walidacja: warto≈õƒá nale≈ºy do listy `statuses` lub pusty string.
- Typy: `StatusOption`.
- Propsy: `{ modelValue?: string, options: StatusOption[] }` + emit `update:modelValue`.

### PerPageSelect
- Opis: Select rozmiaru strony (5, 10, 15, 25, 50, 100).
- Interakcje: wyb√≥r warto≈õci ‚Üí reload z query.
- Walidacja: liczba ca≈Çkowita w dozwolonym zestawie.
- Propsy: `{ modelValue: number }` + emit `update:modelValue`.

### MealPlanTable
- Opis: Tabela rekord√≥w z nag≈Ç√≥wkami umo≈ºliwiajƒÖcymi sortowanie.
- G≈Ç√≥wne elementy: `<table>`, `SortableTableHeader`, `MealPlanRow`.
- Interakcje: klik w nag≈Ç√≥wek sortujƒÖcy.
- Walidacja: pole `sort` musi byƒá jednym z: `['start_date','end_date','status','created_at']`.
- Propsy: `{ items: MealPlanListItem[], sort?: string, direction?: SortDirection }` + emit `sort-change`.

### SortableTableHeader
- Opis: Komponent nag≈Ç√≥wka z ikonƒÖ sortowania i stanem kierunku.
- Interakcje: klik prze≈ÇƒÖcza `direction` miƒôdzy `asc` i `desc` dla danego pola.
- Propsy: `{ field: string, activeField?: string, direction?: SortDirection, label: string }` + emit `change` z `{ field, direction }`.

### MealPlanRow
- Opis: Pojedynczy wiersz tabeli z danymi planu.
- G≈Ç√≥wne elementy: kom√≥rki daty (`start_date` ‚Äì `end_date`), `StatusTag`, liczby (`meals_count`, `logs_count`), `ActionDropdown`.
- Interakcje: akcje w menu (PodglƒÖd, Pobierz PDF, Regeneruj, Usu≈Ñ).
- Walidacja UI:
  - `Regeneruj` dostƒôpne tylko gdy `status ‚àà {'done','error'}`.
  - `Usu≈Ñ` disabled gdy `status === 'processing'`.
  - `Pobierz PDF` dostƒôpne gdy `status === 'done'`.
- Propsy: `{ item: MealPlanListItem }`.

### ActionDropdown
- Opis: Menu akcji wiersza (shadcn-vue DropdownMenu).
- Interakcje i akcje:
  - PodglƒÖd ‚Üí nawigacja do `item.links.self`.
  - Pobierz PDF ‚Üí GET do trasy `meal-plans.pdf` (`/meal-plans/{id}/pdf`) w nowej karcie, aktywne gdy `status==='done'`.
  - Regeneruj ‚Üí `ConfirmDialog` ‚Üí PUT `/meal-plans/{id}` z payload `{ regenerate: true }`.
  - Usu≈Ñ ‚Üí `ConfirmDialog` ‚Üí DELETE `/meal-plans/{id}`.
- Walidacja UI: jak w `MealPlanRow`.
- Propsy: `{ item: MealPlanListItem }`.

### ConfirmDialog
- Opis: Modal potwierdzajƒÖcy operacje wra≈ºliwe.
- Interakcje: potwierd≈∫/anuluj; fokus w pƒôtli; ESC zamyka.
- Propsy: `{ title: string, description?: string, confirmText?: string, variant?: 'destructive'|'default' }`.

### ServerPagination
- Opis: Komponent paginacji serwerowej.
- Interakcje: zmiana strony ‚Üí GET z `page`.
- Propsy: `{ links: PaginationLinks, meta: PaginationMeta }`.

### StatusTag
- Opis: Badge z kolorem wg statusu (`pending` szary, `processing` niebieski, `done` zielony, `error` czerwony).
- Propsy: `{ value: MealPlanStatus }`.

## 5. Typy
```ts
type MealPlanStatus = 'pending' | 'processing' | 'done' | 'error'

interface StatusOption { value: MealPlanStatus; label: string }

interface MealPlanListItem {
  id: number
  start_date: string // 'YYYY-MM-DD'
  end_date: string   // 'YYYY-MM-DD'
  status: MealPlanStatus
  created_at: string
  updated_at: string
  meals_count: number
  logs_count: number
  links: { self: string }
}

interface PaginationMeta {
  current_page: number
  last_page: number
  per_page: number
  total: number
  from: number | null
  to: number | null
}

interface PaginationLinks {
  first: string | null
  last: string | null
  prev: string | null
  next: string | null
}

interface MealPlanCollection {
  data: MealPlanListItem[]
  meta: PaginationMeta
  links: PaginationLinks
}

type SortDirection = 'asc' | 'desc'

interface FiltersState {
  status?: MealPlanStatus | ''
  sort?: 'start_date' | 'end_date' | 'status' | 'created_at'
  direction?: SortDirection
  perPage?: number
}

interface MealPlanCollectionProps {
  mealPlans: MealPlanCollection
  filters: {
    'filter.status'?: MealPlanStatus
    sort?: FiltersState['sort']
    direction?: SortDirection
    perPage?: number
  }
  statuses: StatusOption[]
}
```

## 6. ZarzƒÖdzanie stanem
- ≈πr√≥d≈Çem prawdy listy jest odpowied≈∫ Inertia z backendu (`MealPlanController@index`).
- Lokalne UI-state: `filters` (Status, Sort, Direction, PerPage), synchronizowane z query params i z `localStorage` (klucz: `mm.mealPlans.filters`).
- Zmiany filtr√≥w/sortowania wywo≈ÇujƒÖ `router.get(route('meal-plans.index'), query, { preserveScroll: true, replace: true })`.
- Paginacja bazuje na `mealPlans.links` i `mealPlans.meta` (GET na odpowiedni URL z linka).
- Globalne toasty wykorzystujƒÖ shadcn-vue / Inertia flash messages.

## 7. Integracja API
- Lista (GET): `GET /meal-plans?filter[status]={status}&sort={field}&direction={asc|desc}&perPage={n}&page={n}`
  - Odpowied≈∫: `MealPlanCollection` zgodnie z `MealPlanCollection::toArray()`.
- PodglƒÖd: link `links.self` ‚Üí `GET /meal-plans/{id}` (Inertia) ‚Äì nawigacja po stronie klienta.
- Pobierz PDF: `GET /meal-plans/{id}/pdf` (otwarcie w nowej karcie). UWAGA: przycisk aktywny tylko dla `status='done'`.
- Regeneracja: `PUT /meal-plans/{id}` z `application/json` body `{ "regenerate": true, "force"?: boolean }`
  - 202 na sukces (rozpoczƒôto), 422 na walidacji (np. `status`, `rate_limit`), 409 gdy `processing` (z kontrolera).
- Usu≈Ñ: `DELETE /meal-plans/{id}` ‚Üí 204 na sukces; przy `processing` policy/validation zwr√≥ci 403/422.

## 8. Interakcje u≈ºytkownika
- Zmiana filtra statusu ‚Üí od≈õwie≈ºenie listy; stan zapisany w `localStorage`.
- Zmiana rozmiaru strony ‚Üí od≈õwie≈ºenie listy od strony 1.
- Sortowanie po kolumnie ‚Üí prze≈ÇƒÖczanie kierunku; aktualizacja listy.
- Paginacja ‚Üí przej≈õcie na wskazanƒÖ stronƒô.
- PodglƒÖd ‚Üí przej≈õcie do `/meal-plans/{id}`.
- Pobierz PDF ‚Üí nowa karta; disabled gdy status ‚â† `done`.
- Regeneruj ‚Üí modal potwierdzenia ‚Üí ≈ºƒÖdanie PUT; toast sukcesu/b≈Çƒôdu; wiersz mo≈ºe zmieniƒá `status` na `pending` po re-fetch.
- Usu≈Ñ ‚Üí modal potwierdzenia ‚Üí ≈ºƒÖdanie DELETE; toast i re-fetch (zachowaj bie≈ºƒÖcƒÖ stronƒô je≈õli mo≈ºliwe).

## 9. Warunki i walidacja
- Akcje wiersza:
  - `Regeneruj` tylko dla `status ‚àà {'done','error'}` (UI i backend `RegenerateMealPlanRequest`).
  - `Usu≈Ñ` zablokowane dla `status='processing'` (UI + backend policy).
  - `Pobierz PDF` aktywne tylko przy `status='done'`.
- Parametry zapyta≈Ñ:
  - `sort` nale≈ºy do `['start_date','end_date','status','created_at']`.
  - `direction` ‚àà {'asc','desc'}.
  - `perPage` w zakresie [5, 100].
  - `filter.status` ‚àà dozwolonych status√≥w.

## 10. Obs≈Çuga b≈Çƒôd√≥w
- 401/403: redirect do logowania lub toast ‚ÄûBrak uprawnie≈Ñ‚Äù.
- 404 (PDF/rekord): toast ‚ÄûNie znaleziono zasobu‚Äù.
- 409 (regeneracja w trakcie): poka≈º toast z tre≈õci ‚ÄûCannot regenerate meal plan while it is being processed.‚Äù.
- 422 walidacja:
  - `status` (‚ÄûCan only regenerate completed or failed meal plans.‚Äù) ‚Üí toast i brak akcji.
  - `rate_limit` (limit pr√≥b) ‚Üí toast z liczbƒÖ sekund; opcja ukrycia przycisku na czas odliczania.
- 5xx: toast ‚ÄûWystƒÖpi≈Ç b≈ÇƒÖd serwera. Spr√≥buj ponownie.‚Äù.

## 11. Kroki implementacji
1. Utw√≥rz stronƒô `resources/js/Pages/MealPlans/Index.vue` z odbiorem props: `mealPlans`, `filters`, `statuses`.
2. Zaimplementuj `FiltersBar` (`StatusFilter`, `PerPageSelect`) i integracjƒô z Inertia routerem (GET + query sync, `preserveScroll`, `replace`).
3. Zaimplementuj `MealPlanTable` z nag≈Ç√≥wkami sortujƒÖcymi (`SortableTableHeader`), kolumnami: Zakres dat, Status (`StatusTag`), Liczba posi≈Çk√≥w, Logi, Akcje.
4. Zaimplementuj `ActionDropdown` z akcjami: PodglƒÖd, Pobierz PDF (target="_blank"), Regeneruj (PUT `{ regenerate: true }`), Usu≈Ñ (DELETE). Dodaj `ConfirmDialog` dla Regeneruj/Usu≈Ñ.
5. Dodaj `ServerPagination` korzystajƒÖce z `mealPlans.links` i `mealPlans.meta` (Inertia GET zgodnie z linkami).
6. Dodaj lokalnƒÖ synchronizacjƒô filtr√≥w do `localStorage` (np. composable `useLocalStorageState(key, initial)` lub prosty efekt watch).
7. Wprowad≈∫ mapowanie status√≥w na kolory w `StatusTag` (Tailwind). Zapewnij a11y: aria-label, role, focus-ring.
8. Obs≈Çu≈º b≈Çƒôdy ≈ºƒÖda≈Ñ (422/409/5xx) poprzez globalny handler/`useToast()`; poka≈º komunikaty z payloadu (`rate_limit`, `status`).
9. Dodaj testy komponent√≥w (opcjonalnie): render tabeli, filtrowanie, sortowanie, dostƒôpno≈õƒá akcji per status.
10. Lint i format (Laravel Pint dla PHP ‚Äî bez zmian; ESLint/Prettier dla frontend), sprawd≈∫ brak b≈Çƒôd√≥w typ√≥w TS.





================================================
FILE: .ai/ui/recipe-list-view-implementation-plan.md
================================================
# Plan implementacji widoku Lista Przepis√≥w

## 1. PrzeglƒÖd
Widok "Lista Przepis√≥w" umo≈ºliwia u≈ºytkownikowi przeglƒÖd wszystkich zapisanych w systemie przepis√≥w, ich filtrowanie, sortowanie oraz paginacjƒô. Pozwala tak≈ºe na przej≈õcie do podglƒÖdu, edycji lub usuniƒôcia wybranego przepisu. Widok wykorzystuje mechanizm SSR Inertia.js i komunikuje siƒô z endpointem `RecipeController@index`.

## 2. Routing widoku
- ≈öcie≈ºka: `/recipes`
- Nazwa routa (frontend, vue-router-like): `recipes.index`
- Dostƒôp wy≈ÇƒÖcznie dla u≈ºytkownik√≥w zalogowanych (middleware `auth`, policy `viewAny` domy≈õlnie sprawdzana w kontrolerze).

## 3. Struktura komponent√≥w
```
AuthenticatedLayout
‚îî‚îÄ‚îÄ RecipesIndexPage
    ‚îú‚îÄ‚îÄ RecipesToolbar
    ‚îÇ   ‚îú‚îÄ‚îÄ CategoryFilterDropdown
    ‚îÇ   ‚îú‚îÄ‚îÄ SearchInput
    ‚îÇ   ‚îî‚îÄ‚îÄ ResetFiltersButton
    ‚îú‚îÄ‚îÄ RecipesTable
    ‚îÇ   ‚îú‚îÄ‚îÄ Thead (sortable headers)
    ‚îÇ   ‚îî‚îÄ‚îÄ Tbody
    ‚îÇ       ‚îî‚îÄ‚îÄ RecipeRow √ó n
    ‚îÇ           ‚îî‚îÄ‚îÄ RowActionDropdown (Show / Edit / Delete)
    ‚îú‚îÄ‚îÄ ServerPagination
    ‚îî‚îÄ‚îÄ ConfirmDeleteModal (portal)
```

## 4. Szczeg√≥≈Çy komponent√≥w
### RecipesIndexPage
- **Opis:** G≈Ç√≥wny kontener widoku; odbiera dane z Inertia, inicjuje `LocalStorageStateSync` i przekazuje props do komponent√≥w potomnych.
- **G≈Ç√≥wne elementy:** `RecipesToolbar`, `RecipesTable`, `ServerPagination`, `<Head>` (SEO).
- **Obs≈Çugiwane interakcje:** zmiana filtr√≥w, sortowania, stronicowania, usuniƒôcie przepisu.
- **Walidacja:** brak bezpo≈õredniej ‚Äì walidacja wej≈õcia odbywa siƒô w podkomponentach.
- **Typy:** `RecipesPageProps`, `FilterState`, `SortState`, `PaginatedRecipes`.
- **Propsy:** otrzymuje ca≈Çy obiekt `page.props` Inertia (`recipes`, `filters`, `categories`).

### RecipesToolbar
- **Opis:** Pasek z filtrami i wyszukiwarkƒÖ.
- **G≈Ç√≥wne elementy:** `CategoryFilterDropdown`, `SearchInput`, przycisk ‚ÄûWyczy≈õƒá filtry‚Äù.
- **Interakcje:**
  - `onCategoryChange(value: string|null)`
  - `onSearch(value: string)` (debounce 300 ms)
  - `onReset()`
- **Walidacja:** `search` max 50 znak√≥w.
- **Typy:** `ToolbarEvents` (emits).
- **Propsy:** `categories: CategoryOption[]`, `modelValue` (obiekt filtr√≥w) ‚Äì v-model kompatybilny.

### CategoryFilterDropdown
- **Opis:** Select z listƒÖ kategorii (Breakfast, Dinner, Supper) + opcja "Wszystkie".
- **Elementy:** `<Select>`, `<SelectItem>` (Shadcn-vue).
- **Interakcje:** emituje `update:modelValue`.
- **Walidacja:** brak (lista zamkniƒôta ‚Äì tylko warto≈õci z props).
- **Typy:** `CategoryOption` { value: string, label: string }.
- **Propsy:** `options: CategoryOption[]`, `modelValue: string|null`.

### SearchInput
- **Opis:** Input typu search z ikonƒÖ lupy.
- **Elementy:** `<Input>`, `<IconSearch>`.
- **Interakcje:** `update:modelValue` (debounced), `keydown.enter` natychmiast.
- **Walidacja:** maxLength 50.
- **Typy:** `string`.
- **Propsy:** `modelValue: string`.

### RecipesTable
- **Opis:** Tabela responsywna z danymi przepisu oraz akcjami.
- **Elementy:** `<table>`, `<thead>`, `<tbody>`, `RecipeRow`.
- **Interakcje:** sortowanie po klikniƒôciu nag≈Ç√≥wka; propaguje `deleteRequested(id)`.
- **Walidacja:** sortField ‚àà {name, category, calories, created_at}.
- **Typy:** `RecipeRowData`.
- **Propsy:** `recipes: RecipeRowData[]`, `sort: SortState`.

### RecipeRow
- **Opis:** Wiersz danych jednego przepisu.
- **Elementy:** `<tr>`, `<td>` √ó 5, `RowActionDropdown`.
- **Interakcje:** klik w nazwƒô ‚Üí navigate do `/recipes/:id`; dropdown akcje.
- **Walidacja:** brak.
- **Typy:** `RecipeRowData` = subset `RecipeResource`.
- **Propsy:** `recipe: RecipeRowData`.

### RowActionDropdown
- **Opis:** Menu kontekstowe z akcjami ‚ÄûPoka≈º‚Äù, ‚ÄûEdytuj‚Äù, ‚ÄûUsu≈Ñ‚Äù.
- **Elementy:** Shadcn `<DropdownMenu>`.
- **Interakcje:**
  - `show(id)` ‚Äì router push
  - `edit(id)` ‚Äì router push
  - `delete(id)` ‚Äì emit do rodzica (RecipesTable)
- **Walidacja:** policy `delete` ju≈º po stronie API.
- **Typy:** `{ id: number }`.
- **Propsy:** `id: number`.

### ServerPagination
- **Opis:** Nawigacja po stronach; wysy≈Ça zapytanie Inertia z aktualnymi filtrami.
- **Elementy:** `Pagination` z shadcn.
- **Interakcje:** `changePage(page: number)`.
- **Propsy:** `meta: PaginationMeta`, `links: PaginationLinks`.

### ConfirmDeleteModal
- **Opis:** Modal potwierdzajƒÖcy usuniƒôcie; otwierany portalo.
- **Interakcje:** `confirm()`, `cancel()`.
- **Walidacja:** brak.
- **Propsy:** `open: boolean`, `recipeName: string`.

## 5. Typy
```
// Zgodne z TypeScript 5.x
interface RecipeRowData {
  id: number;
  name: string;
  category: string; // "breakfast" | "dinner" | "supper"
  calories: string; // format "123.45"
  servings: number;
  created_at: string; // ISO 8601
}

interface PaginatedRecipes {
  data: RecipeRowData[];
  meta: PaginationMeta;
  links: PaginationLinks;
}

interface FilterState {
  search: string;
  category: string | null;
}

interface SortState {
  field: 'name' | 'created_at' | 'calories' | 'category';
  direction: 'asc' | 'desc';
}

interface RecipesPageProps {
  recipes: PaginatedRecipes;
  filters: Partial<FilterState & SortState>;
  categories: CategoryOption[];
}

interface CategoryOption {
  value: string;
  label: string;
}
```

## 6. ZarzƒÖdzanie stanem
- Stosujemy lokalny stan komponentu `RecipesIndexPage` dla `filterState`, `sortState`, `currentPage`.
- `LocalStorageStateSync` (komponent/hook) synchronizuje `filterState` oraz `sortState` w `localStorage` pod kluczem `mm.recipes.filters`.
- Ka≈ºda zmiana stanu wywo≈Çuje zapytanie Inertia `visit` (method GET) z parametrami query.
- Brak globalnego store (Pinia) ‚Äì zakres widoku lokalny.

## 7. Integracja API
| Akcja         | HTTP   | Endpoint        | Query/Payload                                     | Odpowied≈∫                         |
| ------------- | ------ | --------------- | ------------------------------------------------- | --------------------------------- |
| Pobierz listƒô | GET    | `/recipes`      | `search`, `category`, `sort`, `direction`, `page` | `PaginatedRecipes` + `categories` |
| Usu≈Ñ przepis  | DELETE | `/recipes/{id}` | ‚Äì                                                 | Redirect + flash `success`        |

- Wszystkie wywo≈Çania realizowane przez `Inertia.visit` z opcjƒÖ `preserveScroll`.

## 8. Interakcje u≈ºytkownika
1. Wpisanie frazy w `SearchInput` (po 300 ms) ‚Üí aktualizacja `search`, reset `page=1`, wys≈Çanie zapytania.
2. Wyb√≥r kategorii w `CategoryFilterDropdown` ‚Üí aktualizacja `category`, reset `page`, zapytanie.
3. Klik w nag≈Ç√≥wek kolumny ‚Üí toggluje `direction`, ustawia `sort`, zapytanie.
4. Klik w strza≈Çkƒô paginacji ‚Üí zmiana `page`, zapytanie.
5. Klik ‚ÄûUsu≈Ñ‚Äù w `RowActionDropdown` ‚Üí otwiera `ConfirmDeleteModal`; potwierdzenie wywo≈Çuje `DELETE`, po sukcesie reload listy.
6. Klik w nazwƒô przepisu lub ‚ÄûPoka≈º‚Äù ‚Üí router push `/recipes/:id`.
7. Klik ‚ÄûEdytuj‚Äù ‚Üí router push `/recipes/:id/edit`.

## 9. Warunki i walidacja
- `search` ‚â§ 50 znak√≥w (frontend) ‚Äì przy przekroczeniu blokada input.
- `category` musi nale≈ºeƒá do listy `categories` dostarczonej z backendu.
- `sort.field` ograniczony do dozwolonych p√≥l ‚Äì kontrolowane przez UI.
- Podczas usuwania przepisu wy≈õwietlamy modal i dopiero po potwierdzeniu wysy≈Çamy `DELETE`.

## 10. Obs≈Çuga b≈Çƒôd√≥w
- B≈Çƒôdy walidacji (422) po zapytaniach GET/DELETE:
  - Display `Toast` z `page.props.errors` (global handler). UI zachowuje ostatni stan.
- 403 (policy) przy pr√≥bie usuniƒôcia przepisu ‚Üí toast ‚ÄûNie masz uprawnie≈Ñ‚Äù.
- 500/Network ‚Äì komponent `ErrorBoundary` z komunikatem i opcjƒÖ pon√≥w.

## 11. Kroki implementacji
1. Utworzenie routingu `/recipes` w pliku routes/web.php (je≈õli brak) oraz w `ziggy.js`.
2. Stworzenie pliku `resources/js/Pages/Recipes/Index.vue` z szablonem `RecipesIndexPage`.
3. Zaimportowanie i zbudowanie `RecipesToolbar`, `RecipesTable`, `ServerPagination`, `ConfirmDeleteModal` w katalogu `resources/js/Components/recipes`.
4. Implementacja `LocalStorageStateSync` (lub wykorzystanie istniejƒÖcego) dla filtr√≥w i sortowania.
5. Integracja z Inertia: w komponencie `setup()` pobranie `usePage().props` ‚Üí inicjalizacja stan√≥w.
6. Dodanie reakcji na zmiany filtr√≥w/sortowania/paginacji: `watch` + `Inertia.visit`.
7. Zaimplementowanie sortowalnych nag≈Ç√≥wk√≥w w `RecipesTable` (komponent `SortableHeader`).
8. Dodanie dropdownu akcji z wykorzystaniem Shadcn-vue.
9. Zaimplementowanie `ConfirmDeleteModal` z portalem (`Teleport`) i obs≈ÇugƒÖ `DELETE`.
10. Dodanie hooka `useDeleteRecipe` (opcjonalnie) enkapsulujƒÖcego zapytanie DELETE i obs≈Çugƒô toast√≥w.
11. Zaimplementowanie `Toast` (je≈õli globalnie ‚Äì u≈ºyƒá istniejƒÖcego).
12. Dodanie test√≥w jednostkowych Vue dla `RecipesToolbar` i `RecipesTable` (Vitest).
13. Dodanie test√≥w e2e (Pest Dusk lub Cypress) scenariusza filtrowania i usuwania przepisu.
14. Review kodu, spe≈Çnienie regu≈Ç Pint, Larastan i CI.
15. Merge i deploy.



================================================
FILE: .ai/ui/show-recipe-view-implementation-plan.md
================================================
# Plan implementacji widoku PodglƒÖd przepisu

## 1. PrzeglƒÖd
Widok ‚ÄûPodglƒÖd przepisu‚Äù s≈Çu≈ºy do wy≈õwietlania pe≈Çnych informacji o pojedynczym przepisie, w tym listy sk≈Çadnik√≥w oraz instrukcji przygotowania. U≈ºytkownik mo≈ºe z tego poziomu przej≈õƒá do edycji przepisu lub go usunƒÖƒá. Widok jest dostƒôpny dla w≈Ça≈õciciela przepisu (policy `view` + `delete`).

## 2. Routing widoku
| Akcja            | ≈öcie≈ºka             | Metoda HTTP | Nazwa routingu |
| ---------------- | ------------------- | ----------- | -------------- |
| PodglƒÖd przepisu | `/recipes/:id`      | GET         | `recipes.show` |
| Edycja (link)    | `/recipes/:id/edit` | GET         | `recipes.edit` |

## 3. Struktura komponent√≥w
```
RecipeShowPage
‚îú‚îÄ‚îÄ Breadcrumbs
‚îú‚îÄ‚îÄ ActionBar
‚îÇ   ‚îú‚îÄ‚îÄ EditButton
‚îÇ   ‚îî‚îÄ‚îÄ DeleteButton (otwiera DeleteConfirmationDialog)
‚îú‚îÄ‚îÄ RecipeHeader
‚îÇ   ‚îî‚îÄ‚îÄ CategoryBadge
‚îú‚îÄ‚îÄ RecipeMetaBadges (kalorie, porcje)
‚îú‚îÄ‚îÄ IngredientCardGrid
‚îÇ   ‚îî‚îÄ‚îÄ IngredientCard √ó N
‚îú‚îÄ‚îÄ InstructionsSection
‚îî‚îÄ‚îÄ DeleteConfirmationDialog
```

## 4. Szczeg√≥≈Çy komponent√≥w
### RecipeShowPage
- **Opis**: G≈Ç√≥wny komponent strony; odbiera obiekt `recipe` z Inertia i przekazuje go dzieciom.
- **G≈Ç√≥wne elementy**: `<div>` kontener, nag≈Ç√≥wek, grid, przyciski akcji, dialog.
- **Interakcje**:
  - Klik ‚ÄûEdytuj‚Äù ‚Üí nawigacja do `recipes.edit`.
  - Klik ‚ÄûUsu≈Ñ‚Äù ‚Üí otwarcie modala.
- **Walidacja**: brak (tylko wy≈õwietlanie).
- **Typy**: `RecipeVM` (patrz sekcja 5).
- **Propsy**: `{ recipe: RecipeVM }` (z Inertia).

### ActionBar
- **Opis**: Pasek akcji z przyciskami ‚ÄûEdytuj‚Äù i ‚ÄûUsu≈Ñ‚Äù. Wy≈õwietla siƒô tylko dla w≈Ça≈õciciela.
- **Elementy**: dwa `<Button>` + ikony.
- **Interakcje**: emituje `edit` i `delete-request`.
- **Walidacja**: disabled, gdy brak uprawnie≈Ñ.
- **Typy**: brak dodatkowych.
- **Propsy**: `{ canEdit: boolean }`.

### DeleteConfirmationDialog
- **Opis**: Modal potwierdzajƒÖcy usuniƒôcie przepisu.
- **Elementy**: `<Dialog>` z nag≈Ç√≥wkiem, tekstem, przyciskami ‚ÄûAnuluj‚Äù/‚ÄûUsu≈Ñ‚Äù.
- **Interakcje**:
  - `confirm` ‚Üí emituje `delete-confirmed`.
- **Walidacja**: brak.

### RecipeHeader
- **Opis**: Wy≈õwietla nazwƒô przepisu i kategoriƒô.
- **Elementy**: `<h1>` + `CategoryBadge`.
- **Interakcje**: brak.
- **Propsy**: `{ name: string, category: RecipeCategory }`.

### CategoryBadge
- **Opis**: Kolorowy badge z kategoriƒÖ.
- **Propsy**: `{ category: RecipeCategory }`.

### RecipeMetaBadges
- **Opis**: Lista ‚Äûbadge‚Äôy‚Äù z metadanymi (kalorie, porcje).
- **Elementy**: `<Badge>` √ó2.
- **Propsy**: `{ calories: number, servings: number }`.

### IngredientCardGrid
- **Opis**: Grid kart sk≈Çadnik√≥w.
- **Elementy**: CSS grid responsive (`grid-cols-1 sm:grid-cols-2 lg:grid-cols-3`).
- **Propsy**: `{ ingredients: IngredientPivotVM[] }`.

### IngredientCard
- **Opis**: Pojedyncza karta sk≈Çadnika.
- **Elementy**: nazwa, ilo≈õƒá + jednostka.
- **Propsy**: `{ ingredient: IngredientPivotVM }`.

### InstructionsSection
- **Opis**: Sekcja z instrukcjƒÖ przygotowania (markdown lub pre-line).
- **Elementy**: `<h2>Instructions</h2>` + `<pre>` lub `<Markdown>`.
- **Propsy**: `{ instructions: string }`.

## 5. Typy
```ts
// Recipe category enum
export type RecipeCategory = 'breakfast' | 'supper' | 'dinner';

// VM otrzymywany z Inertia
export interface RecipeVM {
  id: number;
  name: string;
  category: RecipeCategory;
  calories: number; // decimal(10,2)
  servings: number;
  instructions: string;
  ingredients: IngredientPivotVM[];
  // timestamps pomijamy w UI
}

export interface IngredientPivotVM {
  id: number;         // id sk≈Çadnika
  name: string;       // nazwa sk≈Çadnika
  quantity: number;   // pivot.quantity
  unit: UnitVM;       // pivot.unit_id
}

export interface UnitVM {
  id: number;
  code: string; // g, kg, ml, l, pcs
}
```

## 6. ZarzƒÖdzanie stanem
- **UsePage** (Inertia) ‚Äî dostarcza `recipe` w propsach.
- **Ref/Reactive**: `showDeleteDialog: boolean`.
- **Brak globalnego store** ‚Äî pojedynczy widok.
- Customowy hook: `useDeleteRecipe` (wrappa axios/inertia.delete + isLoading + error).

## 7. Integracja API
| Akcja                 | Endpoint       | Metoda | Dane wej≈õciowe | Sukces                                   | B≈ÇƒÖd                                       |
| --------------------- | -------------- | ------ | -------------- | ---------------------------------------- | ------------------------------------------ |
| Pobierz dane przepisu | `/recipes/:id` | GET    | ‚Äì              | `RecipeResource` ‚Üí mapped to `RecipeVM`  | Toast z informacjƒÖ o b≈Çƒôdzie, redirect 404 |
| Usu≈Ñ przepis          | `/recipes/:id` | DELETE | ‚Äì              | Redirect do `/recipes` + flash `success` | Toast `error`, modal zostaje otwarty       |

## 8. Interakcje u≈ºytkownika
1. **Wej≈õcie na `/recipes/42`** ‚Üí render `RecipeShowPage` z danymi.
2. **Klik ‚ÄûEdytuj‚Äù** ‚Üí nawigacja do `/recipes/42/edit`.
3. **Klik ‚ÄûUsu≈Ñ‚Äù** ‚Üí otwiera siƒô `DeleteConfirmationDialog`.
4. **Potwierd≈∫ usuniƒôcie** ‚Üí ≈ºƒÖdanie DELETE, po sukcesie redirect z flashem.
5. **Anuluj w dialogu** ‚Üí zamkniƒôcie modala, brak ≈ºƒÖda≈Ñ.

## 9. Warunki i walidacja
- Widok tylko przy policy `view` ‚Äî backend zwr√≥ci 403/404, obs≈Çu≈ºyƒá redirect.
- Przycisk ‚ÄûEdytuj‚Äù / ‚ÄûUsu≈Ñ‚Äù widoczny wy≈ÇƒÖcznie, gdy `canEdit === true` (dostarczone w propsach lub z policy/Resource).

## 10. Obs≈Çuga b≈Çƒôd√≥w
- **404/403** podczas pobierania danych ‚Üí redirect do listy przepis√≥w + toast `error`.
- **DELETE** zwraca b≈ÇƒÖd (np. 403) ‚Üí toast `error`, modal pozostaje otwarty.
- Globalny `ErrorBoundary` Inertia do przechwycenia nieoczekiwanych b≈Çƒôd√≥w sieci.

## 11. Kroki implementacji
1. **Routing**: dodaj wpis w `routes/web.php` (je≈ºeli nie istnieje) oraz link w menu.
2. **Strona**: utw√≥rz `resources/js/Pages/Recipes/Show.vue` jako `RecipeShowPage`.
3. **Typy**: dodaj plik `types/recipe.ts` z interfejsami z sekcji 5.
4. **Komponenty UI**: zaimplementuj `CategoryBadge`, `RecipeMetaBadges`, `IngredientCard`, `IngredientCardGrid`, `DeleteConfirmationDialog`, `ActionBar`.
5. **Integracja Inertia**: w `Show.vue` u≈ºyj `defineProps<{ recipe: RecipeVM }>()`.
6. **Hook useDeleteRecipe**: wrapper dla `Inertia.delete` z loading state.
7. **Styling**: korzystaj z Tailwind + shadcn-vue komponent√≥w (`Button`, `Badge`, `Dialog`).
8. **Dostƒôpno≈õƒá**: aria-label na przyciskach, focus trap w dialogu.
9. **Testy**: napisz testy jednostkowe dla `CategoryBadge` oraz e2e (Cypress/Playwright) dla happy flow usuniƒôcia.
10. **Code review & Pint/Larastan**: uruchom pipeline CI.



================================================
FILE: .cursor/rules/database.mdc
================================================
---
description: Database, Eloquent ORM, and migration best practices
globs: "**/database/**/*.php", "**/app/Models/**/*.php", "**/*Migration*.php", "**/*Seeder*.php", "**/*Factory*.php"
alwaysApply: false
---

# Database & Eloquent Best Practices

## Eloquent Relationships
- Use Eloquent relationships properly: `hasMany`, `belongsTo`, `belongsToMany`, etc.
- Define inverse relationships for bidirectional access
- Use proper foreign key naming conventions (e.g., `user_id`)
- Implement polymorphic relationships when appropriate
- Use pivot tables for many-to-many relationships

## Query Optimization
- Write efficient queries with eager loading (`with()`)
- Select specific columns when not all data is needed
- Use Laravel's query builder for complex queries
- Implement proper indexing for performance
- Avoid N+1 query problems with eager loading
- Use `chunk()` or `cursor()` for processing large datasets

## Migrations
- Use descriptive migration names with timestamps
- Always include both `up()` and `down()` methods
- Use Laravel's schema builder methods
- Add proper indexes for foreign keys and frequently queried columns
- Use appropriate column types for data
- Include default values where appropriate

## Models
- Follow Laravel naming conventions (singular, PascalCase)
- Define fillable or guarded properties
- Implement custom accessors and mutators when needed
- Use model events (creating, created, updating, updated) appropriately
- Define proper casts for attributes
- Implement soft deletes when appropriate (`SoftDeletes` trait)

## Database Design
- Use proper data types for efficiency
- Implement foreign key constraints
- Design normalized tables to reduce redundancy
- Use appropriate indexing strategies
- Consider database-specific features (JSON columns, full-text search)
- Plan for scalability and performance

## Seeders and Factories
- Use database seeders for initial data setup
- Create model factories for testing and development data
- Use realistic fake data in factories
- Organize seeders logically (users before posts, etc.)
- Use factory states for different data variations

## Redis Integration
- Use Redis for caching frequently accessed data
- Implement session storage with Redis
- Use Redis for queue jobs and background processing
- Set appropriate TTL values for cached data
- Use Redis for rate limiting and temporary storage



================================================
FILE: .cursor/rules/php-laravel.mdc
================================================
---
description: PHP and Laravel coding standards and best practices
globs: "**/*.php"
alwaysApply: false
---

# PHP & Laravel Best Practices

## Code Standards
- Follow PSR-12 coding standards
- Use strict types declaration: `<?php declare(strict_types=1);`
- Use type hints for method parameters and return types
- Write descriptive docblocks for classes and methods
- Prefer dependency injection over static calls

## Laravel Conventions
- Use Laravel's built-in features: Eloquent ORM, Artisan commands, Service Container
- Implement proper validation using Form Requests
- Use Resource classes for API responses
- Use Laravel's helper functions when available
- Use Laravel's config system instead of hardcoded values

## Naming Conventions
- **Controllers**: PascalCase with "Controller" suffix (e.g., `UserController`)
- **Models**: PascalCase, singular (e.g., `User`)
- **Database tables**: snake_case, plural (e.g., `users`)
- **Migrations**: descriptive names with timestamps
- **Routes**: kebab-case for URI segments
- **Methods**: camelCase with descriptive verbs

## Error Handling
- Use Laravel's exception handling system
- Create custom exceptions for business logic errors
- Implement proper error handling with custom exceptions
- Use Laravel's built-in authentication and authorization features
- Log errors appropriately with context

## File Structure
- Follow Laravel's directory structure
- Group related functionality in modules/domains
- Use Laravel's service providers for binding interfaces
- Keep controllers thin, move business logic to services
- Use dedicated classes for complex operations

## Development Workflow
- Use Laravel Sail for consistent development environment
- Leverage Laravel's Artisan commands for code generation
- Use Laravel's built-in debugging tools: dd(), dump(), telescope
- Implement proper environment configuration
- Use Laravel's scheduler for recurring tasks



================================================
FILE: .cursor/rules/project-structure.mdc
================================================
---
description: Project structure, file organization, and code quality guidelines
globs:
alwaysApply: false
---

# Project Structure & Organization

## File Structure & Organization
- Follow Laravel's directory structure and conventions
- Group related functionality in modules/domains when appropriate
- Use Laravel's service providers for binding interfaces
- Organize Vue components in logical directories under `resources/js/components/`
- Keep components small and focused on single responsibility
- Use consistent naming across the application

## Component Organization
- Structure Vue components by feature/domain
- Use subdirectories for related components
- Implement proper component hierarchy
- Keep shared/common components in dedicated folders
- Use index files for easier imports

## Code Quality Standards
- Use Laravel Pint for automated code formatting (PSR-12 compliance)
- Run Larastan for static analysis and type checking
- Write comprehensive tests with PHPUnit
- Use meaningful commit messages following conventional commits
- Document complex business logic with inline comments
- Regular code reviews and refactoring sessions
- Follow SOLID principles where applicable

## Error Handling Architecture
- Use Laravel's exception handling system consistently
- Create custom exceptions for business logic errors
- Implement proper error pages with Inertia.js
- Log errors appropriately with contextual information
- Return user-friendly error messages
- Handle validation errors gracefully in Vue components

## Development Workflow
- Use feature branches for development
- Implement proper CI/CD pipeline with GitHub Actions
- Use Laravel Sail for consistent development environment
- Leverage Docker for containerized deployment
- Implement proper environment configuration management
- Use Laravel's scheduler for recurring tasks
- Implement proper backup and deployment strategies

## Documentation Standards
- Maintain up-to-date README files
- Document API endpoints and their usage
- Keep architectural decisions recorded
- Document deployment and setup procedures
- Maintain coding standards documentation
- Use inline documentation for complex algorithms

## Dependency Management
- Keep dependencies up to date with security patches
- Use Composer for PHP dependencies
- Use npm/yarn for Node.js dependencies
- Regular dependency audits for security vulnerabilities
- Document any custom modifications to vendor packages



================================================
FILE: .cursor/rules/security-performance.mdc
================================================
---
description: Security and performance optimization guidelines for Laravel applications
globs:
alwaysApply: false
---

# Security & Performance Guidelines

## Security Best Practices

### Input Validation & Sanitization
- Use Laravel's CSRF protection for all forms
- Implement proper input validation and sanitization
- Use Laravel's validation rules comprehensively
- Sanitize user input before database operations
- Validate file uploads and restrict file types

### Authentication & Authorization
- Use Laravel's built-in authentication features
- Implement proper authorization with policies and gates
- Use role-based access control (RBAC) when appropriate
- Secure API endpoints with proper authentication
- Implement proper session management

### Data Protection
- Use Laravel's encryption features for sensitive data
- Hash passwords with Laravel's Hash facade
- Implement proper rate limiting for APIs and forms
- Use HTTPS for all production environments
- Secure database credentials and API keys

### Security Headers & Configuration
- Configure proper security headers
- Use Laravel's built-in XSS protection
- Implement Content Security Policy (CSP)
- Configure proper CORS settings
- Regular security updates and dependency management

## Performance Optimization

### Database Performance
- Use Redis for caching and session storage
- Optimize database queries with proper indexing
- Implement eager loading to prevent N+1 queries
- Use database query optimization techniques
- Consider database connection pooling

### Application Performance
- Use Laravel's cache system effectively
- Implement proper queue system for heavy operations
- Optimize asset loading and compilation
- Use CDN for static assets
- Implement proper logging strategies

### Memory & Resource Management
- Monitor memory usage in long-running processes
- Use appropriate data structures for large datasets
- Implement pagination for large result sets
- Optimize image and file handling
- Use background processing for resource-intensive tasks

### Monitoring & Profiling
- Implement application performance monitoring
- Use Laravel Telescope for debugging
- Monitor database query performance
- Track application errors and exceptions
- Regular performance audits and optimization



================================================
FILE: .cursor/rules/shared.mdc
================================================
---
description: General AI behavior and communication style for full-stack development
globs:
alwaysApply: true
---

You are a Senior Full-Stack Developer expert in PHP, Laravel, Vue.js, Inertia.js, TailwindCSS, MySQL, and modern web development practices. You are thoughtful, give nuanced answers, and are brilliant at reasoning.

## Communication Guidelines

- Follow the user's requirements carefully & to the letter
- First think step-by-step - describe your plan for what to build in pseudocode, written out in great detail
- Confirm, then write code!
- Always write correct, best practice, DRY principle (Don't Repeat Yourself), bug free, fully functional and working code
- Focus on easy and readable code, over being performant
- Fully implement all requested functionality
- Leave NO todo's, placeholders or missing pieces
- Ensure code is complete! Verify thoroughly finalized
- Include all required imports, and ensure proper naming of key components
- Be concise. Minimize any other prose
- If you think there might not be a correct answer, you say so
- If you do not know the answer, say so, instead of guessing

## Core Principles

- Always prioritize code readability, maintainability, and security
- Follow established best practices consistently throughout the application
- Write code that is self-documenting and easy to understand
- Implement proper error handling and edge case management



================================================
FILE: .cursor/rules/tailwind-styling.mdc
================================================
---
description: TailwindCSS and Shadcn-vue styling guidelines
globs: "**/*.vue", "**/*.css", "**/tailwind.config.js", "**/postcss.config.js"
alwaysApply: false
---

# TailwindCSS & Styling Guidelines

## TailwindCSS Best Practices
- Always use Tailwind classes for styling; avoid custom CSS unless absolutely necessary
- Use Tailwind's responsive design utilities (`sm:`, `md:`, `lg:`, `xl:`, `2xl:`)
- Implement consistent spacing and typography using Tailwind's design tokens
- Use Tailwind's dark mode utilities when needed (`dark:`)
- Organize classes logically: layout, spacing, colors, typography, effects

## Class Organization
Organize Tailwind classes in this order:
1. Layout (display, position, top, right, bottom, left)
2. Flexbox/Grid (flex, grid, justify, align, etc.)
3. Spacing (margin, padding)
4. Sizing (width, height, max-width, etc.)
5. Typography (font, text, leading, tracking)
6. Colors (text-color, bg-color, border-color)
7. Borders (border, rounded)
8. Effects (shadow, opacity, transform)
9. Transitions and animations

## Custom CSS Guidelines
- Use @apply directive sparingly, prefer utility classes
- When custom CSS is needed, use CSS custom properties for theming
- Leverage Tailwind's component extraction for reusable patterns
- Keep custom styles scoped to components

## Shadcn-vue Integration
- Use Shadcn-vue components for consistent UI patterns
- Customize components through Tailwind classes when needed
- Follow Shadcn-vue's composition patterns
- Implement proper accessibility features provided by Shadcn-vue
- Use Shadcn-vue's theming system for consistent design
- Leverage the component library's built-in variants

## Responsive Design
- Use mobile-first approach with Tailwind's responsive prefixes
- Test on multiple screen sizes and devices
- Use appropriate breakpoints for content layout
- Ensure touch targets are minimum 44px for mobile devices

## Accessibility
- Maintain sufficient color contrast ratios
- Use semantic HTML elements with appropriate Tailwind classes
- Implement focus states for interactive elements
- Ensure keyboard navigation works properly
- Use aria-labels and other accessibility attributes as needed



================================================
FILE: .cursor/rules/tech-stack.mdc
================================================
---
description: Technology stack overview and version requirements
globs:
alwaysApply: true
---

# Tech Stack Overview

## Backend
- **PHP 8.2+** - Server-side programming language
- **Laravel 12.0+** - PHP web application framework
- **Laravel Sail** - Docker development environment
- **Inertia.js Laravel 2.0+** - Server-side adapter for SPA-like experience
- **MySQL** - Relational database management system
- **Redis** - In-memory data structure store for caching and queues

## Frontend
- **Node.js 22** - JavaScript runtime for building and development tools
- **Vue.js 3.4.0+** - Progressive JavaScript framework
- **Inertia.js Vue3 2.0.0+** - Client-side adapter for SPA-like experience
- **TailwindCSS 3.2.1+** - Utility-first CSS framework
- **Shadcn-vue 2.2.0+** - Vue component library

## Development Tools
- **Laravel Pint** - Code style fixer (PSR-12 compliance)
- **Laravel Sail** - Docker development environment
- **Larastan** - Static analysis tool for Laravel
- **PHPUnit** - Testing framework for PHP
- **OpenRouter.ai** - AI model access for development assistance

## Infrastructure
- **GitHub Actions** - CI/CD pipeline automation
- **DigitalOcean** - Application hosting via Docker containers

Always ensure compatibility with these specific versions and leverage the full capabilities of each technology in the stack.



================================================
FILE: .cursor/rules/testing.mdc
================================================
---
description: Testing best practices with PHPUnit and Laravel testing tools
globs: "**/tests/**/*.php", "**/*Test.php", "**/phpunit.xml"
alwaysApply: false
---

# Testing Best Practices

## Test Structure
- Write Feature tests for HTTP endpoints and user workflows
- Write Unit tests for business logic and isolated components
- Follow AAA pattern: Arrange, Act, Assert
- Use descriptive test method names that explain what is being tested
- Group related tests in logical test classes

## Laravel Testing Tools
- Use Laravel's testing helpers:
  - `actingAs()` for authentication
  - `assertStatus()`, `assertJson()` for HTTP responses
  - `assertDatabaseHas()`, `assertDatabaseMissing()` for database assertions
  - `assertRedirect()`, `assertViewIs()` for navigation testing
- Leverage Laravel's HTTP testing features
- Use `RefreshDatabase` trait for database tests

## Test Data Management
- Use model factories for test data generation
- Create realistic test data that represents actual use cases
- Use factory states for different data variations
- Clean up test data appropriately with database transactions
- Use database seeders for complex test scenarios

## Mocking and Dependencies
- Mock external services and APIs to avoid external dependencies
- Use Laravel's built-in mocking features
- Mock only what is necessary to isolate the system under test
- Verify mock interactions when testing behavior
- Use dependency injection to make testing easier

## Test Coverage
- Test both happy path and edge cases
- Include validation error testing
- Test authorization and permission scenarios
- Cover error handling and exception scenarios
- Test different user roles and access levels

## Performance Testing
- Test query performance with large datasets
- Verify caching behavior
- Test rate limiting functionality
- Monitor test execution time
- Use database queries counting in tests

## Best Practices
- Keep tests independent and isolated
- Use descriptive assertion messages
- Write tests before fixing bugs (TDD approach)
- Maintain test readability and simplicity
- Regular test maintenance and refactoring
- Use continuous integration for automated testing



================================================
FILE: .cursor/rules/ui-shadcn-helper.mdc
================================================
---
description:
globs:
alwaysApply: false
---
# Shadcn UI Components

Ten projekt wykorzystuje @shadcn/ui dla komponent√≥w interfejsu u≈ºytkownika. SƒÖ to piƒôknie zaprojektowane, dostƒôpne komponenty, kt√≥re mo≈ºna dostosowaƒá do swojej aplikacji.

## Odszukiwanie zainstalowanych komponent√≥w

Komponenty sƒÖ dostƒôpne w folderze `src/components/ui`, zgodnie z aliasami z pliku `components.json`

## Wykorzystanie komponentu

Zaimportuj komponent zgodnie ze skonfigurowanym aliasem `@/`

```tsx
import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
```

Przyk≈Çadowe wykorzsytanie komponnet√≥w:

```tsx
<Button variant="outline">Click me</Button>

<Card>
  <CardHeader>
    <CardTitle>Card Title</CardTitle>
    <CardDescription>Card Description</CardDescription>
  </CardHeader>
  <CardContent>
    <p>Card Content</p>
  </CardContent>
  <CardFooter>
    <p>Card Footer</p>
  </CardFooter>
</Card>
```

## Instalowanie dodatkowych komponent√≥w

Wiele innych komponent√≥w jest dostƒôpnych, ale nie sƒÖ one obecnie zainstalowane. Pe≈ÇnƒÖ listƒô mo≈ºna znale≈∫ƒá na stronie https://ui.shadcn.com/r

Aby zainstalowaƒá nowy komponent, wykorzystaj shadcn CLI


```bash
npx shadcn-vue@latest add [component-name]
```

Przyk≈Çadowo, aby dodaƒá komponent accordion

```bash
npx shadcn-vue@latest add accordion
```

Niekt√≥re popularne komponenty to:

- Accordion
- Alert
- AlertDialog
- AspectRatio
- Avatar
- Calendar
- Checkbox
- Collapsible
- Command
- ContextMenu
- DataTable
- DatePicker
- Dropdown Menu
- Form
- Hover Card
- Menubar
- Navigation Menu
- Popover
- Progress
- Radio Group
- ScrollArea
- Select
- Separator
- Sheet
- Skeleton
- Slider
- Switch
- Table
- Textarea
- Sonner (previously Toast)
- Toggle
- Tooltip

## Component Styling

Ten projekt wykorzystuje wariant stylu ‚Äûnew-york‚Äù z kolorem bazowym "neutral" i zmiennymi CSS do tworzenia motyw√≥w, zgodnie z konfiguracjƒÖ w sekcji `components.json`.



================================================
FILE: .cursor/rules/vue-frontend.mdc
================================================
---
description: Vue.js and Inertia.js frontend development best practices
globs: "**/*.vue", "**/*.js", "**/*.ts", "**/resources/js/**/*"
alwaysApply: false
---

# Vue.js & Inertia.js Best Practices

## Component Structure
- Use Composition API with `<script setup>` syntax
- Implement proper component structure:
  - Props definition with types
  - Emits definition
  - Descriptive component names (PascalCase)
- Structure components logically:
  - Template
  - Script setup
  - Style (scoped when needed)
- Use Shadcn-vue 2.2.0 components where it possible

## Reactivity System
- Use Vue's reactivity system correctly:
  - `ref()` for primitive values
  - `reactive()` for objects
  - `computed()` for derived state
- Avoid unnecessary reactive wrappers
- Use `nextTick()` when DOM updates are needed

## Naming Conventions
- **Components**: PascalCase (e.g., `UserProfile.vue`)
- **Variables**: camelCase with descriptive names
- **Functions**: camelCase starting with verbs
- **Event handlers**: prefix with "handle" (e.g., `handleSubmit`, `handleClick`)
- **Constants**: UPPER_SNAKE_CASE

## Inertia.js Integration
- Use Inertia.js forms for handling form submissions
- Implement proper error handling with Inertia's error bags
- Use Inertia's built-in progress indicators
- Leverage Inertia's visit() method for navigation
- Handle loading states appropriately

## Code Quality
- Follow Vue.js style guide for component naming and organization
- Use descriptive variable and function names
- Use early returns for better readability
- Implement accessibility features: aria-labels, tabindex, keyboard navigation
- Keep components small and focused on single responsibility
- Prefer composition over inheritance

## TypeScript Integration
- Use TypeScript for type safety when available
- Define proper interfaces for props and data structures
- Leverage Vue's built-in TypeScript support
- Use generic types for reusable components

## Performance
- Use v-memo for expensive computations
- Implement proper key attributes in v-for loops
- Lazy load components when appropriate
- Optimize bundle size with tree shaking



</kod_projektu>

<stos_technologiczny>
# Tech Stack

## Backend
- **PHP** (^8.2) - Server-side programming language
- **Laravel** (^12.0) - PHP web application framework
- **Inertia.js Laravel** (^2.0) - Server-side adapter for SPA-like experience
- **MySQL** - Relational database management system
- **Redis** - In-memory data structure store for caching and queues

## Frontend
- **Node.js** (22) - JavaScript runtime for building and development tools
- **Vue.js** (^3.4.0) - Progressive JavaScript framework
- **Inertia.js Vue3** (^2.0.0) - Client-side adapter for SPA-like experience
- **TailwindCSS** (^3.2.1) - Utility-first CSS framework
- **Shadcn-vue** (^2.2.0) - Vue component library

## Tools
- **Laravel Pint** (^1.13) - Code style fixer
- **Laravel Sail** (^1.41) - Docker development environment
- **Larastan** (^3.6) - Static analysis tool for Laravel
- **PHPUnit** (^11.5.3) - Testing framework

## Komunikacja z AI
- **Openrouter.ai** - dostƒôp do wielu modeli

## CI/CD i Hosting:
- **Github Actions** do tworzenia pipeline‚Äô√≥w CI/CD
- **DigitalOcean** do hostowania aplikacji za po≈õrednictwem obrazu docker
</stos_technologiczny>

Twoim zadaniem jest wygenerowanie szczeg√≥≈Çowego planu test√≥w, kt√≥ry bƒôdzie dostosowany do specyfiki projektu, uwzglƒôdniajƒÖc wykorzystywane technologie, strukturƒô kodu oraz kluczowe elementy repozytorium. Plan test√≥w powinien byƒá napisany w jƒôzyku polskim.

Przed stworzeniem planu test√≥w, przeprowad≈∫ dog≈ÇƒôbnƒÖ analizƒô projektu wewnƒÖtrz bloku <analiza_projektu> w swoim bloku my≈õlowym. W analizie uwzglƒôdnij:

1. Kluczowe komponenty projektu wynikajƒÖce z analizy kodu:
   - Wymie≈Ñ i opisz g≈Ç√≥wne komponenty projektu
2. Specyfikƒô stosu technologicznego i jego wp≈Çyw na strategiƒô testowania:
   - Przeanalizuj ka≈ºdy element stosu technologicznego i jego implikacje dla testowania
3. Priorytety testowe bazujƒÖce na strukturze repozytorium:
   - Zidentyfikuj i uszereguj obszary testowe wed≈Çug wa≈ºno≈õci
4. Potencjalne obszary ryzyka wymagajƒÖce szczeg√≥lnej uwagi w testach:
   - Wymie≈Ñ potencjalne ryzyka i uzasadnij, dlaczego wymagajƒÖ specjalnej uwagi

Po zako≈Ñczeniu analizy, stw√≥rz plan test√≥w wewnƒÖtrz bloku <plan_test√≥w>. Plan powinien zawieraƒá:

1. Wprowadzenie i cele testowania
2. Zakres test√≥w
3. Typy test√≥w do przeprowadzenia (np. testy jednostkowe, integracyjne, wydajno≈õciowe)
4. Scenariusze testowe dla kluczowych funkcjonalno≈õci
5. ≈örodowisko testowe
6. Narzƒôdzia do testowania
7. Harmonogram test√≥w
8. Kryteria akceptacji test√≥w
9. Role i odpowiedzialno≈õci w procesie testowania
10. Procedury raportowania b≈Çƒôd√≥w

Pamiƒôtaj, aby plan test√≥w by≈Ç:
- Dok≈Çadnie dostosowany do kontekstu projektu
- Uwzglƒôdnia≈Ç specyfikƒô wykorzystywanych technologii
- Priorytetyzowa≈Ç kluczowe elementy repozytorium
- By≈Ç napisany w jƒôzyku polskim
- Prezentowa≈Ç wysokƒÖ jako≈õƒá i profesjonalizm

Rozpocznij od analizy, a nastƒôpnie przejd≈∫ do tworzenia planu test√≥w. Tw√≥j ko≈Ñcowy wynik powinien sk≈Çadaƒá siƒô tylko z planu test√≥w i nie powinien powielaƒá ani streszczaƒá ≈ºadnej pracy wykonanej w bloku analizy projektu.

Przedstaw ten plan w formacie Markdown w /.ai/core/test-plan.md
